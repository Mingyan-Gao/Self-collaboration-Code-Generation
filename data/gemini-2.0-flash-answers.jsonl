{"id": 0, "code": "```python\nresult = df.iloc[List]\n```\n\n</code>", "metadata": {"problem_id": 0, "library_problem_id": 0, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 1, "code": "```python\ndf_shuffle = df.iloc[List].reset_index(drop=True)\ncompare = (df['Type'] != df_shuffle['Type'])\nresult = compare.sum()\n```\n\n</code>", "metadata": {"problem_id": 1, "library_problem_id": 1, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 2, "code": "```python\nfor col in df.columns:\n    counts = df[col].value_counts()\n    replacements = {val: 'other' for val in counts[counts < 2].index}\n    df[col] = df[col].replace(replacements)\nresult = df\n```\n\n</code>", "metadata": {"problem_id": 2, "library_problem_id": 2, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 2}}
{"id": 3, "code": "```python\ncols = df.columns\nfor col in cols:\n    counts = df[col].value_counts()\n    replacements = {val: 'other' for val in counts[counts < 3].index}\n    df[col] = df[col].replace(replacements)\nresult = df\n```\n\n</code>", "metadata": {"problem_id": 3, "library_problem_id": 3, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 4, "code": "```python\n    for col in df.columns:\n        counts = df[col].value_counts()\n        replacements = {val: 'other' for val in counts[counts < 2].index}\n        df[col] = df[col].replace(replacements)\n    return df\n```\n\n</code>", "metadata": {"problem_id": 4, "library_problem_id": 4, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 2}}
{"id": 5, "code": "```python\nfor col, threshold in [('Qu1', 3), ('Qu2', 2), ('Qu3', 2)]:\n    value_counts = df[col].value_counts()\n    mask = value_counts[df[col]].ge(threshold)\n    df[col] = df[col].where(mask, 'other')\nresult = df\n```\n\n</code>", "metadata": {"problem_id": 5, "library_problem_id": 5, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 6, "code": "```python\nvc1 = df['Qu1'].value_counts()\nvc2 = df['Qu2'].value_counts()\nvc3 = df['Qu3'].value_counts()\n\ndf['Qu1'] = df['Qu1'].apply(lambda x: x if (vc1[x] >= 3 or x == 'apple') else 'other')\ndf['Qu3'] = df['Qu3'].apply(lambda x: x if vc3[x] >= 2 else 'other')\n\nresult = df\n```\n\n</code>", "metadata": {"problem_id": 6, "library_problem_id": 6, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 7, "code": "```python\ndf['keep'] = df.groupby('url')['keep_if_dup'].transform(lambda x: 'Yes' in x.values)\nresult = df[~((df.duplicated(subset=['url'], keep='first')) & (df['keep_if_dup']!='Yes'))]\nresult = result.drop('keep', axis=1)\n```\n\n</code>", "metadata": {"problem_id": 7, "library_problem_id": 7, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 7}}
{"id": 8, "code": "```python\nids_to_drop = []\nseen_urls = set()\nfor index, row in df.iterrows():\n    url = row['url']\n    drop_if_dup = row['drop_if_dup']\n    if url in seen_urls and drop_if_dup == 'Yes':\n        ids_to_drop.append(index)\n    else:\n        seen_urls.add(url)\nresult = df.drop(ids_to_drop)\n```\n\n</code>", "metadata": {"problem_id": 8, "library_problem_id": 8, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 7}}
{"id": 9, "code": "```python\ndf['keep'] = df.groupby('url')['keep_if_dup'].transform(lambda x: 'Yes' in x.values)\ndf_no = df[df['keep'] == False].drop_duplicates(subset='url', keep='last')\ndf_yes = df[df['keep'] == True]\nresult = pd.concat([df_yes, df_no]).sort_index().drop(columns=['keep'])\n```\n\n</code>", "metadata": {"problem_id": 9, "library_problem_id": 9, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 7}}
{"id": 10, "code": "```python\ndef df_to_nested_dict(df):\n    if len(df.columns) == 1:\n        return df.iloc[:, 0].item()\n    \n    first_col = df.columns[0]\n    grouped = df.groupby(first_col)\n    \n    result = {}\n    for name, group in grouped:\n        result[name] = df_to_nested_dict(group.iloc[:, 1:])\n    return result\n\nresult = df_to_nested_dict(df)\n```\n\n</code>", "metadata": {"problem_id": 10, "library_problem_id": 10, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 11, "code": "```python\ndf['datetime'] = df['datetime'].dt.tz_localize(None)\n```\n\n</code>", "metadata": {"problem_id": 11, "library_problem_id": 11, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 12, "code": "```python\n    df['datetime'] = df['datetime'].dt.tz_localize(None)\n    return df\n```\n\n</code>", "metadata": {"problem_id": 12, "library_problem_id": 12, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 13, "code": "```python\ndf['datetime'] = df['datetime'].dt.tz_localize(None)\ndf['datetime'] = df['datetime'].dt.strftime('%d-%b-%Y %H:%M:%S')\ndf = df.sort_values(by='datetime')\n```\n\n</code>", "metadata": {"problem_id": 13, "library_problem_id": 13, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 14, "code": "```python\ndf['datetime'] = df['datetime'].dt.tz_localize(None)\ndf = df.sort_values(by='datetime')\n```\n\n</code>", "metadata": {"problem_id": 14, "library_problem_id": 14, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 15, "code": "```python\ndef extract_key_value_pairs(message):\n    pairs = message.strip('[]').split(', ')\n    data = {}\n    for pair in pairs:\n        if ':' in pair:\n            key, value = pair.split(': ')\n            data[key] = value\n    return data\n\ndf['message'] = df['message'].apply(extract_key_value_pairs)\n\ndf_expanded = pd.json_normalize(df['message'])\ndf = pd.concat([df, df_expanded], axis=1)\ndf = df.drop('message', axis=1)\ncols = ['job', 'money', 'wife', 'group', 'kids']\nfor col in cols:\n    if col not in df.columns:\n        df[col] = 'none'\n    else:\n        df[col] = df[col].fillna('none')\n        df[col] = df[col].apply(lambda x: 'none' if x == '' else x)\n\ndf = df[['name', 'status', 'number', 'job', 'money', 'wife', 'group', 'kids']]\nresult = df\n```\n\n</code>", "metadata": {"problem_id": 15, "library_problem_id": 15, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 16, "code": "```python\ndf['score'] = df.apply(lambda row: row['score'] * 10 if row['product'] in products else row['score'], axis=1)\n```\n\n</code>", "metadata": {"problem_id": 16, "library_problem_id": 16, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 17, "code": "```python\ndf['score'] = df.apply(lambda row: row['score'] * 10 if row['product'] not in products else row['score'], axis=1)\n```\n\n</code>", "metadata": {"problem_id": 17, "library_problem_id": 17, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 18, "code": "```python\nmultiplier = 10\nfor product_list in products:\n    df['score'] = df['score'].mask(df['product'].isin(product_list), df['score'] * multiplier)\n```\n\n</code>", "metadata": {"problem_id": 18, "library_problem_id": 18, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 19, "code": "```python\nfiltered_df = df[df['product'].isin(products)]\nif not filtered_df.empty:\n    min_score = filtered_df['score'].min()\n    max_score = filtered_df['score'].max()\n    df.loc[df['product'].isin(products), 'score'] = (df.loc[df['product'].isin(products), 'score'] - min_score) / (max_score - min_score)\n```\n\n</code>", "metadata": {"problem_id": 19, "library_problem_id": 19, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 20, "code": "```python\ndf['category'] = df.idxmax(axis=1)\n```\n\n</code>", "metadata": {"problem_id": 20, "library_problem_id": 20, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 21, "code": "```python\ndf['category'] = df.idxmin(axis=1)\n```\n\n</code>", "metadata": {"problem_id": 21, "library_problem_id": 21, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 20}}
{"id": 22, "code": "```python\ndf['category'] = df.apply(lambda row: list(df.columns[row == 1]), axis=1)\n```\n\n</code>", "metadata": {"problem_id": 22, "library_problem_id": 22, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 20}}
{"id": 23, "code": "```python\ndf['Date'] = df['Date'].dt.strftime('%b-%Y')\n```\n\n</code>", "metadata": {"problem_id": 23, "library_problem_id": 23, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 24, "code": "```python\ndf['Date'] = df['Date'].dt.strftime('%d-%b-%Y')\n```\n\n</code>", "metadata": {"problem_id": 24, "library_problem_id": 24, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 23}}
{"id": 25, "code": "```python\ndf = df[(df['Date'] >= List[0]) & (df['Date'] <= List[1])]\ndf['Date'] = df['Date'].dt.strftime('%d-%b-%Y %A')\n```\n\n</code>", "metadata": {"problem_id": 25, "library_problem_id": 25, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 23}}
{"id": 26, "code": "```python\nfirst_col = df['#1'].copy()\nlast_value = first_col.iloc[-1]\nfirst_col[1:] = first_col[:-1]\nfirst_col.iloc[0] = last_value\ndf['#1'] = first_col\ndf = df\n```\n\n</code>", "metadata": {"problem_id": 26, "library_problem_id": 26, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 27, "code": "```python\nfirst_col = df['#1'].tolist()\nshifted_col = first_col[1:] + [first_col[0]]\ndf['#1'] = shifted_col\n```\n\n</code>", "metadata": {"problem_id": 27, "library_problem_id": 27, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 26}}
{"id": 28, "code": "```python\nfirst_col_last = df['#1'].iloc[-1]\nlast_col_first = df['#2'].iloc[0]\ndf['#1'] = df['#1'].shift(1, fill_value=first_col_last)\ndf['#2'] = df['#2'].shift(-1, fill_value=last_col_first)\n```\n\n</code>", "metadata": {"problem_id": 28, "library_problem_id": 28, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 29, "code": "```python\nbest_r2 = float('inf')\nbest_df = None\nfor i in range(len(df)):\n    new_col = df['#1'].tolist()\n    last_element = new_col[-1]\n    for j in range(len(new_col) - 1, 0, -1):\n        new_col[j] = new_col[j - 1]\n    new_col[0] = last_element\n    new_df = pd.DataFrame({'#1': new_col, '#2': df['#2'].tolist()}, index=df.index)\n    from sklearn.metrics import r2_score\n    r2 = r2_score(new_df['#1'], new_df['#2'])\n    if r2 < best_r2:\n        best_r2 = r2\n        best_df = new_df\ndf = best_df\n```\n\n</code>", "metadata": {"problem_id": 29, "library_problem_id": 29, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 30, "code": "```python\ndf.columns = [col + 'X' for col in df.columns]\n```\n\n</code>", "metadata": {"problem_id": 30, "library_problem_id": 30, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 31, "code": "```python\ndf.columns = ['X' + col for col in df.columns]\n```\n\n</code>", "metadata": {"problem_id": 31, "library_problem_id": 31, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 30}}
{"id": 32, "code": "```python\nnew_columns = [f\"X{col}\" if not col.endswith(\"X\") else f\"X{col}\" for col in df.columns]\ndf.columns = new_columns\n```\n\n</code>", "metadata": {"problem_id": 32, "library_problem_id": 32, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 30}}
{"id": 33, "code": "```python\ncols_to_mean = [col for col in df.columns if 'val' in col]\nagg_dict = {\"group_color\": \"first\"}\nfor col in cols_to_mean:\n    agg_dict[col] = \"mean\"\nresult = df.groupby('group').agg(agg_dict)\n```\n\n</code>", "metadata": {"problem_id": 33, "library_problem_id": 33, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 34, "code": "```python\ncols_to_sum = [col for col in df.columns if 'val' in col]\nagg_dict = {\"group_color\": \"first\"}\nfor col in cols_to_sum:\n    agg_dict[col] = \"sum\"\nresult = df.groupby('group').agg(agg_dict)\n```\n\n</code>", "metadata": {"problem_id": 34, "library_problem_id": 34, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 33}}
{"id": 35, "code": "```python\nagg_dict = {\"group_color\": \"first\"}\nfor col in df.columns:\n    if col.startswith(\"val\"):\n        if col.endswith(\"2\"):\n            agg_dict[col] = \"mean\"\n        else:\n            agg_dict[col] = \"sum\"\nresult = df.groupby('group').agg(agg_dict)\n```\n\n</code>", "metadata": {"problem_id": 35, "library_problem_id": 35, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 33}}
{"id": 36, "code": "```python\nresult = df.iloc[row_list][column_list].mean()\n```\n\n</code>", "metadata": {"problem_id": 36, "library_problem_id": 36, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 37, "code": "```python\nresult = df.loc[row_list, column_list].sum(axis=0)\n```\n\n</code>", "metadata": {"problem_id": 37, "library_problem_id": 37, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 38, "code": "```python\nresult = df.loc[row_list, column_list].sum(axis=0)\nmax_value = result.max()\nresult = result[result != max_value]\n```\n\n</code>", "metadata": {"problem_id": 38, "library_problem_id": 38, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 39, "code": "```python\nresult = pd.concat([df[col].value_counts() for col in df.columns], keys=df.columns)\n```\n\n</code>", "metadata": {"problem_id": 39, "library_problem_id": 39, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 40, "code": "```python\nresult = df.apply(lambda x: x.astype(str).str.contains('null').sum())\n```\n\n</code>", "metadata": {"problem_id": 40, "library_problem_id": 40, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 39}}
{"id": 41, "code": "```python\nresult='\\n'.join([f'---- {col} ---\\n{df[col].value_counts()}\\nName: {col}, dtype: {df[col].dtype}' for col in df.columns])\n```\n\n</code>", "metadata": {"problem_id": 41, "library_problem_id": 41, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 39}}
{"id": 42, "code": "```python\nheader = df.iloc[0].fillna('') + ' | ' + df.iloc[1].fillna('').astype(str)\ndf.columns = header\ndf = df.iloc[2:]\nresult = df\n```\n\n</code>", "metadata": {"problem_id": 42, "library_problem_id": 42, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 43, "code": "```python\nnew_header = df.iloc[0] + ' | ' + df.iloc[1].astype(str)\ndf = df[2:]\ndf.columns = new_header\nresult = df\n```\n\n</code>", "metadata": {"problem_id": 43, "library_problem_id": 43, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 44, "code": "```python\nresult = pd.DataFrame([pd.Series(row.dropna().values) for row in df.values])\n```\n\n</code>", "metadata": {"problem_id": 44, "library_problem_id": 44, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 45, "code": "```python\nresult = df.mask(df.isnull()).apply(lambda x: pd.Series(x.dropna().reindex(x.index)), axis=1)\n```\n\n</code>", "metadata": {"problem_id": 45, "library_problem_id": 45, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 44}}
{"id": 46, "code": "```python\nresult = df.apply(lambda x : pd.Series(x.sort_values(na_position='first').values),0)\n```\n\n</code>", "metadata": {"problem_id": 46, "library_problem_id": 46, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 44}}
{"id": 47, "code": "```python\nsmall_df = df.loc[df['value'] < thresh]\nbig_df = df.loc[df['value'] >= thresh]\nnew_row = pd.DataFrame({'value': [small_df['value'].sum()]}, index=['X'])\nresult = pd.concat([big_df, new_row])\n```\n\n</code>", "metadata": {"problem_id": 47, "library_problem_id": 47, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 48, "code": "```python\ndf_filtered = df[df['value'] < thresh]\ndf_other = df[~(df['value'] < thresh)]\nif not df_other.empty:\n    new_row = pd.DataFrame({'value': [df_other['value'].mean()]}, index=['X'])\n    result = pd.concat([df_filtered, new_row])\nelse:\n    result = df_filtered\n```\n\n</code>", "metadata": {"problem_id": 48, "library_problem_id": 48, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 47}}
{"id": 49, "code": "```python\noutside_section = df[(df['value'] < section_left) | (df['value'] > section_right)]\ninside_section = df[(df['value'] >= section_left) & (df['value'] <= section_right)]\n\nif not outside_section.empty:\n    new_row = pd.DataFrame({'value': [outside_section['value'].mean()]}, index=['X'])\n    result = pd.concat([inside_section, new_row])\nelse:\n    result = inside_section\n```\n\n</code>", "metadata": {"problem_id": 49, "library_problem_id": 49, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 47}}
{"id": 50, "code": "```python\nresult = df.copy()\nfor col in df.columns:\n    result[f\"inv_{col}\"] = 1 / df[col]\n```\n\n</code>", "metadata": {"problem_id": 50, "library_problem_id": 50, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 51, "code": "```python\nresult = df.copy()\nfor col in df.columns:\n    result[f\"exp_{col} \"] = df[col].apply(lambda x:  2.718281828459045**x)\n```\n\n</code>", "metadata": {"problem_id": 51, "library_problem_id": 51, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 50}}
{"id": 52, "code": "```python\nresult = df.copy()\nfor col in df.columns:\n    result[f\"inv_{col}\"] = 1/df[col]\n    result[f\"inv_{col}\"] = result[f\"inv_{col}\"].replace([float('inf')], 0)\n```\n\n</code>", "metadata": {"problem_id": 52, "library_problem_id": 52, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 50}}
{"id": 53, "code": "```python\nimport numpy as np\nresult = df.copy()\nfor col in df.columns:\n    result[f\"sigmoid_{col}\"] = 1 / (1 + np.exp(-df[col]))\n```\n\n</code>", "metadata": {"problem_id": 53, "library_problem_id": 53, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 50}}
{"id": 54, "code": "```python\nmins = df.idxmin()\nresult = {}\nfor col in df.columns:\n    s = df[col]\n    minimum_index = mins[col]\n    s = s[:minimum_index]\n    result[col] = s.index[s.values == s.max()][-1]\n\nresult = pd.Series(result)\n```\n\n</code>", "metadata": {"problem_id": 54, "library_problem_id": 54, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 55, "code": "```python\nmin_idx = df.idxmin()\nresult = {}\nfor col in df.columns:\n    min_loc = df.index.get_loc(min_idx[col])\n    subset = df.iloc[min_loc:]\n    max_idx = subset.idxmax()[col]\n    result[col] = max_idx\nresult = pd.Series(result)\n```\n\n</code>", "metadata": {"problem_id": 55, "library_problem_id": 55, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 56, "code": "```python\nmin_date = df['dt'].min()\nmax_date = df['dt'].max()\nnew_index = pd.date_range(min_date, max_date)\nresult = pd.DataFrame()\nfor u in df['user'].unique():\n    temp = df[df['user'] == u].set_index('dt')\n    temp = temp.reindex(new_index)\n    temp['user'] = u\n    temp = temp.fillna(0).reset_index()\n    temp = temp.rename(columns={'index': 'dt'})\n    result = pd.concat([result, temp], axis=0)\nresult['dt'] = result['dt'].dt.strftime('%Y-%m-%d')\nresult = result[['dt', 'user', 'val']]\n```\n\n</code>", "metadata": {"problem_id": 56, "library_problem_id": 56, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 57, "code": "```python\nmin_date = df['dt'].min()\nmax_date = df['dt'].max()\nnew_index = pd.date_range(min_date, max_date)\nnew_df = pd.DataFrame({'dt': new_index})\nnew_df['dt'] = pd.to_datetime(new_df['dt'])\nresult = pd.DataFrame()\nfor user in df['user'].unique():\n    user_df = df[df['user'] == user].copy()\n    user_df = user_df.set_index('dt')\n    user_df = new_df.merge(user_df, left_on='dt', right_index=True, how='left')\n    user_df['user'] = user\n    user_df['val'] = user_df['val'].fillna(0).astype(int)\n    user_df = user_df[['dt', 'user', 'val']]\n    result = pd.concat([result, user_df])\nresult = result.reset_index(drop=True)\n```\n\n</code>", "metadata": {"problem_id": 57, "library_problem_id": 57, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 56}}
{"id": 58, "code": "```python\nresult = []\nfor user in df['user'].unique():\n    user_df = df[df['user'] == user].copy()\n    min_date = user_df['dt'].min()\n    max_date = user_df['dt'].max()\n    date_range = pd.date_range(min_date, max_date)\n    new_df = pd.DataFrame({'dt': date_range})\n    new_df['user'] = user\n    new_df = pd.merge(new_df, user_df, on=['user', 'dt'], how='left')\n    new_df['val'] = new_df['val'].fillna(233)\n    result.append(new_df)\nresult = pd.concat(result)\nresult['dt'] = result['dt'].dt.strftime('%Y-%m-%d')\n```\n\n</code>", "metadata": {"problem_id": 58, "library_problem_id": 58, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 56}}
{"id": 59, "code": "```python\nnew_df = pd.DataFrame()\nfor user in df['user'].unique():\n    user_df = df[df['user'] == user].copy()\n    min_date = user_df['dt'].min()\n    max_date = user_df['dt'].max()\n    all_dates = pd.date_range(min_date, max_date)\n    all_dates_df = pd.DataFrame({'dt': all_dates})\n    user_df['val'] = user_df['val'].max()\n    user_df = all_dates_df.merge(user_df[['dt', 'user', 'val']], on='dt', how='left')\n    user_df['user'] = user\n    user_df['val'] = user_df['val'].fillna(method='ffill')\n    new_df = pd.concat([new_df, user_df])\n\nresult = new_df\n```\n\n</code>", "metadata": {"problem_id": 59, "library_problem_id": 59, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 56}}
{"id": 60, "code": "```python\nresult = []\nfor user in df['user'].unique():\n    user_df = df[df['user'] == user].copy()\n    min_date = user_df['dt'].min()\n    max_date = user_df['dt'].max()\n    max_val = user_df['val'].max()\n    date_range = pd.date_range(min_date, max_date)\n    temp_df = pd.DataFrame({'dt': date_range})\n    temp_df['user'] = user\n    temp_df['val'] = max_val\n    result.append(temp_df)\nresult = pd.concat(result)\nresult['dt'] = result['dt'].dt.strftime('%d-%b-%Y')\n```\n\n</code>", "metadata": {"problem_id": 60, "library_problem_id": 60, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 56}}
{"id": 61, "code": "```python\nname_to_id = {name: i + 1 for i, name in enumerate(df['name'].unique())}\ndf['name'] = df['name'].map(name_to_id)\nresult = df\n```\n\n</code>", "metadata": {"problem_id": 61, "library_problem_id": 61, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 62, "code": "```python\nunique_values = df['a'].unique()\nmapping = {val: i+1 for i, val in enumerate(unique_values)}\ndf['a'] = df['a'].map(mapping)\nresult = df\n```\n\n</code>", "metadata": {"problem_id": 62, "library_problem_id": 62, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 61}}
{"id": 63, "code": "```python\n    name_ids = df['name'].astype('category').cat.codes + 1\n    df['name'] = name_ids\n    return df\n```\n\n</code>", "metadata": {"problem_id": 63, "library_problem_id": 63, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 64, "code": "```python\ndf['ID'] = df.groupby(['name', 'a']).ngroup() + 1\nresult = df.drop(columns=['name', 'a'])\nresult = result[['ID', 'b', 'c']]\n```\n\n</code>", "metadata": {"problem_id": 64, "library_problem_id": 64, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 61}}
{"id": 65, "code": "```python\ndf = df.melt(id_vars=['user', 'someBool'], var_name='date', value_name='value')\n```\n\n</code>", "metadata": {"problem_id": 65, "library_problem_id": 65, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 66, "code": "```python\ndf = df.melt(id_vars=['user'], var_name='others', value_name='value')\n```\n\n</code>", "metadata": {"problem_id": 66, "library_problem_id": 66, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 65}}
{"id": 67, "code": "```python\ndf = df.melt(id_vars=['user', 'someBool'], var_name='date', value_name='value')\ndf = df.dropna(subset=['value'])\ndf['value'] = df['value'].astype(int)\n```\n\n</code>", "metadata": {"problem_id": 67, "library_problem_id": 67, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 65}}
{"id": 68, "code": "```python\nresult = df.loc[df['c'] > 0.5, columns].values\n```\n\n</code>", "metadata": {"problem_id": 68, "library_problem_id": 68, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 69, "code": "```python\nresult = df.loc[df['c'] > 0.45, columns].values\n```\n\n</code>", "metadata": {"problem_id": 69, "library_problem_id": 69, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 70, "code": "```python\n    result = df.loc[df['c'] > 0.5, columns].values\n    return result\n```\n\n</code>", "metadata": {"problem_id": 70, "library_problem_id": 70, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 71, "code": "```python\n    df_subset = df[df.c > 0.5][columns].copy()\n    df_subset['sum'] = df_subset.iloc[:, 0] + df_subset.iloc[:, 1]\n    return df_subset\n```\n\n</code>", "metadata": {"problem_id": 71, "library_problem_id": 71, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 72, "code": "```python\n    return df.loc[df.c > 0.5, columns]\n```\n\n</code>", "metadata": {"problem_id": 72, "library_problem_id": 72, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 73, "code": "```python\ndf['date'] = pd.to_datetime(df['date'])\ndf = df.sort_values(by='date')\nfiltered_df = []\nlast_date = pd.Timestamp.min\nfor _, row in df.iterrows():\n    if (row['date'] - last_date).days > X:\n        filtered_df.append(row)\n        last_date = row['date']\nresult = pd.DataFrame(filtered_df)\n```\n\n</code>", "metadata": {"problem_id": 73, "library_problem_id": 73, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 73}}
{"id": 74, "code": "```python\ndf['date'] = pd.to_datetime(df['date'])\ndf = df.sort_values(by='date')\nfiltered_df = []\nlast_date = pd.Timestamp.min\nfor _, row in df.iterrows():\n    if row['date'] - last_date > pd.Timedelta(weeks=X):\n        filtered_df.append(row)\n        last_date = row['date']\nresult = pd.DataFrame(filtered_df)\n```\n\n</code>", "metadata": {"problem_id": 74, "library_problem_id": 74, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 73}}
{"id": 75, "code": "```python\ndf['date'] = pd.to_datetime(df['date'], format='%m/%d/%y')\ndf = df.sort_values(by='date')\nfiltered_df = pd.DataFrame(columns=df.columns)\nlast_date = pd.Timestamp.min\nfor _, row in df.iterrows():\n    if (row['date'] - last_date).days >= X:\n        filtered_df = pd.concat([filtered_df, pd.DataFrame([row])], ignore_index=True)\n        last_date = row['date']\nfiltered_df['date'] = filtered_df['date'].dt.strftime('%d-%b-%Y')\nresult = filtered_df[['date', 'close']]\n```\n\n</code>", "metadata": {"problem_id": 75, "library_problem_id": 75, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 73}}
{"id": 76, "code": "```python\nresult = df.groupby(df.index // 3).mean()\n```\n\n</code>", "metadata": {"problem_id": 76, "library_problem_id": 76, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 77, "code": "```python\nresult = df.groupby(df.index // 3).sum()\n```\n\n</code>", "metadata": {"problem_id": 77, "library_problem_id": 77, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 78, "code": "```python\nresult = df.groupby(df.index // 4).sum()\n```\n\n</code>", "metadata": {"problem_id": 78, "library_problem_id": 78, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 76}}
{"id": 79, "code": "```python\nresult = df.groupby(df.index // 3).mean().iloc[::-1].reset_index(drop=True)\n```\n\n</code>", "metadata": {"problem_id": 79, "library_problem_id": 79, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 76}}
{"id": 80, "code": "```python\ndef custom_aggregation(df):\n    result = []\n    i = 0\n    while i < len(df):\n        if i % 5 < 3:\n            result.append(df['col1'][i:i+3].sum())\n            i += 3\n        else:\n            result.append(df['col1'][i:i+2].mean())\n            i += 2\n    return pd.DataFrame({'col1': result})\n\nresult = custom_aggregation(df)\n```\n\n</code>", "metadata": {"problem_id": 80, "library_problem_id": 80, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 76}}
{"id": 81, "code": "```python\nsums = df['col1'].iloc[::-1].groupby(df.index[::-1] // 3).sum().iloc[::-1].tolist()\navgs = df['col1'].iloc[::-1].groupby(df.index[::-1] // 2).mean().iloc[::-1].tolist()\nsums = [s for i, s in enumerate(sums) if i % 2 == 0]\navgs = [a for i, a in enumerate(avgs) if i % 2 == 1]\nresult = pd.DataFrame({'col1': sums + avgs})\n```\n\n</code>", "metadata": {"problem_id": 81, "library_problem_id": 81, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 76}}
{"id": 82, "code": "```python\ndf['A'] = df['A'].mask(df['A'] == 0).ffill()\n```\n\n</code>", "metadata": {"problem_id": 82, "library_problem_id": 82, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 83, "code": "```python\ndf['A'] = df['A'].replace(0, method='bfill')\n```\n\n</code>", "metadata": {"problem_id": 83, "library_problem_id": 83, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 82}}
{"id": 84, "code": "```python\ndf['A'] = df['A'].replace(0, method='ffill').fillna(method='bfill')\ndf['A'] = df['A'].combine_first(df['A'].iloc[::-1].replace(0, method='ffill').fillna(method='bfill').iloc[::-1])\ndf['A'] = df[['A', 'A'].shift(-1, axis=1).iloc[:, 0]].max(axis=1)\n```\n\n</code>", "metadata": {"problem_id": 84, "library_problem_id": 84, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 85, "code": "```python\ndf['number'] = df['duration'].str.extract(r'(\\d+)')\ndf['time'] = df['duration'].str.extract(r'([a-zA-Z]+)')\n\ntime_dict = {'year': 365, 'month': 30, 'week': 7, 'day': 1}\ndf['time_days'] = df['time'].map(time_dict)\n```\n\n</code>", "metadata": {"problem_id": 85, "library_problem_id": 85, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 86, "code": "```python\ndf['number'] = df['duration'].str.extract('(\\d+)')\ndf['time'] = df['duration'].str.extract('([a-zA-Z]+)')\ndict_day={'year':365, 'month':30, 'week':7, 'day':1}\ndf['time_day'] = df['time'].map(dict_day)\n```\n\n</code>", "metadata": {"problem_id": 86, "library_problem_id": 86, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 87, "code": "```python\n    df['number'] = df['duration'].str.extract(r'(\\d+)')\n    df['time'] = df['duration'].str.extract(r'([a-zA-Z]+)')\n    time_dict = {'year': 365, 'month': 30, 'week': 7, 'day': 1}\n    df['time_days'] = df['time'].map(time_dict)\n    return df\n```\n\n</code>", "metadata": {"problem_id": 87, "library_problem_id": 87, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 85}}
{"id": 88, "code": "```python\ndf['time'] = df['duration'].str.extract(r'([a-zA-Z]+)')\ndf['number'] = df['duration'].str.extract(r'(\\d+)')\ndf['number'] = pd.to_numeric(df['number'])\ntime_day_dict = {'year': 365, 'month': 30, 'week': 7, 'day': 1}\ndf['time_day'] = df['time'].map(time_day_dict) * df['number']\n```\n\n</code>", "metadata": {"problem_id": 88, "library_problem_id": 88, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 89, "code": "```python\ncomparison = [df1[col] != df2[col] for col in columns_check_list]\nresult = [any(row) for row in zip(*comparison)]\n```\n\n</code>", "metadata": {"problem_id": 89, "library_problem_id": 89, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 90, "code": "```python\ncomparison_results = []\nfor column in columns_check_list:\n    comparison_results.append(df1[column] == df2[column])\nresult = [all(x) for x in zip(*comparison_results)]\n```\n\n</code>", "metadata": {"problem_id": 90, "library_problem_id": 90, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 89}}
{"id": 91, "code": "```python\ndates = pd.to_datetime(df.index.get_level_values('date'))\ndf = df.set_index([df.index.get_level_values('id'), dates])\ndf.index.names = ['id', 'date']\n```\n\n</code>", "metadata": {"problem_id": 91, "library_problem_id": 91, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 92, "code": "```python\ndf.index = df.index.set_levels([df.index.levels[0], pd.to_datetime(df.index.levels[1])])\n```\n\n</code>", "metadata": {"problem_id": 92, "library_problem_id": 92, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 93, "code": "```python\n    dates = pd.to_datetime(df.index.get_level_values('date'))\n    x = df['x'].values\n    y = df['y'].values\n    result = [[d, xi, yi] for d, xi, yi in zip(dates, x, y)]\n    return result\n```\n\n</code>", "metadata": {"problem_id": 93, "library_problem_id": 93, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 91}}
{"id": 94, "code": "```python\n    df.index.set_levels([pd.to_datetime(df.index.levels[0]), df.index.levels[1]], inplace=True)\n    df = df.swaplevel(0, 1)\n    df = df.sort_index()\n    return df\n```\n\n</code>", "metadata": {"problem_id": 94, "library_problem_id": 94, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 91}}
{"id": 95, "code": "```python\ndf = df.melt(id_vars=['Country', 'Variable'], var_name='year', value_name='value')\ndf = df.pivot_table(index=['Country', 'year'], columns='Variable', values='value').reset_index()\n```\n\n</code>", "metadata": {"problem_id": 95, "library_problem_id": 95, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 96, "code": "```python\ndf = df.melt(id_vars=['Country', 'Variable'], var_name='year', value_name='value')\ndf = df.pivot_table(index=['Country', 'year'], columns='Variable', values='value').reset_index()\ndf = df.sort_values(by=['Country', 'year'], ascending=[True, False])\n```\n\n</code>", "metadata": {"problem_id": 96, "library_problem_id": 96, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 95}}
{"id": 97, "code": "```python\nvalue_cols = [col for col in df.columns if col.startswith('Value')]\ndf = df[df[value_cols].abs().max(axis=1) < 1]\n```\n\n</code>", "metadata": {"problem_id": 97, "library_problem_id": 97, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 98, "code": "```python\nvalue_cols = [col for col in df.columns if col.startswith('Value')]\ndf = df[df[value_cols].abs().max(axis=1) > 1]\n```\n\n</code>", "metadata": {"problem_id": 98, "library_problem_id": 98, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 97}}
{"id": 99, "code": "```python\nvalue_cols = [col for col in df.columns if col.startswith('Value_')]\nfiltered_df = df[df[value_cols].abs().max(axis=1) > 1]\nfiltered_df = filtered_df.rename(columns={col: col.replace('Value_', '') for col in value_cols})\ndf = filtered_df\n```\n\n</code>", "metadata": {"problem_id": 99, "library_problem_id": 99, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 97}}
{"id": 100, "code": "```python\ndf = df.apply(lambda x: x.astype(str).str.replace('&AMP;', '&'))\n```\n\n</code>", "metadata": {"problem_id": 100, "library_problem_id": 100, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 101, "code": "```python\ndf = df.apply(lambda x: x.astype(str).str.replace('&LT;', '<'))\n```\n\n</code>", "metadata": {"problem_id": 101, "library_problem_id": 101, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"id": 102, "code": "```python\n    df = df.apply(lambda x: x.astype(str).str.replace('&AMP;', '&'))\n    return df\n```\n\n</code>", "metadata": {"problem_id": 102, "library_problem_id": 102, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 100}}
{"id": 103, "code": "```python\ndf = df.apply(lambda x: x.astype(str).str.replace('&AMP;', '&', regex=False).str.replace('&LT;', '<', regex=False).str.replace('&GT;', '>', regex=False))\n```\n\n</code>", "metadata": {"problem_id": 103, "library_problem_id": 103, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 104, "code": "```python\ndf = df.apply(lambda x: x.astype(str).str.replace(r'&AMP;', '&', regex=True))\ndf['Title'] = df['A'].apply(lambda x: x + ' = 0' if x == '1 & 0' else x)\n```\n\n</code>", "metadata": {"problem_id": 104, "library_problem_id": 104, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 105, "code": "```python\ndf[['first_name', 'last_name']] = df['name'].str.split(' ', n=1, expand=True)\ndf['last_name'] = df.apply(lambda row: row['last_name'] if row['name'].count(' ') == 1 else None, axis=1)\ndf['first_name'] = df.apply(lambda row: row['name'] if row['name'].count(' ') != 1 else row['first_name'], axis=1)\ndf = df[['first_name', 'last_name']]\n```\n\n</code>", "metadata": {"problem_id": 105, "library_problem_id": 105, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 106, "code": "```python\ndef split_name(row):\n    name = row['name']\n    parts = name.split()\n    if len(parts) == 2:\n        return pd.Series([parts[0], parts[1]])\n    else:\n        return pd.Series([name, None])\n\ndf[['1_name', '2_name']] = df.apply(split_name, axis=1)\ndf = df.drop('name', axis=1)\n```\n\n</code>", "metadata": {"problem_id": 106, "library_problem_id": 106, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 105}}
{"id": 107, "code": "```python\ndef split_name(row):\n    name = row['name']\n    parts = name.split()\n    if len(parts) > 2:\n        return pd.Series([parts[0], ' '.join(parts[1:-1]), parts[-1]])\n    elif len(parts) == 2:\n        return pd.Series([parts[0], None, parts[-1]])\n    else:\n        return pd.Series([name, None, None])\n\ndf[['first_name', 'middle_name', 'last_name']] = df.apply(split_name, axis=1)\ndf = df[['first_name', 'middle_name', 'last_name']]\n```\n\n</code>", "metadata": {"problem_id": 107, "library_problem_id": 107, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 105}}
{"id": 108, "code": "```python\nresult = pd.merge(df2, df1, on='Timestamp', how='left')\n```\n\n</code>", "metadata": {"problem_id": 108, "library_problem_id": 108, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 108}}
{"id": 109, "code": "```python\nresult = pd.merge(df1, df2, on='Timestamp', how='left')\nresult = result.dropna()\nresult = result.astype({'data': int, 'stuff': int})\n```\n\n</code>", "metadata": {"problem_id": 109, "library_problem_id": 109, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 108}}
{"id": 110, "code": "```python\ndf['state'] = df.apply(lambda row: row['col1'] if (row['col2'] <= 50 and row['col3'] <= 50) else max(row['col1'], row['col2'], row['col3']), axis=1)\n```\n\n</code>", "metadata": {"problem_id": 110, "library_problem_id": 110, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 110}}
{"id": 111, "code": "```python\ndf['state'] = df.apply(lambda row: row['col1'] if (row['col2'] > 50 and row['col3'] > 50) else row['col1'] + row['col2'] + row['col3'], axis=1)\n```\n\n</code>", "metadata": {"problem_id": 111, "library_problem_id": 111, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 110}}
{"id": 112, "code": "```python\nerrors = []\nfor index, row in df.iterrows():\n    value = row['Field1']\n    if not isinstance(value, int):\n        try:\n            value = float(value)\n            if not value.is_integer():\n                errors.append(row['Field1'])\n        except ValueError:\n            errors.append(row['Field1'])\ndf = errors\n```\n\n</code>", "metadata": {"problem_id": 112, "library_problem_id": 112, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 112}}
{"id": 113, "code": "```python\ninteger_values = []\nfor index, row in df.iterrows():\n    value = row['Field1']\n    if isinstance(value, (int)):\n        integer_values.append(value)\ndf = integer_values\n```\n\n</code>", "metadata": {"problem_id": 113, "library_problem_id": 113, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 112}}
{"id": 114, "code": "```python\n    error_values = []\n    for index, row in df.iterrows():\n        value = row['Field1']\n        if not isinstance(value, int):\n            try:\n                int(value)\n            except (ValueError, TypeError):\n                error_values.append(value)\n            else:\n                if int(value) != value:\n                    error_values.append(value)\n    return error_values\n```\n\n</code>", "metadata": {"problem_id": 114, "library_problem_id": 114, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 112}}
{"id": 115, "code": "```python\ndf_numeric = df[['val1', 'val2', 'val3', 'val4']]\ndf_sums = df_numeric.sum(axis=1)\ndf_percentages = df_numeric.div(df_sums, axis=0)\ndf = pd.concat([df['cat'], df_percentages], axis=1)\n```\n\n</code>", "metadata": {"problem_id": 115, "library_problem_id": 115, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 115}}
{"id": 116, "code": "```python\ndf = df.set_index('cat')\ndf = df.apply(lambda x: x / x.sum(), axis=0)\ndf = df.reset_index()\n```\n\n</code>", "metadata": {"problem_id": 116, "library_problem_id": 116, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 115}}
{"id": 117, "code": "```python\nresult = df.loc[test]\n```\n\n</code>", "metadata": {"problem_id": 117, "library_problem_id": 117, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 117}}
{"id": 118, "code": "```python\nresult = df.loc[test]\n```\n\n</code>", "metadata": {"problem_id": 118, "library_problem_id": 118, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 117}}
{"id": 119, "code": "```python\nresult = df.drop(test, errors='ignore')\n```\n\n</code>", "metadata": {"problem_id": 119, "library_problem_id": 119, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 117}}
{"id": 120, "code": "```python\n    result = df.loc[test]\n    result = result[~result.index.duplicated(keep='first')]\n    return result\n```\n\n</code>", "metadata": {"problem_id": 120, "library_problem_id": 120, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 117}}
{"id": 121, "code": "```python\ndef nearest_neighbour(df):\n    from scipy.spatial import distance_matrix\n    cars = df['car'].unique()\n    df2 = pd.DataFrame(columns=['car', 'nearest_neighbour', 'euclidean_distance'])\n    for car in cars:\n        row = df[df['car'] == car]\n        x1 = row['x'].values[0]\n        y1 = row['y'].values[0]\n        min_dist = float('inf')\n        nearest_car = None\n        for car2 in cars:\n            if car != car2:\n                row2 = df[df['car'] == car2]\n                x2 = row2['x'].values[0]\n                y2 = row2['y'].values[0]\n                dist = ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n                if dist < min_dist:\n                    min_dist = dist\n                    nearest_car = car2\n        df2 = pd.concat([df2, pd.DataFrame({'car': [car], 'nearest_neighbour': [nearest_car], 'euclidean_distance': [min_dist]})], ignore_index = True)\n    return df2\n\ndf2 = df.groupby('time').apply(nearest_neighbour).reset_index(level=0)\n```\n\n</code>", "metadata": {"problem_id": 121, "library_problem_id": 121, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 122, "code": "```python\ndef get_farthest_neighbor(group):\n    group = group.copy()\n    n = len(group)\n    distances = {}\n    for i in range(n):\n        distances[group['car'].iloc[i]] = {}\n        for j in range(n):\n            if i != j:\n                car1 = group['car'].iloc[i]\n                car2 = group['car'].iloc[j]\n                x1, y1 = group['x'].iloc[i], group['y'].iloc[i]\n                x2, y2 = group['x'].iloc[j], group['y'].iloc[j]\n                distance = ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n                distances[car1][car2] = distance\n    \n    farthest_neighbors = {}\n    for car1, dists in distances.items():\n        if dists:\n            farthest_car = max(dists, key=dists.get)\n            farthest_neighbors[car1] = (farthest_car, dists[farthest_car])\n        else:\n            farthest_neighbors[car1] = (None, None)\n    \n    group['farmost_neighbour'] = group['car'].map({k: v[0] for k, v in farthest_neighbors.items()})\n    group['euclidean_distance'] = group['car'].map({k: v[1] for k, v in farthest_neighbors.items()})\n    return group\n\ndf2 = df.groupby('time').apply(get_farthest_neighbor)\ndf = df2\n```\n\n</code>", "metadata": {"problem_id": 122, "library_problem_id": 122, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 123, "code": "```python\ndf[\"keywords_all\"] = df.apply(lambda row: \",\".join(row.dropna().astype(str)), axis=1)\n```\n\n</code>", "metadata": {"problem_id": 123, "library_problem_id": 123, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"id": 124, "code": "```python\ndf[\"keywords_all\"] = df.apply(lambda row: \"-\".join(row.dropna()), axis=1)\n```\n\n</code>", "metadata": {"problem_id": 124, "library_problem_id": 124, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 125, "code": "```python\ncols = ['keywords_0', 'keywords_1', 'keywords_2', 'keywords_3']\ndf[\"keywords_all\"] = df[cols].apply(lambda row: '-'.join(row.dropna().astype(str)), axis=1)\n```\n\n</code>", "metadata": {"problem_id": 125, "library_problem_id": 125, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 126, "code": "```python\ncols = ['keywords_3', 'keywords_2', 'keywords_1', 'keywords_0']\ndf[\"keywords_all\"] = df[cols].apply(lambda row: '-'.join(row.dropna().astype(str)), axis=1)\n```\n\n</code>", "metadata": {"problem_id": 126, "library_problem_id": 126, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 127, "code": "```python\nsampled_df = df.sample(frac=0.2, random_state=0)\nsampled_index = sampled_df.index\ndf.loc[sampled_index, 'Quantity'] = 0\n```\n\n</code>", "metadata": {"problem_id": 127, "library_problem_id": 127, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 127}}
{"id": 128, "code": "```python\nsampled_df = df.sample(frac=0.2, random_state=0)\nsampled_index = sampled_df.index\ndf.loc[sampled_index, 'ProductId'] = 0\n```\n\n</code>", "metadata": {"problem_id": 128, "library_problem_id": 128, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 127}}
{"id": 129, "code": "```python\nindexes = []\ndf = df.groupby('UserId', group_keys=False).apply(lambda x: x.sample(frac=0.2, random_state=0)).index.to_list()\ndf['Quantity'] = df.apply(lambda row: 0 if row.name in indexes else row['Quantity'], axis=1)\n```\n\n</code>", "metadata": {"problem_id": 129, "library_problem_id": 129, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 127}}
{"id": 130, "code": "```python\ndf['index_original'] = df.groupby(['col1', 'col2']).cumcount()\ndf_duplicates = df[df['index_original'] > 0].copy()\ndf_duplicates['index_original'] = df_duplicates.apply(lambda row: df[(df['col1'] == row['col1']) & (df['col2'] == row['col2'])].index[0], axis=1)\nresult = df_duplicates[['col1','col2','index_original']]\n```\n\n</code>", "metadata": {"problem_id": 130, "library_problem_id": 130, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 130}}
{"id": 131, "code": "```python\nduplicate_bool = df.duplicated(subset=['col1','col2'], keep='last')\nduplicate = df.loc[duplicate_bool == True].copy()\nduplicate['index_original'] = duplicate.apply(lambda row: df[(df['col1'] == row['col1']) & (df['col2'] == row['col2'])].index[-1], axis=1)\nresult = duplicate\n```\n\n</code>", "metadata": {"problem_id": 131, "library_problem_id": 131, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 130}}
{"id": 132, "code": "```python\n    df['index_original'] = df.groupby(['col1', 'col2'])['col1'].transform(lambda x: x.index.min())\n    duplicate_bool = df.duplicated(subset=['col1','col2'], keep='first')\n    duplicate = df.loc[duplicate_bool == True]\n    duplicate = duplicate.reset_index(drop=True)\n    duplicate['index_original'] = duplicate.apply(lambda row: df.loc[row['index_original']].name, axis=1)\n    return duplicate\n```\n\n</code>", "metadata": {"problem_id": 132, "library_problem_id": 132, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 130}}
{"id": 133, "code": "```python\ndf['index_original'] = df.groupby(['col1','col2', '3col']).ngroup()\nresult = df.loc[df.duplicated(subset=['col1','col2', '3col'], keep='first')]\nresult['index_original'] = df['index_original'].loc[result.index].values\nresult['index_original'] = result['index_original'].apply(lambda x: df[df['index_original'] == x].index[0])\n```\n\n</code>", "metadata": {"problem_id": 133, "library_problem_id": 133, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 130}}
{"id": 134, "code": "```python\ndf['index_original'] = df.groupby(['col1', 'col2'])['val'].transform('size')\ndf['index_original'] = df.groupby(['col1', 'col2'])['val'].transform(lambda x: x.index[-1])\nduplicate_bool = df.duplicated(subset=['col1','col2'], keep='last')\nduplicate = df.loc[duplicate_bool == True]\nresult=duplicate\n```\n\n</code>", "metadata": {"problem_id": 134, "library_problem_id": 134, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 130}}
{"id": 135, "code": "```python\nresult = df.groupby(['Sp', 'Mt']).apply(lambda x: x[x['count'] == x['count'].max()]).reset_index(drop=True)\n```\n\n</code>", "metadata": {"problem_id": 135, "library_problem_id": 135, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 135}}
{"id": 136, "code": "```python\nresult = df.groupby(['Sp','Mt']).apply(lambda x: x[x['count']==x['count'].max()])\n```\n\n</code>", "metadata": {"problem_id": 136, "library_problem_id": 136, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 135}}
{"id": 137, "code": "```python\nresult = df.groupby(['Sp', 'Mt']).apply(lambda x: x[x['count'] == x['count'].min()]).reset_index(drop=True)\n```\n\n</code>", "metadata": {"problem_id": 137, "library_problem_id": 137, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 135}}
{"id": 138, "code": "```python\nresult = df.loc[df.groupby(['Sp','Value'])['count'].idxmax()]\n```\n\n</code>", "metadata": {"problem_id": 138, "library_problem_id": 138, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 135}}
{"id": 139, "code": "```python\nresult=df[df['Category'].isin(filter_list)]\n```\n\n</code>", "metadata": {"problem_id": 139, "library_problem_id": 139, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 139}}
{"id": 140, "code": "```python\nresult = df[~df['Category'].isin(filter_list)]\n```\n\n</code>", "metadata": {"problem_id": 140, "library_problem_id": 140, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 139}}
{"id": 141, "code": "```python\nvalue_vars = list(zip(*df.columns))\nresult = pd.melt(df, value_vars=value_vars)\n```\n\n</code>", "metadata": {"problem_id": 141, "library_problem_id": 141, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 141}}
{"id": 142, "code": "```python\nvalue_vars = list(df.columns)\nid_vars = [df.columns[0]]\nresult = pd.melt(df, id_vars=id_vars, value_vars=value_vars, var_name=['variable_2', 'variable_1', 'variable_0'], value_name='value')\nresult = result.drop(columns=[result.columns[0]])\nresult = result[['variable_0', 'variable_1', 'variable_2', 'value']]\n```\n\n</code>", "metadata": {"problem_id": 142, "library_problem_id": 142, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 141}}
{"id": 143, "code": "```python\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n```\n\n</code>", "metadata": {"problem_id": 143, "library_problem_id": 143, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 143}}
{"id": 144, "code": "```python\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n```\n\n</code>", "metadata": {"problem_id": 144, "library_problem_id": 144, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 143}}
{"id": 145, "code": "```python\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n```\n\n</code>", "metadata": {"problem_id": 145, "library_problem_id": 145, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 143}}
{"id": 146, "code": "```python\ndf['cummax'] = df.groupby('id')['val'].cummax()\n```\n\n</code>", "metadata": {"problem_id": 146, "library_problem_id": 146, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 147, "code": "```python\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\ndf['cumsum'] = df['cumsum'].mask(df['cumsum'] < 0, 0)\n```\n\n</code>", "metadata": {"problem_id": 147, "library_problem_id": 147, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 143}}
{"id": 148, "code": "```python\nresult = df.groupby('l')['v'].sum(skipna=False)\n```\n\n</code>", "metadata": {"problem_id": 148, "library_problem_id": 148, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 149, "code": "```python\nresult = df.groupby('r')['v'].sum(skipna=False)\n```\n\n</code>", "metadata": {"problem_id": 149, "library_problem_id": 149, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 148}}
{"id": 150, "code": "```python\nresult = df.groupby('l')['v'].sum(skipna=False)\n```\n\n</code>", "metadata": {"problem_id": 150, "library_problem_id": 150, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"id": 151, "code": "```python\ndef relationship(col1, col2):\n    if col1.is_unique and col2.is_unique:\n        return 'one-to-one'\n    elif col1.is_unique and not col2.is_unique:\n        return 'one-to-many'\n    elif not col1.is_unique and col2.is_unique:\n        return 'many-to-one'\n    else:\n        return 'many-to-many'\n\nresult = []\nfor i in df.columns:\n    for j in df.columns:\n        if i != j:\n            relation = relationship(df[i], df[j])\n            result.append(f'{i} {j} {relation}')\n\nunique_results = []\nseen = set()\nfor item in result:\n    parts = item.split()\n    col1, col2 = parts[0], parts[1]\n    if (col1, col2) not in seen and (col2, col1) not in seen:\n        unique_results.append(item)\n        seen.add((col1, col2))\n        seen.add((col2, col1))\n\nresult = unique_results\n```\n\n</code>", "metadata": {"problem_id": 151, "library_problem_id": 151, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 152, "code": "```python\nresult = []\nfor col1 in df.columns:\n    for col2 in df.columns:\n        if col1 != col2:\n            group1 = df.groupby(col1)[col2].nunique()\n            group2 = df.groupby(col2)[col1].nunique()\n\n            if (group1 == 1).all() and (group2 == 1).all():\n                relation = \"one-2-one\"\n            elif (group1 == 1).all() and not (group2 == 1).all():\n                relation = \"one-2-many\"\n            elif not (group1 == 1).all() and (group2 == 1).all():\n                relation = \"many-2-one\"\n            else:\n                relation = \"many-2-many\"\n\n            result.append(f'{col1} {col2} {relation}')\n```\n\n</code>", "metadata": {"problem_id": 152, "library_problem_id": 152, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 151}}
{"id": 153, "code": "```python\ndef column_relationship(col1, col2):\n    if col1.is_unique and col2.is_unique:\n        return \"one-to-one\"\n    elif col1.is_unique and not col2.is_unique:\n        return \"one-to-many\"\n    elif not col1.is_unique and col2.is_unique:\n        return \"many-to-one\"\n    else:\n        return \"many-to-many\"\n\ncolumns = df.columns\nresult = pd.DataFrame(index=columns, columns=columns)\n\nfor col1 in columns:\n    for col2 in columns:\n        if col1 == col2:\n            result.loc[col1, col2] = None\n        else:\n            result.loc[col1, col2] = column_relationship(df[col1], df[col2])\n```\n\n</code>", "metadata": {"problem_id": 153, "library_problem_id": 153, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 154, "code": "```python\ndef column_relationship(col1, col2):\n    if col1.is_unique and col2.is_unique:\n        return \"one-2-one\"\n    elif col1.is_unique and not col2.is_unique:\n        return \"one-2-many\"\n    elif not col1.is_unique and col2.is_unique:\n        return \"many-2-one\"\n    else:\n        return \"many-2-many\"\n\ncolumns = df.columns\nresult = pd.DataFrame(index=columns, columns=columns)\n\nfor col1 in columns:\n    for col2 in columns:\n        if col1 == col2:\n            result.loc[col1, col2] = None\n        else:\n            result.loc[col1, col2] = column_relationship(df[col1], df[col2])\n```\n\n</code>", "metadata": {"problem_id": 154, "library_problem_id": 154, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 155, "code": "```python\ndf['temp'] = df[['firstname', 'lastname', 'email']].apply(lambda x: x.str.lower().str.replace(\" \", \"\").str.strip(), axis=1).agg('-'.join, axis=1)\ndf['has_bank'] = df['bank'].notna()\ndf = df.sort_values(by=['temp', 'has_bank'], ascending=[True, False]).drop_duplicates(subset=['temp'], keep='first').drop(columns=['temp', 'has_bank']).reset_index(drop=True)\nresult = df\n```\n\n</code>", "metadata": {"problem_id": 155, "library_problem_id": 155, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 155}}
{"id": 156, "code": "```python\nresult = pd.to_numeric(s.astype(str).str.replace(',', ''), errors='coerce')\n```\n\n</code>", "metadata": {"problem_id": 156, "library_problem_id": 156, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 156}}
{"id": 157, "code": "```python\ndf['Family'] = ((df['SibSp'] > 0) | (df['Parch'] > 0)).map({True: 'Has Family', False: 'No Family'})\nresult = df.groupby('Family')['Survived'].mean()\n```\n\n</code>", "metadata": {"problem_id": 157, "library_problem_id": 157, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"id": 158, "code": "```python\ndf['Family'] = ((df['Survived'] > 0) | (df['Parch'] > 0)).map({True: 'Has Family', False: 'No Family'})\nresult = df.groupby('Family')['SibSp'].mean()\n```\n\n</code>", "metadata": {"problem_id": 158, "library_problem_id": 158, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 157}}
{"id": 159, "code": "```python\ndef family_group(row):\n    if (row['SibSp'] == 1) & (row['Parch'] == 1):\n        return \"Has Family\"\n    elif (row['SibSp'] == 0) & (row['Parch'] == 0):\n        return \"No Family\"\n    elif (row['SibSp'] == 0) & (row['Parch'] == 1):\n        return \"New Family\"\n    elif (row['SibSp'] == 1) & (row['Parch'] == 0):\n        return \"Old Family\"\n    else:\n        return \"Other\"\n\ndf['FamilyGroup'] = df.apply(family_group, axis=1)\n\nresult = df.groupby('FamilyGroup')['Survived'].mean()\n```\n\n</code>", "metadata": {"problem_id": 159, "library_problem_id": 159, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 157}}
{"id": 160, "code": "```python\nresult = df.groupby('cokey').apply(lambda x: x.sort_values('A')).reset_index(drop=True)\n```\n\n</code>", "metadata": {"problem_id": 160, "library_problem_id": 160, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 160}}
{"id": 161, "code": "```python\nresult = df.groupby('cokey').apply(lambda x: x.sort_values('A', ascending=False))\n```\n\n</code>", "metadata": {"problem_id": 161, "library_problem_id": 161, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 160}}
{"id": 162, "code": "```python\ndf.columns = pd.MultiIndex.from_tuples(df.columns)\n```\n\n</code>", "metadata": {"problem_id": 162, "library_problem_id": 162, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 162}}
{"id": 163, "code": "```python\ndf.columns = pd.MultiIndex.from_tuples(df.columns)\n```\n\n</code>", "metadata": {"problem_id": 163, "library_problem_id": 163, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 162}}
{"id": 164, "code": "```python\ndf.columns = pd.MultiIndex.from_tuples(df.columns)\ndf = df.stack(level = 0)\n```\n\n</code>", "metadata": {"problem_id": 164, "library_problem_id": 164, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 162}}
{"id": 165, "code": "```python\nresult = pd.DataFrame({'birdType': someTuple[0], 'birdCount': someTuple[1]})\n```\n\n</code>", "metadata": {"problem_id": 165, "library_problem_id": 165, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 166, "code": "```python\nresult = df.groupby('a')['b'].agg(['mean','std'])\n```\n\n</code>", "metadata": {"problem_id": 166, "library_problem_id": 166, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 166}}
{"id": 167, "code": "```python\nresult = df.groupby('b')['a'].agg(['mean','std'])\n```\n\n</code>", "metadata": {"problem_id": 167, "library_problem_id": 167, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 166}}
{"id": 168, "code": "```python\ndef softmax(x):\n    e_x = np.exp(x - np.max(x))\n    return e_x / e_x.sum()\n\ndef min_max(x):\n    return (x - x.min()) / (x.max() - x.min())\n\ndf['softmax'] = df.groupby('a')['b'].transform(softmax)\ndf['min-max'] = df.groupby('a')['b'].transform(min_max)\n```\n\n</code>", "metadata": {"problem_id": 168, "library_problem_id": 168, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 166}}
{"id": 169, "code": "```python\nresult = df.loc[(df.sum(axis=1) != 0),(df.sum(axis=0) != 0)]\n```\n\n</code>", "metadata": {"problem_id": 169, "library_problem_id": 169, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 169}}
{"id": 170, "code": "```python\nresult = df[(df.T != 0).any()]\nresult = result.loc[:, (result != 0).any(axis=0)]\n```\n\n</code>", "metadata": {"problem_id": 170, "library_problem_id": 170, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 169}}
{"id": 171, "code": "```python\ncols_to_drop = df.columns[(df.max() == 2) | (df.max() > 2)]\ndf = df.drop(cols_to_drop, axis=1)\nrows_to_drop = df.index[df.max(axis=1) == 2]\nrows_to_drop = rows_to_drop.union(df.index[df.max(axis=1) > 1])\ndf = df.drop(rows_to_drop, axis=0)\nresult = df\n```\n\n</code>", "metadata": {"problem_id": 171, "library_problem_id": 171, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 169}}
{"id": 172, "code": "```python\nresult = df.copy()\nfor col in df.columns:\n    if df[col].max() == 2:\n        result[col] = 0\nfor row in range(df.shape[0]):\n    if df.iloc[row,:].max() == 2:\n        result.iloc[row,:] = 0\n```\n\n</code>", "metadata": {"problem_id": 172, "library_problem_id": 172, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 169}}
{"id": 173, "code": "```python\nresult = s.sort_values(ascending=True).sort_index()\n```\n\n</code>", "metadata": {"problem_id": 173, "library_problem_id": 173, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"id": 174, "code": "```python\ndf = pd.DataFrame({'index': s.index, 1: s.values})\ndf = df.sort_values(by=[1, 'index'], ascending=[True, True]).reset_index(drop=True)\n```\n\n</code>", "metadata": {"problem_id": 174, "library_problem_id": 174, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 173}}
{"id": 175, "code": "```python\nresult = df[pd.to_numeric(df['A'], errors='coerce').notna()]\n```\n\n</code>", "metadata": {"problem_id": 175, "library_problem_id": 175, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 175}}
{"id": 176, "code": "```python\nresult = df[df['A'].apply(lambda x: isinstance(x, str))]\n```\n\n</code>", "metadata": {"problem_id": 176, "library_problem_id": 176, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 175}}
{"id": 177, "code": "```python\nresult = df.groupby(['Sp', 'Mt']).apply(lambda x: x[x['count'] == x['count'].max()]).reset_index(drop=True)\n```\n\n</code>", "metadata": {"problem_id": 177, "library_problem_id": 177, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 177}}
{"id": 178, "code": "```python\nresult = df.groupby(['Sp','Mt']).apply(lambda x: x[x['count']==x['count'].max()])\n```\n\n</code>", "metadata": {"problem_id": 178, "library_problem_id": 178, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 177}}
{"id": 179, "code": "```python\nresult = df.groupby(['Sp', 'Mt']).apply(lambda x: x[x['count'] == x['count'].min()]).reset_index(drop=True)\n```\n\n</code>", "metadata": {"problem_id": 179, "library_problem_id": 179, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 177}}
{"id": 180, "code": "```python\nresult = df.loc[df.groupby(['Sp','Value'])['count'].idxmax()]\n```\n\n</code>", "metadata": {"problem_id": 180, "library_problem_id": 180, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 177}}
{"id": 181, "code": "```python\ndf['Date'] = df['Member'].map(dict).fillna(df['Date'])\n```\n\n</code>", "metadata": {"problem_id": 181, "library_problem_id": 181, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 181}}
{"id": 182, "code": "```python\ndf['Date'] = df['Member'].map(dict).fillna('17/8/1926')\n```\n\n</code>", "metadata": {"problem_id": 182, "library_problem_id": 182, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 181}}
{"id": 183, "code": "```python\n    df['Date'] = df['Member'].map(dict).fillna(df['Date'])\n    return df\n```\n\n</code>", "metadata": {"problem_id": 183, "library_problem_id": 183, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 181}}
{"id": 184, "code": "```python\ndf['Date'] = df['Member'].map(dict).fillna('17/8/1926')\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%Y').dt.strftime('%d-%b-%Y')\n```\n\n</code>", "metadata": {"problem_id": 184, "library_problem_id": 184, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 181}}
{"id": 185, "code": "```python\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.Date.map(df.groupby('Date').size())\ndf['Count_m'] = df.Date.map(df.groupby([df['Date'].dt.year, df['Date'].dt.month]).size())\ndf['Count_y'] = df.Date.map(df.groupby(df['Date'].dt.year).size())\n```\n\n</code>", "metadata": {"problem_id": 185, "library_problem_id": 185, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 185}}
{"id": 186, "code": "```python\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.groupby('Date')['Date'].transform('size')\ndf['Count_m'] = df.groupby([df['Date'].dt.year, df['Date'].dt.month])['Date'].transform('size')\ndf['Count_y'] = df.groupby(df['Date'].dt.year)['Date'].transform('size')\ndf['Count_Val'] = df.groupby(['Date','Val'])['Val'].transform('size')\ndf = df.sort_values(by='Date').reset_index(drop=True)\n```\n\n</code>", "metadata": {"problem_id": 186, "library_problem_id": 186, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 185}}
{"id": 187, "code": "```python\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.groupby('Date')['Date'].transform('size')\ndf['Count_m'] = df.groupby([df['Date'].dt.year, df['Date'].dt.month])['Date'].transform('size')\ndf['Count_y'] = df.groupby(df['Date'].dt.year)['Date'].transform('size')\ndf['Count_w'] = df.groupby(df['Date'].dt.weekday)['Date'].transform('size')\ndf['Count_Val'] = df.groupby('Val')['Val'].transform('size')\ndf = df.sort_values(by='Date').reset_index(drop=True)\n```\n\n</code>", "metadata": {"problem_id": 187, "library_problem_id": 187, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 185}}
{"id": 188, "code": "```python\ndf['Date'] = pd.to_datetime(df['Date'], format='%d.%m.%Y')\ndf = df.groupby('Date')[['B', 'C']].apply(lambda x: (x == 0).sum())\nresult1 = df\ndf = pd.DataFrame({'Date': ['20.07.2018', '20.07.2018', '21.07.2018', '21.07.2018'],\n                   'B': [10, 1, 0, 1],\n                   'C': [8, 0, 1, 0]})\ndf['Date'] = pd.to_datetime(df['Date'], format='%d.%m.%Y')\ndf = df.groupby('Date')[['B', 'C']].apply(lambda x: (x != 0).sum())\nresult2 = df\n```\n\n</code>", "metadata": {"problem_id": 188, "library_problem_id": 188, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"id": 189, "code": "```python\ndf['Date'] = pd.to_datetime(df['Date'], format='%d.%m.%Y')\neven_counts = df.groupby('Date')[['B', 'C']].apply(lambda x: (x % 2 == 0).sum())\nodd_counts = df.groupby('Date')[['B', 'C']].apply(lambda x: (x % 2 != 0).sum())\n\nresult1 = even_counts\nresult2 = odd_counts\n```\n\n</code>", "metadata": {"problem_id": 189, "library_problem_id": 189, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 188}}
{"id": 190, "code": "```python\nresult = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc={'D': np.sum,'E': np.mean})\n```\n\n</code>", "metadata": {"problem_id": 190, "library_problem_id": 190, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 190}}
{"id": 191, "code": "```python\nresult = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n```\n\n</code>", "metadata": {"problem_id": 191, "library_problem_id": 191, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 192, "code": "```python\nresult = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc={'D': np.sum,'E': np.mean})\n```\n\n</code>", "metadata": {"problem_id": 192, "library_problem_id": 192, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 193, "code": "```python\nresult = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc={'D': np.max, 'E': np.min})\n```\n\n</code>", "metadata": {"problem_id": 193, "library_problem_id": 193, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 190}}
{"id": 194, "code": "```python\ndf = df.assign(var2=df['var2'].str.split(\",\")).explode('var2')\ndf = df.reset_index().rename(columns={'index': 'id'})\nresult = df\n```\n\n</code>", "metadata": {"problem_id": 194, "library_problem_id": 194, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"id": 195, "code": "```python\ndf = df.set_index('var1')\ndf = df.var2.str.split(',', expand=True).stack()\ndf = df.rename('var2').reset_index()\ndel df['level_1']\nresult = df\n```\n\n</code>", "metadata": {"problem_id": 195, "library_problem_id": 195, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 194}}
{"id": 196, "code": "```python\ndf = df.set_index('var1')\ns = df['var2'].str.split('-', expand=True).stack()\ns.index = s.index.droplevel(-1)\ns.name = 'var2'\nresult = df.drop('var2', axis=1).join(s, how='left')\nresult = result.reset_index()\n```\n\n</code>", "metadata": {"problem_id": 196, "library_problem_id": 196, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 194}}
{"id": 197, "code": "```python\ndef count_special_char(string):\n    special_char = 0\n    for i in range(len(string)):\n        if(string[i].isalpha()):\n            continue\n        else:\n            special_char = special_char + 1\n    return special_char\ndf[\"new\"]=df[\"str\"].apply(count_special_char)\n```\n\n</code>", "metadata": {"problem_id": 197, "library_problem_id": 197, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 197}}
{"id": 198, "code": "```python\ndf[\"new\"] = df['str'].apply(lambda x: sum(1 for char in x if char.isalpha()))\n```\n\n</code>", "metadata": {"problem_id": 198, "library_problem_id": 198, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 197}}
{"id": 199, "code": "```python\ndf[['fips', 'row']] = df['row'].str.split(' ', n=1, expand=True)\n```\n\n</code>", "metadata": {"problem_id": 199, "library_problem_id": 199, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 199}}
{"id": 200, "code": "```python\ndf[['fips', 'row']] = df['row'].str.split(' ', n=1, expand=True)\n```\n\n</code>", "metadata": {"problem_id": 200, "library_problem_id": 200, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 199}}
{"id": 201, "code": "```python\ndf[['fips', 'medi', 'row']] = df['row'].str.split(n=2, expand=True)\n```\n\n</code>", "metadata": {"problem_id": 201, "library_problem_id": 201, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 199}}
{"id": 202, "code": "```python\ndf = df.set_index('Name')\ndf = df.replace(0, pd.NA)\ndf = df.cumsum(axis=1).div(df.notna().cumsum(axis=1))\ndf = df.fillna(0)\ndf = df.reset_index()\n```\n\n</code>", "metadata": {"problem_id": 202, "library_problem_id": 202, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"id": 203, "code": "```python\ndf = df.set_index('Name')\ndf = df.replace(0, pd.NA)\ndf = df.iloc[:, ::-1].cumsum(axis=1).div(df.notna().iloc[:, ::-1].cumsum(axis=1)).fillna(0)\ndf = df.iloc[:, ::-1].reset_index()\n```\n\n</code>", "metadata": {"problem_id": 203, "library_problem_id": 203, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 202}}
{"id": 204, "code": "```python\n    df1 = df.set_index('Name')\n    df_masked = df1.mask(df1 == 0)\n    df_cumsum = df_masked.cumsum(axis=1)\n    df_count = df_masked.notna().cumsum(axis=1)\n    df_result = (df_cumsum / df_count).fillna(0)\n    df_result = df_result.reset_index()\n    return df_result\n```\n\n</code>", "metadata": {"problem_id": 204, "library_problem_id": 204, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 202}}
{"id": 205, "code": "```python\ndf_numeric = df.iloc[:, 1:]\ndf_reversed = df_numeric.iloc[:, ::-1]\ndf_cumsum = df_reversed.mask(df_reversed == 0).cumsum(axis=1)\ndf_count = df_reversed.mask(df_reversed == 0).notna().cumsum(axis=1)\ndf_cum_avg = df_cumsum.div(df_count)\ndf_result = df_cum_avg.iloc[:, ::-1]\ndf.iloc[:, 1:] = df_result\ndf = df\n```\n\n</code>", "metadata": {"problem_id": 205, "library_problem_id": 205, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 202}}
{"id": 206, "code": "```python\ndf['label'] = 0\ndf['label'] = ((df['Close'].diff() > 0).astype(int))\ndf.iloc[0, 2] = 1\n```\n\n</code>", "metadata": {"problem_id": 206, "library_problem_id": 206, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 206}}
{"id": 207, "code": "```python\ndf['label'] = df['Close'].diff()\ndf['label'] = df['label'].apply(lambda x: 1 if x > 0 else (-1 if x < 0 else 0))\ndf.iloc[0, 2] = 1\n```\n\n</code>", "metadata": {"problem_id": 207, "library_problem_id": 207, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 206}}
{"id": 208, "code": "```python\ndf['label'] = df['Close'].diff().apply(lambda x: 1 if x > 0 else (-1 if x < 0 else 0))\ndf['label'] = df['label'].shift(-1)\ndf['label'] = df['label'].fillna(1)\ndf['label'] = df['label'].astype(int)\ndf['DateTime'] = df['DateTime'].dt.strftime('%d-%b-%Y')\ndf = df[['DateTime', 'Close', 'label']]\n```\n\n</code>", "metadata": {"problem_id": 208, "library_problem_id": 208, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 206}}
{"id": 209, "code": "```python\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'], errors='coerce')\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\ndf['Duration'] = df['departure_time'].shift(-1) - df['arrival_time']\n```\n\n</code>", "metadata": {"problem_id": 209, "library_problem_id": 209, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"id": 210, "code": "```python\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'], errors='coerce')\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\ndf['Duration'] = (df['arrival_time'].shift(-1) - df['departure_time']).dt.total_seconds()\ndf['arrival_time'] = df['arrival_time'].mask(df['arrival_time'].isnull(), pd.NaT)\ndf['Duration'] = df['Duration'].shift(1)\n```\n\n</code>", "metadata": {"problem_id": 210, "library_problem_id": 210, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 209}}
{"id": 211, "code": "```python\ndf['arrival_time'] = df['arrival_time'].replace('0', pd.NaT)\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'])\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\ndf['Duration'] = (df['arrival_time'].shift(-1) - df['departure_time']).dt.total_seconds()\ndf['arrival_time'] = df['arrival_time'].dt.strftime('%d-%b-%Y %H:%M:%S')\ndf['departure_time'] = df['departure_time'].dt.strftime('%d-%b-%Y %H:%M:%S')\n```\n\n</code>", "metadata": {"problem_id": 211, "library_problem_id": 211, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 209}}
{"id": 212, "code": "```python\nresult = df[df['key2'] == 'one'].groupby('key1').size().reset_index(name='count')\nall_key1 = pd.DataFrame({'key1': df['key1'].unique()})\nresult = pd.merge(all_key1, result, on='key1', how='left').fillna(0)\nresult = result.astype({'count': int})\n```\n\n</code>", "metadata": {"problem_id": 212, "library_problem_id": 212, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 212}}
{"id": 213, "code": "```python\nresult = df[df['key2'] == 'two'].groupby('key1').size().reset_index(name='count')\n```\n\n</code>", "metadata": {"problem_id": 213, "library_problem_id": 213, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 212}}
{"id": 214, "code": "```python\nresult = df[df['key2'].str.endswith('e')].groupby('key1')['key2'].count().reset_index(name='count')\nkeys = df['key1'].unique()\nresult = result.set_index('key1').reindex(keys).fillna(0).reset_index()\nresult['count'] = result['count'].astype(int)\n```\n\n</code>", "metadata": {"problem_id": 214, "library_problem_id": 214, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 212}}
{"id": 215, "code": "```python\ndf.index = pd.to_datetime(df.index)\nmax_result = df.index.max()\nmin_result = df.index.min()\n```\n\n</code>", "metadata": {"problem_id": 215, "library_problem_id": 215, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 216, "code": "```python\nmode_result = df.index.mode()\nmedian_result = pd.to_datetime(df.index).median()\n```\n\n</code>", "metadata": {"problem_id": 216, "library_problem_id": 216, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 215}}
{"id": 217, "code": "```python\nresult = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]\n```\n\n</code>", "metadata": {"problem_id": 217, "library_problem_id": 217, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 217}}
{"id": 218, "code": "```python\nresult = df[~df['closing_price'].between(99, 101)]\n```\n\n</code>", "metadata": {"problem_id": 218, "library_problem_id": 218, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 217}}
{"id": 219, "code": "```python\ndf1 = df.groupby(\"item\")[\"diff\"].min().reset_index()\nresult = pd.merge(df1, df, on=[\"item\", \"diff\"])\n```\n\n</code>", "metadata": {"problem_id": 219, "library_problem_id": 219, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 219}}
{"id": 220, "code": "```python\ndf['SOURCE_NAME'] = df['SOURCE_NAME'].str.rsplit('_', n=1).str[0]\n```\n\n</code>", "metadata": {"problem_id": 220, "library_problem_id": 220, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 220}}
{"id": 221, "code": "```python\ndf['SOURCE_NAME'] = df['SOURCE_NAME'].str.rsplit('_', n=1).str[-1]\n```\n\n</code>", "metadata": {"problem_id": 221, "library_problem_id": 221, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 220}}
{"id": 222, "code": "```python\n    result = df['SOURCE_NAME'].str.rsplit('_', n=1).str[0]\n    return result\n```\n\n</code>", "metadata": {"problem_id": 222, "library_problem_id": 222, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 220}}
{"id": 223, "code": "```python\nnan_count = df['Column_x'].isnull().sum()\nhalf_nan = nan_count // 2\ndf['Column_x'] = df['Column_x'].fillna(pd.Series([0] * half_nan + [1] * (nan_count - half_nan)))\n```\n\n</code>", "metadata": {"problem_id": 223, "library_problem_id": 223, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 223}}
{"id": 224, "code": "```python\nnan_count = df['Column_x'].isnull().sum()\nfirst_30_percent = int(0.3 * nan_count)\nmiddle_30_percent = int(0.3 * nan_count)\ndf['Column_x'] = df['Column_x'].fillna(pd.Series([0]*first_30_percent + [0.5]*middle_30_percent + [1]*(nan_count - first_30_percent - middle_30_percent)))\n```\n\n</code>", "metadata": {"problem_id": 224, "library_problem_id": 224, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 223}}
{"id": 225, "code": "```python\nna_count = df['Column_x'].isnull().sum()\nzeros_to_fill = na_count // 2\nones_to_fill = na_count - zeros_to_fill\ndf['Column_x'] = df['Column_x'].fillna(pd.Series([0] * zeros_to_fill + [1] * ones_to_fill))\n```\n\n</code>", "metadata": {"problem_id": 225, "library_problem_id": 225, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 223}}
{"id": 226, "code": "```python\nresult = pd.DataFrame()\nfor col in a.columns:\n    result[col] = list(zip(a[col], b[col]))\n```\n\n</code>", "metadata": {"problem_id": 226, "library_problem_id": 226, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 226}}
{"id": 227, "code": "```python\ndfs = [a, b, c]\nresult = pd.DataFrame()\nfor col in a.columns:\n    result[col] = list(zip(*[df[col] for df in dfs]))\n```\n\n</code>", "metadata": {"problem_id": 227, "library_problem_id": 227, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 226}}
{"id": 228, "code": "```python\ndef tuple_dataframe(dfs):\n    max_len = max(len(df) for df in dfs)\n    data = []\n    for i in range(max_len):\n        row = {}\n        for col in dfs[0].columns:\n            elements = []\n            for df in dfs:\n                try:\n                    elements.append(df.loc[i, col])\n                except KeyError:\n                    elements.append(np.nan)\n                except IndexError:\n                    elements.append(np.nan)\n            row[col] = tuple(elements)\n        data.append(row)\n    return pd.DataFrame(data)\n\nresult = tuple_dataframe([a,b])\n```\n\n</code>", "metadata": {"problem_id": 228, "library_problem_id": 228, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 226}}
{"id": 229, "code": "```python\nresult = pd.pivot_table(df, index='username', columns=pd.cut(df.views, bins), aggfunc=len, fill_value=0)\nresult = result['post_id']\n```\n\n</code>", "metadata": {"problem_id": 229, "library_problem_id": 229, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 229}}
{"id": 230, "code": "```python\nresult = df.groupby(['username', pd.cut(df.views, bins=bins)]).size().unstack(fill_value=0)\nresult.columns = result.columns.astype(str)\n```\n\n</code>", "metadata": {"problem_id": 230, "library_problem_id": 230, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 229}}
{"id": 231, "code": "```python\nresult = df.groupby(['username', pd.cut(df.views, bins=bins)]).size().unstack(fill_value=0)\n```\n\n</code>", "metadata": {"problem_id": 231, "library_problem_id": 231, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 229}}
{"id": 232, "code": "```python\nresult = pd.DataFrame({'text': [', '.join(df['text'])]})\n```\n\n</code>", "metadata": {"problem_id": 232, "library_problem_id": 232, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 232}}
{"id": 233, "code": "```python\nresult = pd.DataFrame({'text': [ '-'.join(df['text'].tolist()) ]})\n```\n\n</code>", "metadata": {"problem_id": 233, "library_problem_id": 233, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 234, "code": "```python\nresult = pd.DataFrame({'text': [', '.join(df['text'][::-1])]})\n```\n\n</code>", "metadata": {"problem_id": 234, "library_problem_id": 234, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 235, "code": "```python\nresult = pd.Series([', '.join(df['text'])], name='text')\n```\n\n</code>", "metadata": {"problem_id": 235, "library_problem_id": 235, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 232}}
{"id": 236, "code": "```python\nresult = pd.Series([ '-'.join(df['text'][::-1])], name='text')\n```\n\n</code>", "metadata": {"problem_id": 236, "library_problem_id": 236, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 232}}
{"id": 237, "code": "```python\nresult = pd.concat([df1, df2.merge(df1[['id', 'city', 'district']], on='id', how='left')], axis=0)\n```\n\n</code>", "metadata": {"problem_id": 237, "library_problem_id": 237, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 237}}
{"id": 238, "code": "```python\ndf = pd.concat([df1, df2], axis=0)\ndf = df.sort_values(by=['id', 'date'], ascending=[True, True])\ndf['city'] = df.groupby('id')['city'].ffill()\ndf['district'] = df.groupby('id')['district'].ffill()\ndf['date'] = pd.to_datetime(df['date'], format='%Y/%m/%d').dt.strftime('%d-%b-%Y')\nresult = df.reset_index(drop=True)\n```\n\n</code>", "metadata": {"problem_id": 238, "library_problem_id": 238, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 237}}
{"id": 239, "code": "```python\ndf = pd.concat([df1, df2], axis=0)\ndf = df.sort_values(by=['id', 'date'], ascending=[True, True])\ndf['city'] = df.groupby('id')['city'].ffill()\ndf['district'] = df.groupby('id')['district'].ffill()\nresult = df.sort_values(by=['id', 'date']).reset_index(drop=True)\n```\n\n</code>", "metadata": {"problem_id": 239, "library_problem_id": 239, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 237}}
{"id": 240, "code": "```python\nD = D.set_index('A')\nC = C.set_index('A')\nC.update(D)\nC = C.reset_index()\nresult = C\n```\n\n</code>", "metadata": {"problem_id": 240, "library_problem_id": 240, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 240}}
{"id": 241, "code": "```python\nresult = C.merge(D, on='A', how='left', suffixes=('_C', '_D'))\nresult['B'] = result['B_D'].fillna(result['B_C'])\nresult = result[['A', 'B']]\nresult = pd.concat([result, D[~D['A'].isin(result['A'])]], ignore_index=True)\nresult = result.drop_duplicates(subset=['A'], keep='first')\norder = C['A'].tolist() + D['A'].tolist()\norder = list(dict.fromkeys(order))\nresult['A'] = pd.Categorical(result['A'], categories=order, ordered=True)\nresult = result.sort_values('A')\nresult = result.reset_index(drop=True)\n```\n\n</code>", "metadata": {"problem_id": 241, "library_problem_id": 241, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 240}}
{"id": 242, "code": "```python\nD = D.set_index('A')\nC['dulplicated'] = C['A'].isin(D.index)\nC['B'] = C['A'].map(D['B']).fillna(C['B'])\nresult = C\n```\n\n</code>", "metadata": {"problem_id": 242, "library_problem_id": 242, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 240}}
{"id": 243, "code": "```python\nresult = df.groupby('user').apply(lambda x: list(x[['time', 'amount']].apply(list, axis=1)))\n```\n\n</code>", "metadata": {"problem_id": 243, "library_problem_id": 243, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 243}}
{"id": 244, "code": "```python\nresult = df.groupby('user').apply(lambda x: list(x[['time', 'amount']].apply(list, axis=1)))\n```\n\n</code>", "metadata": {"problem_id": 244, "library_problem_id": 244, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 243}}
{"id": 245, "code": "```python\nresult = df.sort_values('time').groupby('user')[['time', 'amount']].apply(lambda x: list(x.values.tolist()))\n```\n\n</code>", "metadata": {"problem_id": 245, "library_problem_id": 245, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 243}}
{"id": 246, "code": "```python\ndf = pd.DataFrame(series.to_list(), index=series.index)\n```\n\n</code>", "metadata": {"problem_id": 246, "library_problem_id": 246, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 246}}
{"id": 247, "code": "```python\ndf = pd.DataFrame(series.to_list(), index=series.index)\ndf.index.name = 'name'\ndf = df.reset_index()\n```\n\n</code>", "metadata": {"problem_id": 247, "library_problem_id": 247, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 246}}
{"id": 248, "code": "```python\nresult = [col for col in df.columns if s in col and s != col]\n```\n\n</code>", "metadata": {"problem_id": 248, "library_problem_id": 248, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 248}}
{"id": 249, "code": "```python\nresult = [col for col in df.columns if s in col and s != col]\ndf = df[result]\n```\n\n</code>", "metadata": {"problem_id": 249, "library_problem_id": 249, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 248}}
{"id": 250, "code": "```python\ncols = [col for col in df.columns if s in col and s != col]\nnew_names = {col: f'spike{i+1}' for i, col in enumerate(cols)}\nresult = df[cols].rename(columns=new_names)\n```\n\n</code>", "metadata": {"problem_id": 250, "library_problem_id": 250, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 248}}
{"id": 251, "code": "```python\nresult = df['codes'].apply(pd.Series)\nresult = result.rename(columns = lambda x: 'code_' + str(x))\n```\n\n</code>", "metadata": {"problem_id": 251, "library_problem_id": 251, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 251}}
{"id": 252, "code": "```python\nresult = df['codes'].apply(pd.Series)\nresult.columns = [f'code_{i+1}' for i in range(result.shape[1])]\n```\n\n</code>", "metadata": {"problem_id": 252, "library_problem_id": 252, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 251}}
{"id": 253, "code": "```python\ndf['codes'] = df['codes'].apply(lambda x: sorted(x))\nresult = df['codes'].apply(pd.Series)\nresult.columns = [f'code_{i+1}' for i in range(result.shape[1])]\n```\n\n</code>", "metadata": {"problem_id": 253, "library_problem_id": 253, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 251}}
{"id": 254, "code": "```python\nresult = sum(df['col1'], [])\n```\n\n</code>", "metadata": {"problem_id": 254, "library_problem_id": 254, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 254}}
{"id": 255, "code": "```python\ndef reverse_and_concat(list_col):\n    reversed_lists = [list(reversed(x)) for x in list_col]\n    concatenated_string = ','.join(map(str, [item for sublist in reversed_lists for item in sublist]))\n    return concatenated_string\n\nresult = reverse_and_concat(df['col1'])\n```\n\n</code>", "metadata": {"problem_id": 255, "library_problem_id": 255, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 254}}
{"id": 256, "code": "```python\nresult = ','.join([str(item) for sublist in df['col1'] for item in sublist])\n```\n\n</code>", "metadata": {"problem_id": 256, "library_problem_id": 256, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 254}}
{"id": 257, "code": "```python\ndf = df.set_index('Time').resample('2T').mean().reset_index()\ndf['Time'] = df['Time'].dt.floor('2T')\n```\n\n</code>", "metadata": {"problem_id": 257, "library_problem_id": 257, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 257}}
{"id": 258, "code": "```python\ndf = df.set_index('Time').resample('3Min').sum().reset_index()\n```\n\n</code>", "metadata": {"problem_id": 258, "library_problem_id": 258, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 257}}
{"id": 259, "code": "```python\ndf['TIME'] = pd.to_datetime(df['TIME'])\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=True)\n```\n\n</code>", "metadata": {"problem_id": 259, "library_problem_id": 259, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 259}}
{"id": 260, "code": "```python\ndf['TIME'] = pd.to_datetime(df['TIME'])\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=False)\n```\n\n</code>", "metadata": {"problem_id": 260, "library_problem_id": 260, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 259}}
{"id": 261, "code": "```python\ndf['TIME'] = pd.to_datetime(df['TIME'])\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=False)\ndf['TIME'] = df['TIME'].dt.strftime('%d-%b-%Y %a %H:%M:%S')\n```\n\n</code>", "metadata": {"problem_id": 261, "library_problem_id": 261, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 259}}
{"id": 262, "code": "```python\nresult = df[df.index.get_level_values('a').isin(filt[filt].index)]\n```\n\n</code>", "metadata": {"problem_id": 262, "library_problem_id": 262, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 262}}
{"id": 263, "code": "```python\nresult = df[df.index.get_level_values('a').isin(filt[filt].index)]\n```\n\n</code>", "metadata": {"problem_id": 263, "library_problem_id": 263, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 262}}
{"id": 264, "code": "```python\nresult = df.iloc[[0, 8]].T\nresult = result[result[0].fillna(0) != result[8].fillna(0)].index\n```\n\n</code>", "metadata": {"problem_id": 264, "library_problem_id": 264, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 264}}
{"id": 265, "code": "```python\nresult = df.iloc[[0, 8]].T.apply(lambda x: x[0] == x[1] or (pd.isna(x[0]) and pd.isna(x[1]))).loc[lambda x: x].index\n```\n\n</code>", "metadata": {"problem_id": 265, "library_problem_id": 265, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 266, "code": "```python\ndifferent_cols = []\nfor col in df.columns:\n    if not pd.isna(df.loc[0, col]) and not pd.isna(df.loc[8, col]):\n        if df.loc[0, col] != df.loc[8, col]:\n            different_cols.append(col)\n    elif pd.isna(df.loc[0, col]) and not pd.isna(df.loc[8, col]):\n        different_cols.append(col)\n    elif not pd.isna(df.loc[0, col]) and pd.isna(df.loc[8, col]):\n        different_cols.append(col)\nresult = different_cols\n```\n\n</code>", "metadata": {"problem_id": 266, "library_problem_id": 266, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 267, "code": "```python\nrow0 = df.iloc[0]\nrow8 = df.iloc[8]\nresult = [(x, y) for x, y in zip(row0, row8) if not (pd.isna(x) and pd.isna(y)) and x != y]\n```\n\n</code>", "metadata": {"problem_id": 267, "library_problem_id": 267, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 264}}
{"id": 268, "code": "```python\nts = df.set_index('Date')['Value']\n```\n\n</code>", "metadata": {"problem_id": 268, "library_problem_id": 268, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 268}}
{"id": 269, "code": "```python\ndf = pd.DataFrame([df.values.flatten()], columns=[f'{col}_{i+1}' for i in range(len(df)) for col in df.columns])\n```\n\n</code>", "metadata": {"problem_id": 269, "library_problem_id": 269, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 269}}
{"id": 270, "code": "```python\ndf = pd.DataFrame([df.values.flatten()], columns=[f'{col}_{i}' for i in range(len(df)) for col in df.columns])\n```\n\n</code>", "metadata": {"problem_id": 270, "library_problem_id": 270, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 269}}
{"id": 271, "code": "```python\ndf['dogs'] = df['dogs'].astype('float64').round(2)\n```\n\n</code>", "metadata": {"problem_id": 271, "library_problem_id": 271, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 271}}
{"id": 272, "code": "```python\ndf['dogs'] = df['dogs'].astype('float64').round(2)\ndf['cats'] = df['cats'].astype('float64').round(2)\n```\n\n</code>", "metadata": {"problem_id": 272, "library_problem_id": 272, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 271}}
{"id": 273, "code": "```python\ndf['Sum'] = df[list_of_my_columns].sum(axis=1)\n```\n\n</code>", "metadata": {"problem_id": 273, "library_problem_id": 273, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 273}}
{"id": 274, "code": "```python\ndf['Avg'] = df[list_of_my_columns].mean(axis=1)\n```\n\n</code>", "metadata": {"problem_id": 274, "library_problem_id": 274, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 273}}
{"id": 275, "code": "```python\ndf['Avg'] = df[list_of_my_columns].mean(axis=1)\ndf['Min'] = df[list_of_my_columns].min(axis=1)\ndf['Max'] = df[list_of_my_columns].max(axis=1)\ndf['Median'] = df[list_of_my_columns].median(axis=1)\n```\n\n</code>", "metadata": {"problem_id": 275, "library_problem_id": 275, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 273}}
{"id": 276, "code": "```python\nresult = df.sort_index(level='time', sort_remaining=False)\n```\n\n</code>", "metadata": {"problem_id": 276, "library_problem_id": 276, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 276}}
{"id": 277, "code": "```python\nresult = df.sort_values(by='VIM', kind='mergesort')\n```\n\n</code>", "metadata": {"problem_id": 277, "library_problem_id": 277, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 276}}
{"id": 278, "code": "```python\ndates_to_remove = ['2020-02-17', '2020-02-18']\ndates_to_remove = pd.to_datetime(dates_to_remove)\nresult = df[~df.index.date.isin(dates_to_remove.date)]\n```\n\n</code>", "metadata": {"problem_id": 278, "library_problem_id": 278, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 278}}
{"id": 279, "code": "```python\ndates_to_remove = ['2020-02-17', '2020-02-18']\ndates_to_remove = [pd.to_datetime(date) for date in dates_to_remove]\nresult = df[~df.index.date.isin([date.date() for date in dates_to_remove])]\nresult.index = result.index.strftime('%d-%b-%Y %A')\n```\n\n</code>", "metadata": {"problem_id": 279, "library_problem_id": 279, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 278}}
{"id": 280, "code": "```python\ncorr_stack = corr.stack()\nresult = pd.DataFrame(corr_stack[corr_stack > 0.3])\nresult.index.names = ['Col1', 'Col2']\nresult.columns = ['Pearson Correlation Coefficient']\n```\n\n</code>", "metadata": {"problem_id": 280, "library_problem_id": 280, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 280}}
{"id": 281, "code": "```python\nmask = np.triu(np.ones_like(corr, dtype=bool), k=1)\nreduced_corr = corr.mask(mask)\nresult = reduced_corr[reduced_corr > 0.3].dropna()\n```\n\n</code>", "metadata": {"problem_id": 281, "library_problem_id": 281, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 280}}
{"id": 282, "code": "```python\nlast_col = df.columns[-1]\ncols = df.columns.tolist()\ncols[-1] = 'Test'\ndf.columns = cols\nresult = df\n```\n\n</code>", "metadata": {"problem_id": 282, "library_problem_id": 282, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 282}}
{"id": 283, "code": "```python\ndf.columns.values[0] = 'Test'\nresult = df\n```\n\n</code>", "metadata": {"problem_id": 283, "library_problem_id": 283, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 282}}
{"id": 284, "code": "```python\ndef most_frequent(row):\n    counts = {}\n    for value in row:\n        if value in counts:\n            counts[value] += 1\n        else:\n            counts[value] = 1\n    most_frequent_value = max(counts, key=counts.get)\n    frequency = counts[most_frequent_value]\n    return pd.Series([most_frequent_value, frequency], index=['frequent', 'freq_count'])\n\ndf[['frequent', 'freq_count']] = df.apply(most_frequent, axis=1)\n```\n\n</code>", "metadata": {"problem_id": 284, "library_problem_id": 284, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 284}}
{"id": 285, "code": "```python\nimport numpy as np\ndef most_frequent(x):\n    counts = np.bincount(x)\n    return np.argmax(counts), np.max(counts)\ndf['frequent'], df['freq_count'] = zip(*df.apply(lambda x: most_frequent(x.values), axis=1))\n```\n\n</code>", "metadata": {"problem_id": 285, "library_problem_id": 285, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 284}}
{"id": 286, "code": "```python\ndef most_frequent(row):\n    counts = {}\n    for x in row:\n        if x not in counts:\n            counts[x] = 0\n        counts[x] += 1\n    max_count = 0\n    most_frequent_values = []\n    for x in counts:\n        if counts[x] > max_count:\n            most_frequent_values = [x]\n            max_count = counts[x]\n        elif counts[x] == max_count:\n            most_frequent_values.append(x)\n    return most_frequent_values, max_count\n\n\ndf['frequent'], df['freq_count'] = zip(*df.apply(most_frequent, axis=1))\n```\n\n</code>", "metadata": {"problem_id": 286, "library_problem_id": 286, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 284}}
{"id": 287, "code": "```python\ndf['bar'] = pd.to_numeric(df['bar'], errors='coerce')\nresult = df.groupby([\"id1\",\"id2\"])[[\"foo\",\"bar\"]].mean()\n```\n\n</code>", "metadata": {"problem_id": 287, "library_problem_id": 287, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 287}}
{"id": 288, "code": "```python\ndf['bar'] = df['bar'].replace('NULL', 0).astype(float)\nresult = df.groupby([\"id1\",\"id2\"])[[\"foo\",\"bar\"]].mean()\n```\n\n</code>", "metadata": {"problem_id": 288, "library_problem_id": 288, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 287}}
{"id": 289, "code": "```python\nresult = pd.merge(df_a, df_b[['EntityNum', 'a_col']], on='EntityNum', how='left')\n```\n\n</code>", "metadata": {"problem_id": 289, "library_problem_id": 289, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 289}}
{"id": 290, "code": "```python\nresult = pd.merge(df_a, df_b[['EntityNum', 'b_col']], on='EntityNum', how='left')\n```\n\n</code>", "metadata": {"problem_id": 290, "library_problem_id": 290, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 289}}
{"id": 291, "code": "```python\nresult = a.shape\n```\n\n</code>", "metadata": {"problem_id": 291, "library_problem_id": 0, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 292, "code": "```python\nx = x[~np.isnan(x)]\n```\n\n</code>", "metadata": {"problem_id": 292, "library_problem_id": 1, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 1}}
{"id": 293, "code": "```python\nx = np.nan_to_num(x, nan=np.inf)\n```\n\n</code>", "metadata": {"problem_id": 293, "library_problem_id": 2, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 294, "code": "```python\nresult = []\nfor row in x:\n    temp = row[~np.isnan(row)]\n    result.append(list(temp))\n```\n\n</code>", "metadata": {"problem_id": 294, "library_problem_id": 3, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 1}}
{"id": 295, "code": "```python\nb = np.zeros((a.size, a.max() + 1))\nb[np.arange(a.size), a] = 1\n```\n\n</code>", "metadata": {"problem_id": 295, "library_problem_id": 4, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 296, "code": "```python\nb = np.zeros((a.size, a.max()+1))\nb[np.arange(a.size),a] = 1\n```\n\n</code>", "metadata": {"problem_id": 296, "library_problem_id": 5, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 297, "code": "```python\nmin_a = np.min(a)\nb = np.zeros((len(a), np.max(a) - min_a + 1), dtype=int)\nrows = np.arange(len(a))\ncols = a - min_a\nb[rows, cols] = 1\n```\n\n</code>", "metadata": {"problem_id": 297, "library_problem_id": 6, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 298, "code": "```python\norder = np.argsort(a)\nb = np.eye(len(a))[np.argsort(order)]\n```\n\n</code>", "metadata": {"problem_id": 298, "library_problem_id": 7, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 299, "code": "```python\nb = np.zeros((a.size, a.max() + 1), dtype=int)\nb[np.arange(a.size), a.ravel()] = 1\n```\n\n</code>", "metadata": {"problem_id": 299, "library_problem_id": 8, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 300, "code": "```python\nresult = np.percentile(a, p)\n```\n\n</code>", "metadata": {"problem_id": 300, "library_problem_id": 9, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 301, "code": "```python\nB = A.reshape(-1, ncol)\n```\n\n</code>", "metadata": {"problem_id": 301, "library_problem_id": 10, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 302, "code": "```python\nB = A.reshape((nrow, -1))\n```\n\n</code>", "metadata": {"problem_id": 302, "library_problem_id": 11, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 10}}
{"id": 303, "code": "```python\nnrow = len(A) // ncol\nB = A[:nrow*ncol].reshape(nrow, ncol)\n```\n\n</code>", "metadata": {"problem_id": 303, "library_problem_id": 12, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 10}}
{"id": 304, "code": "```python\nnrow = len(A) // ncol\nB = A[-nrow*ncol:].reshape(nrow,ncol)\nB = np.flip(B,axis=0)\n```\n\n</code>", "metadata": {"problem_id": 304, "library_problem_id": 13, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 10}}
{"id": 305, "code": "```python\nresult = np.empty_like(a)\nif shift > 0:\n    result[:shift] = np.nan\n    result[shift:] = a[:-shift]\nelif shift < 0:\n    result[shift:] = np.nan\n    result[:shift] = a[-shift:]\nelse:\n    result = a\n```\n\n</code>", "metadata": {"problem_id": 305, "library_problem_id": 14, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 306, "code": "```python\nresult = np.full_like(a, np.nan)\nif shift > 0:\n    result[:, shift:] = a[:, :-shift]\nelif shift < 0:\n    result[:, :shift] = a[:, -shift:]\nelse:\n    result[:] = a\n```\n\n</code>", "metadata": {"problem_id": 306, "library_problem_id": 15, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"id": 307, "code": "```python\nresult = np.array([np.concatenate((np.full(abs(s), np.nan) if s > 0 else a[i, -s:], a[i, :s] if s > 0 else a[i, :-s]), axis=0) for i, s in enumerate(shift)])\n```\n\n</code>", "metadata": {"problem_id": 307, "library_problem_id": 16, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 14}}
{"id": 308, "code": "```python\nrng = np.random.default_rng(seed=42)\nr_old = rng.integers(-1, 2, size=(100, 2000))\nrng = np.random.default_rng(seed=42)\nr_new = rng.integers(-1, 2, size=(100, 2000))\n```\n\n</code>", "metadata": {"problem_id": 308, "library_problem_id": 17, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 309, "code": "```python\nresult = np.argmax(a)\n```\n\n</code>", "metadata": {"problem_id": 309, "library_problem_id": 18, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"id": 310, "code": "```python\nresult = np.argmin(a)\n```\n\n</code>", "metadata": {"problem_id": 310, "library_problem_id": 19, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 311, "code": "```python\nresult = np.unravel_index(np.argmax(a), a.shape, order='F')\n```\n\n</code>", "metadata": {"problem_id": 311, "library_problem_id": 20, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 312, "code": "```python\nresult = np.unravel_index(np.argmax(a), a.shape)\n```\n\n</code>", "metadata": {"problem_id": 312, "library_problem_id": 21, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 313, "code": "```python\n    return np.argmax(a)\n```\n\n</code>", "metadata": {"problem_id": 313, "library_problem_id": 22, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 18}}
{"id": 314, "code": "```python\nsecond_largest = np.partition(a.flatten(), -2)[-2]\nresult = np.where(a == second_largest)\nresult = np.ravel_multi_index(result, a.shape, order='C')\n```\n\n</code>", "metadata": {"problem_id": 314, "library_problem_id": 23, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 18}}
{"id": 315, "code": "```python\nz = np.any(np.isnan(a), axis=0)\na = a[:, ~z]\n```\n\n</code>", "metadata": {"problem_id": 315, "library_problem_id": 24, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 316, "code": "```python\na = a[~np.isnan(a).any(axis=1)]\n```\n\n</code>", "metadata": {"problem_id": 316, "library_problem_id": 25, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 24}}
{"id": 317, "code": "```python\nresult = np.array(a)\n```\n\n</code>", "metadata": {"problem_id": 317, "library_problem_id": 26, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 318, "code": "```python\na = a[:, permutation]\n```\n\n</code>", "metadata": {"problem_id": 318, "library_problem_id": 27, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"id": 319, "code": "```python\nresult = a[permutation]\n```\n\n</code>", "metadata": {"problem_id": 319, "library_problem_id": 28, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 27}}
{"id": 320, "code": "```python\nresult = np.unravel_index(np.argmin(a), a.shape)\n```\n\n</code>", "metadata": {"problem_id": 320, "library_problem_id": 29, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 321, "code": "```python\nresult = np.unravel_index(np.argmax(a), a.shape)\n```\n\n</code>", "metadata": {"problem_id": 321, "library_problem_id": 30, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 29}}
{"id": 322, "code": "```python\nresult = np.array(np.where(a == np.min(a))).T\n```\n\n</code>", "metadata": {"problem_id": 322, "library_problem_id": 31, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 29}}
{"id": 323, "code": "```python\nresult = np.sin(np.deg2rad(degree))\n```\n\n</code>", "metadata": {"problem_id": 323, "library_problem_id": 32, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 324, "code": "```python\nresult = np.cos(np.radians(degree))\n```\n\n</code>", "metadata": {"problem_id": 324, "library_problem_id": 33, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 325, "code": "```python\nsin_degree = np.sin(np.radians(number))\nsin_radian = np.sin(number)\nif sin_degree > sin_radian:\n    result = 0\nelse:\n    result = 1\n```\n\n</code>", "metadata": {"problem_id": 325, "library_problem_id": 34, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 326, "code": "```python\nresult = np.degrees(np.arcsin(value))\n```\n\n</code>", "metadata": {"problem_id": 326, "library_problem_id": 35, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 327, "code": "```python\nresult = np.pad(A, (0, length - len(A)), 'constant')\n```\n\n</code>", "metadata": {"problem_id": 327, "library_problem_id": 36, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 328, "code": "```python\nresult = np.pad(A, (0, max(0, length - len(A))), 'constant')\n```\n\n</code>", "metadata": {"problem_id": 328, "library_problem_id": 37, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 329, "code": "```python\na = np.power(a, power)\n```\n\n</code>", "metadata": {"problem_id": 329, "library_problem_id": 38, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 330, "code": "```python\n    result = np.power(a, power)\n    return result\n```\n\n</code>", "metadata": {"problem_id": 330, "library_problem_id": 39, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"id": 331, "code": "```python\nresult = np.array([numerator, denominator])\nresult = result / np.gcd.reduce(result)\nresult = (int(result[0]), int(result[1]))\n```\n\n</code>", "metadata": {"problem_id": 331, "library_problem_id": 40, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 332, "code": "```python\n    result = np.gcd(numerator, denominator)\n    return (numerator//result, denominator//result)\n```\n\n</code>", "metadata": {"problem_id": 332, "library_problem_id": 41, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 40}}
{"id": 333, "code": "```python\nif denominator == 0:\n    result = (np.nan, np.nan)\nelse:\n    import fractions\n    fraction = fractions.Fraction(numerator, denominator)\n    result = (fraction.numerator, fraction.denominator)\n```\n\n</code>", "metadata": {"problem_id": 333, "library_problem_id": 42, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 40}}
{"id": 334, "code": "```python\nresult = np.mean([a,b,c], axis=0)\n```\n\n</code>", "metadata": {"problem_id": 334, "library_problem_id": 43, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 43}}
{"id": 335, "code": "```python\nresult = np.maximum(a, np.maximum(b,c))\n```\n\n</code>", "metadata": {"problem_id": 335, "library_problem_id": 44, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 43}}
{"id": 336, "code": "```python\nn = a.shape[0]\nrow_indices = np.arange(n)\ncol_indices = np.arange(n - 1, -1, -1)\nresult = a[row_indices, col_indices]\n```\n\n</code>", "metadata": {"problem_id": 336, "library_problem_id": 45, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 337, "code": "```python\nrow, col = np.diag_indices(min(a.shape))\ncol = a.shape[1] - 1 - col\nresult = a[row, col]\n```\n\n</code>", "metadata": {"problem_id": 337, "library_problem_id": 46, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 338, "code": "```python\nrows, cols = np.indices(a.shape)\nresult = a[rows, cols[::-1]]\n```\n\n</code>", "metadata": {"problem_id": 338, "library_problem_id": 47, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"id": 339, "code": "```python\nrows, cols = a.shape\nresult = []\nfor i in range(cols - rows + 1):\n    row_indices = np.arange(rows)\n    col_indices = np.arange(rows - 1, -1, -1) + i\n    result.append(a[row_indices, col_indices])\n```\n\n</code>", "metadata": {"problem_id": 339, "library_problem_id": 48, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 45}}
{"id": 340, "code": "```python\nresult = []\nfor i in range(X.shape[0]):\n    for j in range(X.shape[1]):\n        result.append(X[i,j])\n```\n\n</code>", "metadata": {"problem_id": 340, "library_problem_id": 49, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 341, "code": "```python\nresult = X.flatten(order='C').tolist()\n```\n\n</code>", "metadata": {"problem_id": 341, "library_problem_id": 50, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 49}}
{"id": 342, "code": "```python\n    result = []\n    for i in range(X.shape[0]):\n        for j in range(X.shape[1]):\n            result.append(X[i,j])\n    return result\n```\n\n</code>", "metadata": {"problem_id": 342, "library_problem_id": 51, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 343, "code": "```python\nresult = X.flatten(order='F').tolist()\n```\n\n</code>", "metadata": {"problem_id": 343, "library_problem_id": 52, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 49}}
{"id": 344, "code": "```python\nresult = np.array([int(x) for x in mystr])\n```\n\n</code>", "metadata": {"problem_id": 344, "library_problem_id": 53, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 53}}
{"id": 345, "code": "```python\na[:, col] = a[:, col] * multiply_number\nresult = np.cumsum(a[:, col])\n```\n\n</code>", "metadata": {"problem_id": 345, "library_problem_id": 54, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 346, "code": "```python\nrow_multiplied = a[row, :] * multiply_number\nresult = np.cumsum(row_multiplied)\n```\n\n</code>", "metadata": {"problem_id": 346, "library_problem_id": 55, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 347, "code": "```python\na[row] = a[row] / divide_number\nresult = np.prod(a[row])\n```\n\n</code>", "metadata": {"problem_id": 347, "library_problem_id": 56, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 54}}
{"id": 348, "code": "```python\ndef solve():\n    a_rank = np.linalg.matrix_rank(a)\n    indices = []\n    basis = []\n    for i in range(a.shape[0]):\n        temp_basis = basis + [a[i]]\n        temp_matrix = np.array(temp_basis)\n        if np.linalg.matrix_rank(temp_matrix) == len(temp_basis):\n            basis.append(a[i])\n            indices.append(i)\n        if len(basis) == a_rank:\n            break\n    return a[indices]\n\nresult = solve()\n```\n\n</code>", "metadata": {"problem_id": 348, "library_problem_id": 57, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 349, "code": "```python\nresult = a.shape[1]\n```\n\n</code>", "metadata": {"problem_id": 349, "library_problem_id": 58, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 350, "code": "```python\ndf = len(a) + len(b) - 2\ns_pooled = np.sqrt((np.std(a, ddof=1)**2 * (len(a) - 1) + np.std(b, ddof=1)**2 * (len(b) - 1)) / (len(a) + len(b) - 2))\nt = (np.mean(a) - np.mean(b)) / (s_pooled * np.sqrt(1/len(a) + 1/len(b)))\np_value = scipy.stats.t.sf(np.abs(t), df)*2\n```\n\n</code>", "metadata": {"problem_id": 350, "library_problem_id": 59, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"id": 351, "code": "```python\na = a[~np.isnan(a)]\nb = b[~np.isnan(b)]\nresult = scipy.stats.ttest_ind(a, b, equal_var=False)\np_value = result.pvalue\n```\n\n</code>", "metadata": {"problem_id": 351, "library_problem_id": 60, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 59}}
{"id": 352, "code": "```python\npooled_variance = (\n    (anobs - 1) * avar + (bnobs - 1) * bvar\n) / (anobs + bnobs - 2)\nt_statistic = (amean - bmean) / np.sqrt(\n    pooled_variance * (1 / anobs + 1 / bnobs)\n)\ndegrees_of_freedom = anobs + bnobs - 2\np_value = 2 * scipy.stats.t.cdf(\n    -np.abs(t_statistic), df=degrees_of_freedom\n)\n```\n\n</code>", "metadata": {"problem_id": 352, "library_problem_id": 61, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 59}}
{"id": 353, "code": "```python\noutput = [x for x in A.tolist() if x not in B.tolist()]\n```\n\n</code>", "metadata": {"problem_id": 353, "library_problem_id": 62, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 354, "code": "```python\nA_rows = A.view([('', A.dtype)] * A.shape[1])\nB_rows = B.view([('', B.dtype)] * B.shape[1])\nA_minus_B = np.setdiff1d(A_rows, B_rows).view(A.dtype).reshape(-1, A.shape[1])\nB_minus_A = np.setdiff1d(B_rows, A_rows).view(B.dtype).reshape(-1, B.shape[1])\noutput = np.concatenate((A_minus_B, B_minus_A))\n```\n\n</code>", "metadata": {"problem_id": 354, "library_problem_id": 63, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 62}}
{"id": 355, "code": "```python\nsort_indices = np.argsort(a, axis=0)\nc = np.take_along_axis(b, sort_indices, axis=0)\n```\n\n</code>", "metadata": {"problem_id": 355, "library_problem_id": 64, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 356, "code": "```python\nsort_indices = np.argsort(a, axis=0)\nc = np.take_along_axis(b, sort_indices, axis=0)\n```\n\n</code>", "metadata": {"problem_id": 356, "library_problem_id": 65, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"id": 357, "code": "```python\nsort_indices = np.argsort(a, axis=0)[::-1]\nc = np.take_along_axis(b, sort_indices, axis=0)\n```\n\n</code>", "metadata": {"problem_id": 357, "library_problem_id": 66, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
{"id": 358, "code": "```python\nsums = a.sum(axis=(1,2))\nindices = np.argsort(sums)\nresult = b[indices]\n```\n\n</code>", "metadata": {"problem_id": 358, "library_problem_id": 67, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 64}}
{"id": 359, "code": "```python\na = np.delete(arr, 2, axis=1)\n```\n\n</code>", "metadata": {"problem_id": 359, "library_problem_id": 68, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 360, "code": "```python\na = np.delete(a, 2, axis=0)\n```\n\n</code>", "metadata": {"problem_id": 360, "library_problem_id": 69, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 361, "code": "```python\na = np.delete(arr, [0, 2], axis=1)\n```\n\n</code>", "metadata": {"problem_id": 361, "library_problem_id": 70, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 362, "code": "```python\nvalid_indices = del_col[del_col < a.shape[1]]\ncols_to_keep = np.setdiff1d(np.arange(a.shape[1]), valid_indices)\nresult = a[:, cols_to_keep]\n```\n\n</code>", "metadata": {"problem_id": 362, "library_problem_id": 71, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 363, "code": "```python\na = np.insert(a, pos, element)\n```\n\n</code>", "metadata": {"problem_id": 363, "library_problem_id": 72, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"id": 364, "code": "```python\na = np.insert(a, pos, element, axis=0)\n```\n\n</code>", "metadata": {"problem_id": 364, "library_problem_id": 73, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 72}}
{"id": 365, "code": "```python\n    a = np.insert(a, pos, element)\n    return a\n```\n\n</code>", "metadata": {"problem_id": 365, "library_problem_id": 74, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 72}}
{"id": 366, "code": "```python\na = np.insert(a, pos, element, axis=0)\n```\n\n</code>", "metadata": {"problem_id": 366, "library_problem_id": 75, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 72}}
{"id": 367, "code": "```python\nresult = [arr.copy() for arr in array_of_arrays]\n```\n\n</code>", "metadata": {"problem_id": 367, "library_problem_id": 76, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 368, "code": "```python\nresult = np.all(a == a[0,:], axis=1).all()\n```\n\n</code>", "metadata": {"problem_id": 368, "library_problem_id": 77, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 369, "code": "```python\nresult = np.all(a == a[:, :1])\n```\n\n</code>", "metadata": {"problem_id": 369, "library_problem_id": 78, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Semantic", "perturbation_origin_id": 77}}
{"id": 370, "code": "```python\n    return np.all(a == a[0,:])\n```\n\n</code>", "metadata": {"problem_id": 370, "library_problem_id": 79, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Surface", "perturbation_origin_id": 77}}
{"id": 371, "code": "```python\nfrom scipy import integrate\nX, Y = np.meshgrid(x, y)\nfunc = (np.cos(X))**4 + (np.sin(Y))**2\nresult = integrate.simpson(integrate.simpson(func, x), y)\n```\n\n</code>", "metadata": {"problem_id": 371, "library_problem_id": 80, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 372, "code": "```python\n    xv, yv = np.meshgrid(x, y)\n    func = (np.cos(xv))**4 + (np.sin(yv))**2\n    dx = x[1] - x[0]\n    dy = y[1] - y[0]\n    weights_x = np.array([1] + [4 if i % 2 else 2 for i in range(1, len(x) - 1)] + [1])\n    weights_y = np.array([1] + [4 if i % 2 else 2 for i in range(1, len(y) - 1)] + [1])\n    weights = np.outer(weights_y, weights_x)\n    integral = dx * dy / 9 * np.sum(func * weights)\n    return integral\n```\n\n</code>", "metadata": {"problem_id": 372, "library_problem_id": 81, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 80}}
{"id": 373, "code": "```python\nfrom statsmodels.distributions.empirical_distribution import ECDF\necdf_func = ECDF(grades)\nresult = ecdf_func(grades)\n```\n\n</code>", "metadata": {"problem_id": 373, "library_problem_id": 82, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 374, "code": "```python\nfrom statsmodels.distributions.empirical_distribution import ECDF\necdf_grades = ECDF(grades)\nresult = [ecdf_grades(i) for i in eval]\n```\n\n</code>", "metadata": {"problem_id": 374, "library_problem_id": 83, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 375, "code": "```python\nfrom statsmodels.distributions.empirical_distribution import ECDF\ngrades_sorted = np.sort(grades)\necdf_vals = ECDF(grades)(grades_sorted)\nmax_interval = 0\nlow_val = None\nhigh_val = None\nfor i in range(len(grades_sorted)):\n    for j in range(i, len(grades_sorted)):\n        low_bound = grades_sorted[i]\n        high_bound = grades_sorted[j]\n        \n        valid_interval = True\n        for k in range(len(grades)):\n            if low_bound <= grades[k] < high_bound:\n                ecdf_value = ECDF(grades)(grades[k])\n                if ecdf_value >= threshold:\n                    valid_interval = False\n                    break\n        \n        if valid_interval:\n            interval_length = high_bound - low_bound\n            if interval_length > max_interval:\n                max_interval = interval_length\n                low_val = low_bound\n                high_val = high_bound\n\nlow = low_val\nhigh = high_val\n```\n\n</code>", "metadata": {"problem_id": 375, "library_problem_id": 84, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 376, "code": "```python\nnums = np.random.choice([0, 1], size=size, p=[1-one_ratio, one_ratio])\n```\n\n</code>", "metadata": {"problem_id": 376, "library_problem_id": 85, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 377, "code": "```python\na_np = a.numpy()\n```\n\n</code>", "metadata": {"problem_id": 377, "library_problem_id": 86, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"id": 378, "code": "```python\na_pt = torch.from_numpy(a)\n```\n\n</code>", "metadata": {"problem_id": 378, "library_problem_id": 87, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 86}}
{"id": 379, "code": "```python\na_np = a.numpy()\n```\n\n</code>", "metadata": {"problem_id": 379, "library_problem_id": 88, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 380, "code": "```python\na_tf = tf.convert_to_tensor(a)\n```\n\n</code>", "metadata": {"problem_id": 380, "library_problem_id": 89, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 88}}
{"id": 381, "code": "```python\nresult = np.argsort(a)[::-1]\n```\n\n</code>", "metadata": {"problem_id": 381, "library_problem_id": 90, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 382, "code": "```python\nresult = np.argsort(a)\n```\n\n</code>", "metadata": {"problem_id": 382, "library_problem_id": 91, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"id": 383, "code": "```python\nind = np.argpartition(a, -N)[-N:]\nresult = ind[np.argsort(a[ind])][::-1]\n```\n\n</code>", "metadata": {"problem_id": 383, "library_problem_id": 92, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 90}}
{"id": 384, "code": "```python\nresult = np.linalg.matrix_power(A, n)\n```\n\n</code>", "metadata": {"problem_id": 384, "library_problem_id": 93, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 93}}
{"id": 385, "code": "```python\nresult = []\nfor i in range(0, a.shape[0], 2):\n    for j in range(0, a.shape[1], 2):\n        patch = a[i:i+2, j:j+2]\n        result.append(patch)\n```\n\n</code>", "metadata": {"problem_id": 385, "library_problem_id": 94, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 386, "code": "```python\npatches = []\nfor i in range(a.shape[0] - 1):\n    for j in range(a.shape[1] - 1):\n        patch = a[i:i+2, j:j+2]\n        patches.append(patch)\nresult = patches\n```\n\n</code>", "metadata": {"problem_id": 386, "library_problem_id": 95, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 387, "code": "```python\nresult = []\nfor i in range(0, a.shape[0], 2):\n    for j in range(0, a.shape[1], 2):\n        patch = a[i:i+2, j:j+2]\n        result.append(patch)\n```\n\n</code>", "metadata": {"problem_id": 387, "library_problem_id": 96, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 388, "code": "```python\nresult = []\nfor i in range(0, a.shape[0] - (a.shape[0] % patch_size), patch_size):\n    for j in range(0, a.shape[1] - (a.shape[1] % patch_size), patch_size):\n        patch = a[i:i+patch_size, j:j+patch_size]\n        result.append(patch)\n```\n\n</code>", "metadata": {"problem_id": 388, "library_problem_id": 97, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 389, "code": "```python\nresult = a.reshape(h, w)\n```\n\n</code>", "metadata": {"problem_id": 389, "library_problem_id": 98, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 390, "code": "```python\nresult = []\nfor i in range(0, a.shape[0] - (a.shape[0] % patch_size), patch_size):\n    for j in range(0, a.shape[1] - (a.shape[1] % patch_size), patch_size):\n        patch = a[i:i+patch_size, j:j+patch_size]\n        result.append(patch)\n```\n\n</code>", "metadata": {"problem_id": 390, "library_problem_id": 99, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 391, "code": "```python\nresult = a[:,low:high+1]\n```\n\n</code>", "metadata": {"problem_id": 391, "library_problem_id": 100, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 392, "code": "```python\nresult = a[low:high]\n```\n\n</code>", "metadata": {"problem_id": 392, "library_problem_id": 101, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"id": 393, "code": "```python\nhigh = min(high, a.shape[1])\nresult = a[:, low:high]\n```\n\n</code>", "metadata": {"problem_id": 393, "library_problem_id": 102, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 394, "code": "```python\na = np.array(eval(string))\n```\n\n</code>", "metadata": {"problem_id": 394, "library_problem_id": 103, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 395, "code": "```python\nresult = np.exp(np.random.uniform(np.log(min), np.log(max), n))\n```\n\n</code>", "metadata": {"problem_id": 395, "library_problem_id": 104, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 396, "code": "```python\nresult = np.exp(np.random.uniform(min, max, n))\n```\n\n</code>", "metadata": {"problem_id": 396, "library_problem_id": 105, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 104}}
{"id": 397, "code": "```python\n    log_min = np.log(min)\n    log_max = np.log(max)\n    log_values = np.random.uniform(log_min, log_max, n)\n    return np.exp(log_values)\n```\n\n</code>", "metadata": {"problem_id": 397, "library_problem_id": 106, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 398, "code": "```python\nB = pd.Series(index=A.index, dtype=float)\nB[0] = a * A[0]\nfor t in range(1, len(A)):\n    B[t] = a * A[t] + b * B[t-1]\n```\n\n</code>", "metadata": {"problem_id": 398, "library_problem_id": 107, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 399, "code": "```python\nB = A.copy()\nB[0] = a*A[0]\nB[1] = a*A[1]+b*B[0]\nfor t in range(2,len(A)):\n    B[t] = a * A[t] + b * B[t-1] + c * B[t-2]\n```\n\n</code>", "metadata": {"problem_id": 399, "library_problem_id": 108, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 107}}
{"id": 400, "code": "```python\nresult = np.array([])\n```\n\n</code>", "metadata": {"problem_id": 400, "library_problem_id": 109, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 401, "code": "```python\nresult = np.empty((3, 0))\n```\n\n</code>", "metadata": {"problem_id": 401, "library_problem_id": 110, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 109}}
{"id": 402, "code": "```python\nresult = np.ravel_multi_index(index, dims, order='F')\n```\n\n</code>", "metadata": {"problem_id": 402, "library_problem_id": 111, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 403, "code": "```python\nresult = np.ravel_multi_index(index, dims, order='C')\n```\n\n</code>", "metadata": {"problem_id": 403, "library_problem_id": 112, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"id": 404, "code": "```python\nvalues = np.zeros((2,3))\nvalues[:,0] = values[:,0].astype(int)\ndf = pd.DataFrame(data=values, index=index, columns=columns)\ndf = df.astype({'a': 'int32', 'b': 'float32', 'c': 'float32'})\n```\n\n</code>", "metadata": {"problem_id": 404, "library_problem_id": 113, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 405, "code": "```python\nresult = np.bincount(accmap, a)\n```\n\n</code>", "metadata": {"problem_id": 405, "library_problem_id": 114, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 406, "code": "```python\nresult = np.zeros(np.max(index)+1)\nfor i in range(len(a)):\n    result[index[i]] = max(result[index[i]], a[i])\n```\n\n</code>", "metadata": {"problem_id": 406, "library_problem_id": 115, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"id": 407, "code": "```python\nresult = np.bincount(accmap[accmap>=0], weights=a[accmap>=0])\nneg_indices = accmap < 0\nif np.any(neg_indices):\n    neg_result = np.bincount(-accmap[neg_indices]-1, weights=a[neg_indices])\n    padding = np.zeros(max(0, result.shape[0] - neg_result.shape[0]))\n    neg_result = np.concatenate((neg_result, padding))\n    padding = np.zeros(max(0, neg_result.shape[0] - result.shape[0]))\n    result = np.concatenate((result, padding))\n    result = result + neg_result\n```\n\n</code>", "metadata": {"problem_id": 407, "library_problem_id": 116, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"id": 408, "code": "```python\nmin_index = np.min(index)\nmax_index = np.max(index)\nsize = max_index - min_index + 1\ntemp_result = np.full(size, np.inf)\nfor i in range(len(a)):\n    idx = index[i] - min_index\n    temp_result[idx] = min(temp_result[idx], a[i])\nresult = temp_result[temp_result != np.inf]\n```\n\n</code>", "metadata": {"problem_id": 408, "library_problem_id": 117, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 114}}
{"id": 409, "code": "```python\nx = np.array(x)\ny = np.array(y)\nz = np.vectorize(elementwise_function)(x, y)\n```\n\n</code>", "metadata": {"problem_id": 409, "library_problem_id": 118, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 118}}
{"id": 410, "code": "```python\nindices = np.arange(len(lista_elegir))\nchosen_indices = np.random.choice(indices, size=samples, p=probabilit)\nresult = [lista_elegir[i] for i in chosen_indices]\n```\n\n</code>", "metadata": {"problem_id": 410, "library_problem_id": 119, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 119}}
{"id": 411, "code": "```python\nrow_start = max(0, low_index)\nrow_end = min(a.shape[0], high_index)\ncol_start = max(0, low_index)\ncol_end = min(a.shape[1], high_index)\nresult = np.zeros((high_index - low_index, high_index - low_index))\nresult[max(0, -low_index):min(high_index - low_index, a.shape[0] - low_index), max(0, -low_index):min(high_index - low_index, a.shape[1] - low_index)] = a[row_start:row_end, col_start:col_end]\n```\n\n</code>", "metadata": {"problem_id": 411, "library_problem_id": 120, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"id": 412, "code": "```python\nresult = x[x >= 0]\n```\n\n</code>", "metadata": {"problem_id": 412, "library_problem_id": 121, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 413, "code": "```python\nresult = x[np.iscomplex(x)]\n```\n\n</code>", "metadata": {"problem_id": 413, "library_problem_id": 122, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 414, "code": "```python\nnum_bins = len(data) // bin_size\ntruncated_data = data[:num_bins * bin_size]\nbinned_data = truncated_data.reshape(num_bins, bin_size)\nbin_data_mean = np.mean(binned_data, axis=1)\n```\n\n</code>", "metadata": {"problem_id": 414, "library_problem_id": 123, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"id": 415, "code": "```python\nreshape_size = len(data) // bin_size\nreshape_data = data[:reshape_size*bin_size].reshape(reshape_size, bin_size)\nbin_data_max = np.max(reshape_data, axis=1)\n```\n\n</code>", "metadata": {"problem_id": 415, "library_problem_id": 124, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 416, "code": "```python\nn_bins = data.shape[1] // bin_size\nbin_data_mean = np.mean(data[:, :n_bins * bin_size].reshape(data.shape[0], n_bins, bin_size), axis=2)\n```\n\n</code>", "metadata": {"problem_id": 416, "library_problem_id": 125, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 417, "code": "```python\nn_bins = len(data) // bin_size\nbin_data_mean = []\nfor i in range(n_bins):\n    start_index = len(data) - (i + 1) * bin_size\n    end_index = len(data) - i * bin_size\n    bin_data = data[start_index:end_index]\n    bin_data_mean.append(np.mean(bin_data))\n```\n\n</code>", "metadata": {"problem_id": 417, "library_problem_id": 126, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 418, "code": "```python\nn_bins = data.shape[1] // bin_size\nbin_data = data[:, -n_bins * bin_size:].reshape(data.shape[0], n_bins, bin_size)\nbin_data_mean = np.mean(bin_data, axis=2)\n```\n\n</code>", "metadata": {"problem_id": 418, "library_problem_id": 127, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 419, "code": "```python\nn_cols = data.shape[1]\nremainder = n_cols % bin_size\nif remainder != 0:\n    data = data[:, remainder:]\nn_cols = data.shape[1]\nn_bins = n_cols // bin_size\nbin_data_mean = np.mean(data.reshape(data.shape[0], n_bins, bin_size), axis=2)\n```\n\n</code>", "metadata": {"problem_id": 419, "library_problem_id": 128, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 420, "code": "```python\ndef smoothclamp(x, x_min, x_max):\n    if x < x_min:\n        return x_min\n    elif x > x_max:\n        return x_max\n    else:\n        x_norm = (x - x_min) / (x_max - x_min)\n        smooth_x = 3 * x_norm**2 - 2 * x_norm**3\n        return x_min + smooth_x * (x_max - x_min)\n```\n\n</code>", "metadata": {"problem_id": 420, "library_problem_id": 129, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"id": 421, "code": "```python\ndef smoothclamp(x, x_min, x_max, N):\n    x = np.clip((x - x_min) / (x_max - x_min), 0, 1)\n    for i in range(N):\n        x = x * x * (3 - 2 * x)\n    return x * (x_max - x_min) + x_min\n```\n\n</code>", "metadata": {"problem_id": 421, "library_problem_id": 130, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 129}}
{"id": 422, "code": "```python\ndef circular_cross_corr(a, b):\n    result = np.zeros(len(a))\n    for lag in range(len(a)):\n        shifted_b = np.roll(b, lag)\n        result[lag] = np.sum(a * shifted_b)\n    return result\nresult = circular_cross_corr(a, b)\n```\n\n</code>", "metadata": {"problem_id": 422, "library_problem_id": 131, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 131}}
{"id": 423, "code": "```python\ncategories = df.index.get_level_values('major').unique()\ncolumns = df.columns\ntime_index = df.index.get_level_values('timestamp').unique()\narray = np.empty((len(columns), len(categories), len(time_index)))\nfor i, col in enumerate(columns):\n    for j, cat in enumerate(categories):\n        for k, time in enumerate(time_index):\n            array[i, j, k] = df.loc[(cat, time), col]\nresult = array\n```\n\n</code>", "metadata": {"problem_id": 423, "library_problem_id": 132, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 132}}
{"id": 424, "code": "```python\nresult = df.values.reshape(15, 5, 4).transpose(0, 2, 1)\nresult = result/100000\n```\n\n</code>", "metadata": {"problem_id": 424, "library_problem_id": 133, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 132}}
{"id": 425, "code": "```python\ndef int_to_binary_array(integer, m):\n    binary_string = np.binary_repr(integer, width=m)\n    binary_array = np.array([int(bit) for bit in binary_string])\n    return binary_array\n\nresult = np.array([int_to_binary_array(num, m) for num in a])\n```\n\n</code>", "metadata": {"problem_id": 425, "library_problem_id": 134, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 426, "code": "```python\ndef int_to_binary_array(integer, m):\n    if integer >= 0:\n        binary_string = bin(integer)[2:].zfill(m)\n        if len(binary_string) > m:\n            binary_string = binary_string[-m:]\n        return np.array([int(bit) for bit in binary_string])\n    else:\n        binary_string = bin(integer & ((1 << m) - 1))[2:].zfill(m)\n        return np.array([int(bit) for bit in binary_string])\n\nresult = np.array([int_to_binary_array(num, m) for num in a])\n```\n\n</code>", "metadata": {"problem_id": 426, "library_problem_id": 135, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"id": 427, "code": "```python\ndef int_to_binary_array(integer, m):\n    binary_string = bin(integer)[2:].zfill(m)\n    binary_array = np.array([int(bit) for bit in binary_string])\n    return binary_array\nbinary_arrays = np.array([int_to_binary_array(num, m) for num in a])\nresult = np.bitwise_xor.reduce(binary_arrays, axis=0)\n```\n\n</code>", "metadata": {"problem_id": 427, "library_problem_id": 136, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"id": 428, "code": "```python\nmean = np.mean(a)\nstd = np.std(a)\nresult = (mean - 3 * std, mean + 3 * std)\n```\n\n</code>", "metadata": {"problem_id": 428, "library_problem_id": 137, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 429, "code": "```python\nmean = np.mean(a)\nstd = np.std(a)\nresult = (mean - 2 * std, mean + 2 * std)\n```\n\n</code>", "metadata": {"problem_id": 429, "library_problem_id": 138, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 137}}
{"id": 430, "code": "```python\n    mean = np.mean(a)\n    std = np.std(a)\n    return (mean - 3 * std, mean + 3 * std)\n```\n\n</code>", "metadata": {"problem_id": 430, "library_problem_id": 139, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 137}}
{"id": 431, "code": "```python\nmean = np.mean(a)\nsd = np.std(a)\nresult = (a < mean - 2 * sd) | (a > mean + 2 * sd)\n```\n\n</code>", "metadata": {"problem_id": 431, "library_problem_id": 140, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 137}}
{"id": 432, "code": "```python\nmasked_data = np.ma.masked_where(DataArray < 0, DataArray)\nprob = np.percentile(masked_data.compressed(), percentile)\n```\n\n</code>", "metadata": {"problem_id": 432, "library_problem_id": 141, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 141}}
{"id": 433, "code": "```python\na[[zero_rows], :] = 0\na[:, [zero_cols]] = 0\n```\n\n</code>", "metadata": {"problem_id": 433, "library_problem_id": 142, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 142}}
{"id": 434, "code": "```python\na[zero_rows, :] = 0\na[:, zero_cols] = 0\n```\n\n</code>", "metadata": {"problem_id": 434, "library_problem_id": 143, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"id": 435, "code": "```python\na[:, 0] = 0\na[1, :] = 0\n```\n\n</code>", "metadata": {"problem_id": 435, "library_problem_id": 144, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"id": 436, "code": "```python\nmask = a == np.amax(a, axis=1, keepdims=True)\n```\n\n</code>", "metadata": {"problem_id": 436, "library_problem_id": 145, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 145}}
{"id": 437, "code": "```python\nmask = a == np.min(a, axis=1, keepdims=True)\n```\n\n</code>", "metadata": {"problem_id": 437, "library_problem_id": 146, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 145}}
{"id": 438, "code": "```python\ncorrelation_coefficient = np.corrcoef(post, distance)[0, 1]\nresult = correlation_coefficient\n```\n\n</code>", "metadata": {"problem_id": 438, "library_problem_id": 147, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 147}}
{"id": 439, "code": "```python\nresult = np.stack([X[:,i].reshape(-1,1).dot(X[:,i].reshape(-1,1).T) for i in range(X.shape[1])])\n```\n\n</code>", "metadata": {"problem_id": 439, "library_problem_id": 148, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 440, "code": "```python\nX = np.sqrt(Y[:,:,0])\n```\n\n</code>", "metadata": {"problem_id": 440, "library_problem_id": 149, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"id": 441, "code": "```python\nis_contained = np.any(a == number)\n```\n\n</code>", "metadata": {"problem_id": 441, "library_problem_id": 150, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 150}}
{"id": 442, "code": "```python\nC = A[~np.isin(A, B)]\n```\n\n</code>", "metadata": {"problem_id": 442, "library_problem_id": 151, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 443, "code": "```python\nC = A[np.isin(A, B)]\n```\n\n</code>", "metadata": {"problem_id": 443, "library_problem_id": 152, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 151}}
{"id": 444, "code": "```python\nC = A[((A > B[0]) & (A < B[1])) | ((A > B[1]) & (A < B[2]))]\n```\n\n</code>", "metadata": {"problem_id": 444, "library_problem_id": 153, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 445, "code": "```python\ntemp = rankdata(a).astype(int)\nresult = len(a) - temp + 1\n```\n\n</code>", "metadata": {"problem_id": 445, "library_problem_id": 154, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"id": 446, "code": "```python\ntemp = rankdata(a, method='ordinal').astype(int)\nresult = len(a) - temp\n```\n\n</code>", "metadata": {"problem_id": 446, "library_problem_id": 155, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 154}}
{"id": 447, "code": "```python\n    temp = rankdata(a).astype(int)\n    result = len(a) - temp + 1\n    return result\n```\n\n</code>", "metadata": {"problem_id": 447, "library_problem_id": 156, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 154}}
{"id": 448, "code": "```python\ndists = np.stack((x_dists, y_dists), axis=-1)\n```\n\n</code>", "metadata": {"problem_id": 448, "library_problem_id": 157, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"id": 449, "code": "```python\ndists = np.stack((x_dists, y_dists), axis=-1)\n```\n\n</code>", "metadata": {"problem_id": 449, "library_problem_id": 158, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 157}}
{"id": 450, "code": "```python\nresult = a[:, second, :][:, :, third]\n```\n\n</code>", "metadata": {"problem_id": 450, "library_problem_id": 159, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 159}}
{"id": 451, "code": "```python\narr = np.zeros((20, 10, 10, 2))\n```\n\n</code>", "metadata": {"problem_id": 451, "library_problem_id": 160, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 160}}
{"id": 452, "code": "```python\nl1 = np.sum(np.abs(X), axis=1, keepdims=True)\nresult = X / l1\n```\n\n</code>", "metadata": {"problem_id": 452, "library_problem_id": 161, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 161}}
{"id": 453, "code": "```python\nnorms = LA.norm(X, axis=1, keepdims=True)\nresult = X / norms\n```\n\n</code>", "metadata": {"problem_id": 453, "library_problem_id": 162, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"id": 454, "code": "```python\nnorm_inf = np.max(np.abs(X), axis=1, keepdims=True)\nresult = X / norm_inf\n```\n\n</code>", "metadata": {"problem_id": 454, "library_problem_id": 163, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"id": 455, "code": "```python\nconditions = [df['a'].astype(str).str.contains(target, na=False)]\nresult = np.select(conditions, choices, default=np.nan)\n```\n\n</code>", "metadata": {"problem_id": 455, "library_problem_id": 164, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 164}}
{"id": 456, "code": "```python\nn = a.shape[0]\nresult = np.zeros((n, n))\nfor i in range(n):\n    for j in range(n):\n        result[i, j] = np.sqrt(np.sum((a[i, :] - a[j, :])**2))\n```\n\n</code>", "metadata": {"problem_id": 456, "library_problem_id": 165, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 457, "code": "```python\nn = a.shape[0]\nresult = np.zeros((n, n))\nfor i in range(n):\n    for j in range(n):\n        result[i, j] = np.linalg.norm(a[i] - a[j])\n```\n\n</code>", "metadata": {"problem_id": 457, "library_problem_id": 166, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 165}}
{"id": 458, "code": "```python\nn = a.shape[0]\nresult = np.zeros((n, n))\nfor i in range(n):\n    for j in range(i + 1, n):\n        result[i, j] = np.linalg.norm(a[i] - a[j])\n```\n\n</code>", "metadata": {"problem_id": 458, "library_problem_id": 167, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 165}}
{"id": 459, "code": "```python\nAVG = np.mean(NA.astype(float), axis=0)\n```\n\n</code>", "metadata": {"problem_id": 459, "library_problem_id": 168, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 168}}
{"id": 460, "code": "```python\nNA_float = np.array([np.inf if x == 'inf' else float(x) for x in NA])\nAVG = np.mean(NA_float)\n```\n\n</code>", "metadata": {"problem_id": 460, "library_problem_id": 169, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 168}}
{"id": 461, "code": "```python\nnew_A = []\nfor item in A:\n    try:\n        new_A.append(float(item))\n    except ValueError:\n        if item == 'np.inf':\n            new_A.append(np.inf)\n        elif item == '-np.inf':\n            new_A.append(-np.inf)\n        else:\n            new_A.append(np.nan)\nAVG = np.mean(np.asarray(new_A))\n```\n\n</code>", "metadata": {"problem_id": 461, "library_problem_id": 170, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 168}}
{"id": 462, "code": "```python\nb = a[a != 0]\nresult = np.array([b[i] for i in range(len(b)) if (i == 0) or (b[i] != b[i-1])])\n```\n\n</code>", "metadata": {"problem_id": 462, "library_problem_id": 171, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 171}}
{"id": 463, "code": "```python\nmask = (a[1:] != a[:-1]) & (a[1:] != 0)\nresult = np.concatenate([a[:1], a[1:][mask]])\nresult = result[result != 0].reshape(-1, 1)\n```\n\n</code>", "metadata": {"problem_id": 463, "library_problem_id": 172, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 171}}
{"id": 464, "code": "```python\nlat_flat = lat.flatten()\nlon_flat = lon.flatten()\nval_flat = val.flatten()\ndf = pd.DataFrame({'lat': lat_flat, 'lon': lon_flat, 'val': val_flat})\n```\n\n</code>", "metadata": {"problem_id": 464, "library_problem_id": 173, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"id": 465, "code": "```python\n    lat_flat = lat.flatten()\n    lon_flat = lon.flatten()\n    val_flat = val.flatten()\n    df = pd.DataFrame({'lat': lat_flat, 'lon': lon_flat, 'val': val_flat})\n    return df\n```\n\n</code>", "metadata": {"problem_id": 465, "library_problem_id": 174, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 173}}
{"id": 466, "code": "```python\nlat_flat = lat.flatten()\nlon_flat = lon.flatten()\nval_flat = val.flatten()\ndf = pd.DataFrame({'lat': lat_flat, 'lon': lon_flat, 'val': val_flat})\ndf['maximum'] = df[['lat', 'lon', 'val']].max(axis=1)\n```\n\n</code>", "metadata": {"problem_id": 466, "library_problem_id": 175, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 173}}
{"id": 467, "code": "```python\ndef rolling_window_2d(array, size):\n    rows, cols = array.shape\n    window_rows, window_cols = size\n    output = []\n    for i in range(rows):\n        for j in range(cols):\n            row_start = max(0, i - window_rows // 2)\n            row_end = min(rows, i + window_rows // 2 + 1)\n            col_start = max(0, j - window_cols // 2)\n            col_end = min(cols, j + window_cols // 2 + 1)\n            output.append(array[row_start:row_end, col_start:col_end])\n    return output\n\nresult = rolling_window_2d(a, size)\n```\n\n</code>", "metadata": {"problem_id": 467, "library_problem_id": 176, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 176}}
{"id": 468, "code": "```python\ndef rolling_window_2d(array, size):\n    rows, cols = array.shape\n    window_rows, window_cols = size\n    output = []\n    for i in range(rows):\n        for j in range(cols):\n            row_start = max(0, i - window_rows // 2)\n            row_end = min(rows, i + window_rows // 2 + 1)\n            col_start = max(0, j - window_cols // 2)\n            col_end = min(cols, j + window_cols // 2 + 1)\n            output.append(array[row_start:row_end, col_start:col_end])\n    return output\n\nresult = rolling_window_2d(a, size)\n```\n\n</code>", "metadata": {"problem_id": 468, "library_problem_id": 177, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 176}}
{"id": 469, "code": "```python\nresult = np.nan_to_num(a).mean()\n```\n\n</code>", "metadata": {"problem_id": 469, "library_problem_id": 178, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 178}}
{"id": 470, "code": "```python\n    a_filtered = a[np.isfinite(a)]\n    return np.mean(a_filtered)\n```\n\n</code>", "metadata": {"problem_id": 470, "library_problem_id": 179, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 178}}
{"id": 471, "code": "```python\nresult = Z[tuple([slice(None)] * (Z.ndim - 1) + [slice(-1, None)])]\n```\n\n</code>", "metadata": {"problem_id": 471, "library_problem_id": 180, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 180}}
{"id": 472, "code": "```python\nresult = tuple([-1] + [slice(None)] * (a.ndim - 1))\nresult = a[result]\n```\n\n</code>", "metadata": {"problem_id": 472, "library_problem_id": 181, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 180}}
{"id": 473, "code": "```python\nresult = any(np.array_equal(c, cnt) for cnt in CNTS)\n```\n\n</code>", "metadata": {"problem_id": 473, "library_problem_id": 182, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 182}}
{"id": 474, "code": "```python\nresult = False\nfor cnt in CNTS:\n    if np.array_equal(c, cnt, equal_nan=True):\n        result = True\n        break\n```\n\n</code>", "metadata": {"problem_id": 474, "library_problem_id": 183, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 182}}
{"id": 475, "code": "```python\nx = np.array([0, 2])\ny = np.array([0, 2])\nf = intp.interp2d(x, y, a, kind='linear')\nresult = f(x_new, y_new)\n```\n\n</code>", "metadata": {"problem_id": 475, "library_problem_id": 184, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 184}}
{"id": 476, "code": "```python\ndf = pd.DataFrame(data)\ndf[name] = df.groupby('D')['Q'].cumsum()\n```\n\n</code>", "metadata": {"problem_id": 476, "library_problem_id": 185, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 185}}
{"id": 477, "code": "```python\ni = np.diag(i)\n```\n\n</code>", "metadata": {"problem_id": 477, "library_problem_id": 186, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 186}}
{"id": 478, "code": "```python\na[~np.eye(a.shape[0],dtype=bool)] = 0\n```\n\n</code>", "metadata": {"problem_id": 478, "library_problem_id": 187, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 187}}
{"id": 479, "code": "```python\nt0 = pd.to_datetime(start)\ntf = pd.to_datetime(end)\nresult = pd.date_range(start=t0, end=tf, periods=n)\n```\n\n</code>", "metadata": {"problem_id": 479, "library_problem_id": 188, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"id": 480, "code": "```python\nindices = np.where((x == a) & (y == b))[0]\nif len(indices) > 0:\n    result = indices[0]\nelse:\n    result = -1\n```\n\n</code>", "metadata": {"problem_id": 480, "library_problem_id": 189, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 189}}
{"id": 481, "code": "```python\nindices = np.where((x == a) & (y == b))\nresult = indices[0]\n```\n\n</code>", "metadata": {"problem_id": 481, "library_problem_id": 190, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 189}}
{"id": 482, "code": "```python\nX = np.column_stack([np.array(x)**2, x, np.ones(len(x))])\na, b, c = np.linalg.lstsq(X, y, rcond=None)[0]\nresult = [a, b, c]\n```\n\n</code>", "metadata": {"problem_id": 482, "library_problem_id": 191, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 191}}
{"id": 483, "code": "```python\ncoefficients = np.polyfit(x, y, degree)\nresult = coefficients\n```\n\n</code>", "metadata": {"problem_id": 483, "library_problem_id": 192, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 191}}
{"id": 484, "code": "```python\ndf = df.apply(lambda x: x - a[x.name], axis=1)\n```\n\n</code>", "metadata": {"problem_id": 484, "library_problem_id": 193, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 193}}
{"id": 485, "code": "```python\nresult = np.einsum('xyi,ij->xyj', A, B)\n```\n\n</code>", "metadata": {"problem_id": 485, "library_problem_id": 194, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"id": 486, "code": "```python\nscaler = MinMaxScaler()\nresult = scaler.fit_transform(a.reshape(-1, 1)).reshape(a.shape)\n```\n\n</code>", "metadata": {"problem_id": 486, "library_problem_id": 195, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 195}}
{"id": 487, "code": "```python\nmins = np.min(arr, axis=1, keepdims=True)\nmaxs = np.max(arr, axis=1, keepdims=True)\nresult = (arr - mins) / (maxs - mins)\n```\n\n</code>", "metadata": {"problem_id": 487, "library_problem_id": 196, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 488, "code": "```python\noriginal_shape = a.shape\na = a.reshape(a.shape[0], -1)\nscaler = MinMaxScaler()\na = scaler.fit_transform(a)\nresult = a.reshape(original_shape)\n```\n\n</code>", "metadata": {"problem_id": 488, "library_problem_id": 197, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 489, "code": "```python\narr = arr.copy()\nmask1 = arr < -10\nmask2 = arr >= 15\nmask3 = (arr >= -10) & (arr < 15)\narr[mask1] = 0\narr[mask2] = 30\narr[mask3] = arr[mask3] + 5\n```\n\n</code>", "metadata": {"problem_id": 489, "library_problem_id": 198, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 198}}
{"id": 490, "code": "```python\narr = arr.copy()\nfor i in range(arr.shape[0]):\n    mask1 = arr[i, :] < n1[i]\n    mask2 = arr[i, :] >= n2[i]\n    mask3 = (arr[i, :] >= n1[i]) & (arr[i, :] < n2[i])\n    arr[i, mask1] = 0\n    arr[i, mask2] = 30\n    arr[i, mask3] = arr[i, mask3] + 5\n```\n\n</code>", "metadata": {"problem_id": 490, "library_problem_id": 199, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 198}}
{"id": 491, "code": "```python\ntolerance = 1e-10\nresult = np.nonzero(np.abs(s1 - s2) > tolerance)[0].shape[0]\n```\n\n</code>", "metadata": {"problem_id": 491, "library_problem_id": 200, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 200}}
{"id": 492, "code": "```python\nresult = np.sum(~np.isclose(s1, s2, equal_nan=True))\n```\n\n</code>", "metadata": {"problem_id": 492, "library_problem_id": 201, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 200}}
{"id": 493, "code": "```python\nresult = np.all(np.array([np.array_equal(a[0], i) for i in a]))\n```\n\n</code>", "metadata": {"problem_id": 493, "library_problem_id": 202, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"id": 494, "code": "```python\nresult = all(np.isnan(i).all() for i in a)\n```\n\n</code>", "metadata": {"problem_id": 494, "library_problem_id": 203, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 202}}
{"id": 495, "code": "```python\npadding = [(0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1])]\nresult = np.pad(a, padding, mode='constant')\n```\n\n</code>", "metadata": {"problem_id": 495, "library_problem_id": 204, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 204}}
{"id": 496, "code": "```python\npadding = ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1]))\nresult = np.pad(a, padding, mode='constant')\n```\n\n</code>", "metadata": {"problem_id": 496, "library_problem_id": 205, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"id": 497, "code": "```python\npadding = ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1]))\nresult = np.pad(a, padding, mode='constant', constant_values=element)\n```\n\n</code>", "metadata": {"problem_id": 497, "library_problem_id": 206, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 204}}
{"id": 498, "code": "```python\n    pad_height = shape[0] - arr.shape[0]\n    pad_width = shape[1] - arr.shape[1]\n    pad_top = 0\n    pad_left = 0\n    pad_bottom = pad_height\n    pad_right = pad_width\n    padding = ((pad_top, pad_bottom), (pad_left, pad_right))\n    result = np.pad(arr, padding, mode='constant', constant_values=0)\n    return result\n```\n\n</code>", "metadata": {"problem_id": 498, "library_problem_id": 207, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"id": 499, "code": "```python\npad_row = shape[0] - a.shape[0]\npad_col = shape[1] - a.shape[1]\npad_top = pad_row // 2\npad_bottom = pad_row - pad_top\npad_left = pad_col // 2\npad_right = pad_col - pad_left\nresult = np.pad(a, ((pad_top, pad_bottom), (pad_left, pad_right)), mode='constant')\n```\n\n</code>", "metadata": {"problem_id": 499, "library_problem_id": 208, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 204}}
{"id": 500, "code": "```python\na = a.reshape(a.shape[0]//3,3)\n```\n\n</code>", "metadata": {"problem_id": 500, "library_problem_id": 209, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"id": 501, "code": "```python\nresult = np.array([[a[i, j, b[i, j]] for j in range(a.shape[1])] for i in range(a.shape[0])])\n```\n\n</code>", "metadata": {"problem_id": 501, "library_problem_id": 210, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 210}}
{"id": 502, "code": "```python\nresult = np.take_along_axis(a, b[...,None], axis=2).squeeze()\n```\n\n</code>", "metadata": {"problem_id": 502, "library_problem_id": 211, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 210}}
{"id": 503, "code": "```python\nrows, cols = np.indices(b.shape[:2])\nresult = a[rows, cols, b]\n```\n\n</code>", "metadata": {"problem_id": 503, "library_problem_id": 212, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 210}}
{"id": 504, "code": "```python\nresult = np.sum(a[np.arange(b.shape[0])[:, None], np.arange(b.shape[1]), b])\n```\n\n</code>", "metadata": {"problem_id": 504, "library_problem_id": 213, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 505, "code": "```python\nN, M = b.shape\nrow_indices = np.arange(N)[:, None]\ncol_indices = np.arange(M)[None, :]\nindices = (row_indices, col_indices, b)\nindexed_values = a[indices]\nresult = np.sum(a) - np.sum(indexed_values)\n```\n\n</code>", "metadata": {"problem_id": 505, "library_problem_id": 214, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 506, "code": "```python\nresult = np.where((df['a'] > 1) & (df['a'] <= 4), df['b'], np.nan)\n```\n\n</code>", "metadata": {"problem_id": 506, "library_problem_id": 215, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 507, "code": "```python\nrows = np.any(im != 0, axis=1)\ncols = np.any(im != 0, axis=0)\nrow_start, row_end = np.where(rows)[0][[0, -1]]\ncol_start, col_end = np.where(cols)[0][[0, -1]]\nresult = im[row_start:row_end+1, col_start:col_end+1]\n```\n\n</code>", "metadata": {"problem_id": 507, "library_problem_id": 216, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 216}}
{"id": 508, "code": "```python\nrows = np.any(A, axis=1)\ncols = np.any(A, axis=0)\nymin, ymax = np.where(rows)[0][[0, -1]]\nxmin, xmax = np.where(cols)[0][[0, -1]]\nresult = A[ymin:ymax+1, xmin:xmax+1]\n```\n\n</code>", "metadata": {"problem_id": 508, "library_problem_id": 217, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 216}}
{"id": 509, "code": "```python\nrows = np.where(np.sum(im != 0, axis=1) != im.shape[1])[0]\ncols = np.where(np.sum(im != 0, axis=0) != im.shape[0])[0]\nif rows.size > 0 and cols.size > 0:\n    result = im[rows[0]:rows[-1]+1, cols[0]:cols[-1]+1]\nelse:\n    result = np.array([])\n```\n\n</code>", "metadata": {"problem_id": 509, "library_problem_id": 218, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 216}}
{"id": 510, "code": "```python\nrows = np.any(im != 0, axis=1)\ncols = np.any(im != 0, axis=0)\nim_cropped = im[rows][:, cols]\nresult = im_cropped\n```\n\n</code>", "metadata": {"problem_id": 510, "library_problem_id": 219, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 216}}
{"id": 511, "code": "```python\nplt.plot(x, y, label=\"x-y\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.legend()\nplt.show()\n```\n\n", "metadata": {"problem_id": 511, "library_problem_id": 0, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 512, "code": "```python\nplt.minorticks_on()\nplt.tick_params(axis='y', which='minor')\nplt.show()\n```\n\n", "metadata": {"problem_id": 512, "library_problem_id": 1, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 1}}
{"id": 513, "code": "```python\nplt.minorticks_on()\n```\n\n", "metadata": {"problem_id": 513, "library_problem_id": 2, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 514, "code": "```python\nplt.minorticks_on()\nplt.tick_params(axis='x', which='minor')\nplt.show()\n```\n\n", "metadata": {"problem_id": 514, "library_problem_id": 3, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 515, "code": "```python\nline_styles = ['-', '--', '-.', ':']\nfor i, style in enumerate(line_styles):\n    plt.plot(x, np.random.randn(10) + i, linestyle=style)\nplt.show()\n```\n\n", "metadata": {"problem_id": 515, "library_problem_id": 4, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 516, "code": "```python\nline_styles = ['-', '--', '-.', ':']\nfor i, style in enumerate(line_styles):\n    plt.plot(x, np.random.randn(10) + i, linestyle=style)\nplt.show()\n```\n\n", "metadata": {"problem_id": 516, "library_problem_id": 5, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 517, "code": "```python\nplt.plot(x, y, marker='d', markersize=5)\nplt.show()\n```\n\n", "metadata": {"problem_id": 517, "library_problem_id": 6, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 518, "code": "```python\nplt.plot(x, y, marker='D', markersize=10)\nplt.show()\n```\n\n", "metadata": {"problem_id": 518, "library_problem_id": 7, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 519, "code": "```python\nax.set(ylim=(0, 40))\n```", "metadata": {"problem_id": 519, "library_problem_id": 8, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 8}}
{"id": 520, "code": "```python\nplt.axvspan(2, 4, facecolor='red', alpha=0.5)\n```", "metadata": {"problem_id": 520, "library_problem_id": 9, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 521, "code": "```python\nplt.plot([0, 1], [0, 2])\nplt.show()\n```\n\n", "metadata": {"problem_id": 521, "library_problem_id": 10, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 522, "code": "```python\nplt.plot([0, 1], [0, 2])\nplt.show()\n```\n\n", "metadata": {"problem_id": 522, "library_problem_id": 11, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 10}}
{"id": 523, "code": "```python\nseaborn.relplot(\n    data=df,\n    x=\"Height (cm)\",\n    y=\"Weight (kg)\",\n    hue=\"Gender\",\n)\nplt.show()\n```", "metadata": {"problem_id": 523, "library_problem_id": 12, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 12}}
{"id": 524, "code": "```python\nsns.regplot(x=x, y=y)\nplt.show()\n```\n\n", "metadata": {"problem_id": 524, "library_problem_id": 13, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 13}}
{"id": 525, "code": "```python\ndf = pd.DataFrame({'x': x, 'y': y})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```\n\n", "metadata": {"problem_id": 525, "library_problem_id": 14, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 13}}
{"id": 526, "code": "```python\nplt.plot(x, y, marker='+', markersize=7)\nplt.show()\n```\n\n", "metadata": {"problem_id": 526, "library_problem_id": 15, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 527, "code": "```python\nplt.legend(fontsize=20)\n```\n\n", "metadata": {"problem_id": 527, "library_problem_id": 16, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 528, "code": "```python\nplt.plot(x, y, label=\"cosine\")\nplt.legend(title=\"xyz\", title_fontsize=20)\nplt.show()\n```\n\n", "metadata": {"problem_id": 528, "library_problem_id": 17, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 529, "code": "```python\nl.set_markeredgecolor(\"salmon\")\nl.set_markerfacecolor(\"salmon\")\nl.set_alpha(0.2)\n```", "metadata": {"problem_id": 529, "library_problem_id": 18, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"id": 530, "code": "```python\nl.set_markeredgecolor(\"k\")\nl.set_markeredgewidth(3)\n```", "metadata": {"problem_id": 530, "library_problem_id": 19, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 531, "code": "```python\nl.set_color(\"red\")\n```\n\n", "metadata": {"problem_id": 531, "library_problem_id": 20, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 532, "code": "```python\nplt.xticks(rotation=45)\n```\n\n", "metadata": {"problem_id": 532, "library_problem_id": 21, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 21}}
{"id": 533, "code": "```python\nplt.xticks(rotation=45)\n```\n\n", "metadata": {"problem_id": 533, "library_problem_id": 22, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 534, "code": "```python\nplt.xticks([0, 2, 4, 6])\nplt.show()\n```\n\n", "metadata": {"problem_id": 534, "library_problem_id": 23, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 535, "code": "```python\nplt.legend()\n```\n\n", "metadata": {"problem_id": 535, "library_problem_id": 24, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 536, "code": "```python\nplt.imshow(H)\nplt.colorbar()\nplt.show()\n```\n\n", "metadata": {"problem_id": 536, "library_problem_id": 25, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 537, "code": "```python\nplt.imshow(H, cmap='gray')\nplt.show()\n```\n\n", "metadata": {"problem_id": 537, "library_problem_id": 26, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 538, "code": "```python\nplt.plot(x, y)\nplt.xlabel(\"X\", loc=\"right\")\nplt.show()\n```\n\n", "metadata": {"problem_id": 538, "library_problem_id": 27, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"id": 539, "code": "```python\ng.set_xticklabels(g.get_xticklabels(), rotation=90)\nplt.show()\n```\n\n", "metadata": {"problem_id": 539, "library_problem_id": 28, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 540, "code": "```python\nplt.title(myTitle, wrap=True)\nplt.show()\n```\n\n</code>", "metadata": {"problem_id": 540, "library_problem_id": 29, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 541, "code": "```python\nplt.plot(x, y)\nplt.ylim(plt.ylim()[::-1])\nplt.show()\n```\n\n", "metadata": {"problem_id": 541, "library_problem_id": 30, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 542, "code": "```python\nplt.xticks([0, 1.5])\n```", "metadata": {"problem_id": 542, "library_problem_id": 31, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 31}}
{"id": 543, "code": "```python\nplt.yticks([-1, 1])\n```\n\n", "metadata": {"problem_id": 543, "library_problem_id": 32, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 31}}
{"id": 544, "code": "```python\nplt.plot(z, label=\"Z\")\nplt.plot(y, label=\"Y\")\nplt.plot(x, label=\"X\")\n\nplt.legend()\nplt.show()\n```\n\n", "metadata": {"problem_id": 544, "library_problem_id": 33, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 545, "code": "```python\nplt.scatter(x, y, edgecolors='black', facecolors='blue')\nplt.show()\n```\n\n", "metadata": {"problem_id": 545, "library_problem_id": 34, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 34}}
{"id": 546, "code": "```python\nfig, ax = plt.subplots()\nplt.plot(x, y)\nax.xaxis.set_major_locator(plt.MultipleLocator(1))\nax.yaxis.set_major_locator(plt.MultipleLocator(1))\nplt.show()\n```\n\n", "metadata": {"problem_id": 546, "library_problem_id": 35, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 547, "code": "```python\nplt.ticklabel_format(style='plain', axis='y')\n```\n\n", "metadata": {"problem_id": 547, "library_problem_id": 36, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 548, "code": "```python\nax.lines[0].set_linestyle(\"--\")\nplt.show()\n```\n\n", "metadata": {"problem_id": 548, "library_problem_id": 37, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 549, "code": "```python\nfig, (ax1, ax2) = plt.subplots(2, 1, sharex=True)\nax1.plot(x, y1)\nax1.set_title('Sine')\nax2.plot(x, y2)\nax2.set_title('Cosine')\nplt.show()\n```\n\n", "metadata": {"problem_id": 549, "library_problem_id": 38, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 550, "code": "```python\nfig, axes = plt.subplots(2, 1)\naxes[0].plot(x, y1)\naxes[1].plot(x, y2)\n\nfor ax in axes:\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_visible(False)\n    ax.spines['left'].set_visible(False)\nplt.show()\n```\n\n", "metadata": {"problem_id": 550, "library_problem_id": 39, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 38}}
{"id": 551, "code": "```python\nplt.xlabel(None)\n```", "metadata": {"problem_id": 551, "library_problem_id": 40, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 552, "code": "```python\nplt.xticks([])\n```\n\n", "metadata": {"problem_id": 552, "library_problem_id": 41, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 40}}
{"id": 553, "code": "```python\nplt.xticks([3, 4])\nplt.grid(axis='x')\nplt.show()\n```\n\n", "metadata": {"problem_id": 553, "library_problem_id": 42, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 554, "code": "```python\nplt.yticks([3,4])\nplt.grid(axis='y')\nplt.show()\n```\n\n", "metadata": {"problem_id": 554, "library_problem_id": 43, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 555, "code": "```python\nplt.yticks([3, 4])\nplt.xticks([1, 2])\nplt.grid(axis='y')\nplt.grid(axis='x')\nplt.show()\n```\n\n", "metadata": {"problem_id": 555, "library_problem_id": 44, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 556, "code": "```python\nplt.grid(True)\n```", "metadata": {"problem_id": 556, "library_problem_id": 45, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 557, "code": "```python\nplt.legend(loc=\"lower right\")\n```\n\n", "metadata": {"problem_id": 557, "library_problem_id": 46, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 46}}
{"id": 558, "code": "```python\nfig, axes = plt.subplots(ncols=2, nrows=2, figsize=(8, 6))\nplt.subplots_adjust(wspace=0.4, hspace=0.4)\naxes = axes.flatten()\n\nfor ax in axes:\n    ax.set_ylabel(r\"$\\ln\\left(\\frac{x_a-x_b}{x_a-x_c}\\right)$\")\n    ax.set_xlabel(r\"$\\ln\\left(\\frac{x_a-x_d}{x_a-x_e}\\right)$\")\n\nplt.show()\nplt.clf()\n```", "metadata": {"problem_id": 558, "library_problem_id": 47, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 559, "code": "```python\nplt.plot(x, y, label='Y')\nplt.plot(x, z, label='Z')\nplt.legend()\n```\n\n", "metadata": {"problem_id": 559, "library_problem_id": 48, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 560, "code": "```python\nax.xaxis.tick_top()\nax.xaxis.set_label_position('top')\nax.set_xticks(np.arange(data.shape[1]) + 0.5, minor=False)\nax.set_yticks(np.arange(data.shape[0]) + 0.5, minor=False)\nax.set_xticklabels(column_labels, minor=False)\nax.set_yticklabels(row_labels, minor=False)\nplt.show()\n```", "metadata": {"problem_id": 560, "library_problem_id": 49, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 561, "code": "```python\nplt.plot(x, y)\nplt.xlabel(\"X\", labelpad=20)\nplt.show()\n```\n\n", "metadata": {"problem_id": 561, "library_problem_id": 50, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 562, "code": "```python\nplt.plot(x, y)\nplt.xticks([])\nplt.show()\n```\n\n", "metadata": {"problem_id": 562, "library_problem_id": 51, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 51}}
{"id": 563, "code": "```python\nfig, ax = plt.subplots()\nax.plot(x, y)\nax.yaxis.tick_right()\nplt.show()\n```\n\n", "metadata": {"problem_id": 563, "library_problem_id": 52, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 52}}
{"id": 564, "code": "```python\nfig, ax = plt.subplots()\nax.plot(x, y)\nax.set_ylabel(\"Y\", rotation=270, position=(1, 0.5))\nax.yaxis.set_label_position(\"right\")\nax.yaxis.tick_left()\nax.yaxis.set_ticks_position(\"left\")\nplt.show()\n```\n\n", "metadata": {"problem_id": 564, "library_problem_id": 53, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 52}}
{"id": 565, "code": "```python\nsns.jointplot(x='total_bill', y='tip', data=tips, kind='reg', color='green')\nplt.show()\n```\n\n", "metadata": {"problem_id": 565, "library_problem_id": 54, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 566, "code": "```python\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind='reg', line_kws={'color': 'green'})\n```\n\n", "metadata": {"problem_id": 566, "library_problem_id": 55, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 567, "code": "```python\nsns.jointplot(x='total_bill', y='tip', data=tips, kind='reg')\nplt.show()\n```\n\n", "metadata": {"problem_id": 567, "library_problem_id": 56, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 568, "code": "```python\nax = df.plot.bar(x=\"celltype\", y=[\"s1\", \"s2\"], rot=0)\n```\n\n</code>", "metadata": {"problem_id": 568, "library_problem_id": 57, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 569, "code": "```python\nax = df.plot.bar(x=\"celltype\", y=[\"s1\", \"s2\"], rot=45)\n```\n\n</code>", "metadata": {"problem_id": 569, "library_problem_id": 58, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 57}}
{"id": 570, "code": "```python\nplt.plot(x, y)\nplt.xlabel(\"X\", color=\"red\")\nplt.tick_params(axis='x', colors='red')\nplt.show()\n```\n\n", "metadata": {"problem_id": 570, "library_problem_id": 59, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"id": 571, "code": "```python\nplt.plot(x, y)\nplt.xlabel(\"X\", color=\"red\")\nplt.show()\n```\n\n", "metadata": {"problem_id": 571, "library_problem_id": 60, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 59}}
{"id": 572, "code": "```python\nplt.plot(x, y)\nplt.xticks(fontsize=10, rotation='vertical')\nplt.yticks(fontsize=10)\nplt.show()\n```\n\n", "metadata": {"problem_id": 572, "library_problem_id": 61, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 573, "code": "```python\nx = [0.22058956, 0.33088437, 2.20589566]\nfor i in x:\n    plt.axvline(x=i)\nplt.show()\n```\n\n", "metadata": {"problem_id": 573, "library_problem_id": 62, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 574, "code": "```python\nfig, ax = plt.subplots()\nim = ax.imshow(rand_mat)\n\nax.set_xticks(numpy.arange(len(xlabels)))\nax.set_yticks(numpy.arange(len(ylabels)))\n\nax.set_xticklabels(xlabels)\nax.set_yticklabels(ylabels)\n\nax.xaxis.tick_top()\nax.invert_yaxis()\n\nplt.show()\n```\n\n", "metadata": {"problem_id": 574, "library_problem_id": 63, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 575, "code": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\n\nrc(\"mathtext\", default=\"regular\")\n\ntime = np.arange(10)\ntemp = np.random.random(10) * 30\nSwdown = np.random.random(10) * 100 - 10\nRn = np.random.random(10) * 100 - 10\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nline1, = ax.plot(time, Swdown, \"-\", label=\"Swdown\")\nline2, = ax.plot(time, Rn, \"-\", label=\"Rn\")\nax2 = ax.twinx()\nline3, = ax2.plot(time, temp, \"-r\", label=\"temp\")\n\n# Create a list of lines and labels for the legend\nlines = [line1, line2, line3]\nlabels = [line.get_label() for line in lines]\n\nax.legend(lines, labels, loc=0)\nax.grid()\nax.set_xlabel(\"Time (h)\")\nax.set_ylabel(r\"Radiation ($MJ\\,m^{-2}\\,d^{-1}$)\")\nax2.set_ylabel(r\"Temperature ($^\\circ$C)\")\nax2.set_ylim(0, 35)\nax.set_ylim(-20, 100)\nplt.show()\nplt.clf()\n```", "metadata": {"problem_id": 575, "library_problem_id": 64, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 576, "code": "```python\nfig, axes = plt.subplots(1, 2, figsize=(8, 4))\naxes[0].plot(x, y)\naxes[0].set_title(\"Y\")\naxes[1].plot(x, y)\naxes[1].set_title(\"Y\")\nplt.show()\n```\n\n", "metadata": {"problem_id": 576, "library_problem_id": 65, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 577, "code": "```python\nsns.scatterplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", data=df, s=30)\nplt.show()\n```\n\n", "metadata": {"problem_id": 577, "library_problem_id": 66, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 578, "code": "```python\nplt.scatter(b, a)\nfor i, txt in enumerate(c):\n    plt.annotate(txt, (b[i], a[i]))\nplt.show()\n```\n\n", "metadata": {"problem_id": 578, "library_problem_id": 67, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 67}}
{"id": 579, "code": "```python\nplt.plot(x, y, label=\"y over x\")\nplt.legend(title=\"Plot\")\nplt.show()\n```\n\n", "metadata": {"problem_id": 579, "library_problem_id": 68, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 580, "code": "```python\nplt.plot(x, y, label=\"y over x\")\nplt.legend(title=\"<b>Legend</b>\", loc=\"best\", fancybox=True)\nplt.show()\n```\n\n", "metadata": {"problem_id": 580, "library_problem_id": 69, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 581, "code": "```python\nplt.hist(x, edgecolor='black', linewidth=1.2)\nplt.show()\n```\n\n", "metadata": {"problem_id": 581, "library_problem_id": 70, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 70}}
{"id": 582, "code": "```python\nfig, axes = plt.subplots(1, 2, figsize=(10, 5), gridspec_kw={'width_ratios': [3, 1]})\naxes[0].plot(x, y)\naxes[1].plot(x, y)\nplt.show()\n```\n\n", "metadata": {"problem_id": 582, "library_problem_id": 71, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 583, "code": "```python\nplt.hist(x, bins, alpha=0.5, label='x')\nplt.hist(y, bins, alpha=0.5, label='y')\nplt.legend(loc='upper right')\nplt.show()\n```\n\n", "metadata": {"problem_id": 583, "library_problem_id": 72, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"id": 584, "code": "```python\nplt.hist([x, y], label=['x', 'y'], histtype='bar')\nplt.legend(loc='upper right')\nplt.show()\n```\n\n", "metadata": {"problem_id": 584, "library_problem_id": 73, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 72}}
{"id": 585, "code": "```python\nplt.xlim(0, 5)\nplt.ylim(0, 5)\nplt.plot([a, c], [b, d])\nplt.show()\n```\n\n", "metadata": {"problem_id": 585, "library_problem_id": 74, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 74}}
{"id": 586, "code": "```python\nfig, axes = plt.subplots(1, 2, figsize=(8, 4))\nim1 = axes[0].imshow(x)\nim2 = axes[1].imshow(y)\nfig.colorbar(im1, ax=axes.ravel().tolist())\nplt.show()\n```\n\n", "metadata": {"problem_id": 586, "library_problem_id": 75, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 587, "code": "```python\nplt.plot(x[:, 0], label=\"a\")\nplt.plot(x[:, 1], label=\"b\")\nplt.legend()\nplt.show()\n```\n\n", "metadata": {"problem_id": 587, "library_problem_id": 76, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 588, "code": "```python\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\nfig.suptitle(\"Y and Z\")\naxs[0].plot(x, y)\naxs[1].plot(a, z)\nplt.show()\n```\n\n", "metadata": {"problem_id": 588, "library_problem_id": 77, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 589, "code": "```python\ndf = pd.DataFrame(points, columns=['x', 'y'])\nplt.plot(df['x'], df['y'])\nplt.yscale('log')\nplt.show()\n```\n\n", "metadata": {"problem_id": 589, "library_problem_id": 78, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 78}}
{"id": 590, "code": "```python\nplt.plot(x, y)\nplt.title(\"y over x\", fontsize=20)\nplt.xlabel(\"x\", fontsize=18)\nplt.ylabel(\"y\", fontsize=16)\nplt.show()\n```\n\n", "metadata": {"problem_id": 590, "library_problem_id": 79, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 79}}
{"id": 591, "code": "```python\nax.plot(x, y)\nax.set_xticklabels(np.arange(1, 11))\nax.set_yticklabels(np.arange(1, 11))\n```\n\n", "metadata": {"problem_id": 591, "library_problem_id": 80, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 592, "code": "```python\nfig, ax = plt.subplots()\nfor i in range(len(lines)):\n    line = lines[i]\n    color = c[i]\n    x = [line[0][0], line[1][0]]\n    y = [line[0][1], line[1][1]]\n    ax.plot(x, y, color=color)\nplt.show()\n```\n\n", "metadata": {"problem_id": 592, "library_problem_id": 81, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 81}}
{"id": 593, "code": "```python\nplt.figure()\nplt.loglog(x, y, basex=10, basey=10)\nplt.xticks([1, 10, 100, 1000])\nplt.yticks([1, 10, 100, 1000])\nplt.show()\n```\n\n", "metadata": {"problem_id": 593, "library_problem_id": 82, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 594, "code": "```python\nplt.figure()\ndf.plot(marker=\"o\")\nplt.show()\n```\n\n", "metadata": {"problem_id": 594, "library_problem_id": 83, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 83}}
{"id": 595, "code": "```python\nplt.hist(data, weights=np.ones(len(data)) / len(data))\nplt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda x, loc: '{:.0%}'.format(x)))\nplt.show()\n```\n\n", "metadata": {"problem_id": 595, "library_problem_id": 84, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 84}}
{"id": 596, "code": "```python\nplt.plot(x, y, alpha = 0.5, marker = 'o')\nplt.show()\n```\n\n", "metadata": {"problem_id": 596, "library_problem_id": 85, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 597, "code": "```python\nfig, axes = plt.subplots(1, 2, figsize=(10, 5))\n\naxes[0].plot(x, y, label='y')\naxes[0].set_title('y')\n\naxes[1].plot(z, a, label='a')\naxes[1].set_title('a')\n\nfig.legend()\nplt.show()\n```\n\n", "metadata": {"problem_id": 597, "library_problem_id": 86, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"id": 598, "code": "```python\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=False)\n\nsns.regplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", data=df, ax=axes[0])\nsns.regplot(x=\"bill_length_mm\", y=\"flipper_length_mm\", data=df, ax=axes[1])\n\nplt.show()\n```\n\n", "metadata": {"problem_id": 598, "library_problem_id": 87, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 87}}
{"id": 599, "code": "```python\ndef format_fn(tick_val, tick_pos):\n    if tick_val == 2:\n        return \"second\"\n    else:\n        return tick_val\nax.xaxis.set_major_formatter(format_fn)\n```\n\n", "metadata": {"problem_id": 599, "library_problem_id": 88, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 600, "code": "```python\nplt.plot(x, y, label=\"$\\\\lambda$\")\nplt.legend()\nplt.show()\n```\n\n", "metadata": {"problem_id": 600, "library_problem_id": 89, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 601, "code": "```python\nplt.xticks(list(plt.xticks()[0]) + [2.1, 3, 7.6])\n```\n\n", "metadata": {"problem_id": 601, "library_problem_id": 90, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 602, "code": "```python\nplt.xticks(rotation=-60, ha='left')\n```\n\n</code>", "metadata": {"problem_id": 602, "library_problem_id": 91, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 603, "code": "```python\nplt.yticks(rotation = -60)\nplt.xticks(verticalalignment='top')\n```\n\n", "metadata": {"problem_id": 603, "library_problem_id": 92, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 604, "code": "```python\nplt.setp(plt.gca().get_xticklabels(), alpha=0.5)\n```", "metadata": {"problem_id": 604, "library_problem_id": 93, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 605, "code": "```python\nplt.margins(x=0, y=0.1)\n```", "metadata": {"problem_id": 605, "library_problem_id": 94, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 606, "code": "```python\nplt.tick_params(axis='y', which='both', direction='in',\n                left=40, right=0)\nplt.tick_params(axis='x', which='both', direction='in',\n                bottom=40, top=0)\n```\n\n", "metadata": {"problem_id": 606, "library_problem_id": 95, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 607, "code": "```python\nfig, axes = plt.subplots(1, 2, figsize=(10, 5))\nfig.suptitle(\"Figure\")\naxes[0].plot(x, y)\naxes[1].plot(x, y)\nplt.show()\n```\n\n", "metadata": {"problem_id": 607, "library_problem_id": 96, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 96}}
{"id": 608, "code": "```python\nax = df.plot()\nax.set_xlabel(\"X\")\nax.set_ylabel(\"Y\")\nplt.show()\n```\n\n</code>", "metadata": {"problem_id": 608, "library_problem_id": 97, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 609, "code": "```python\nplt.scatter(x, y, marker='v', hatch='|||||')\nplt.show()\n```\n\n", "metadata": {"problem_id": 609, "library_problem_id": 98, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 98}}
{"id": 610, "code": "```python\nplt.scatter(x, y, marker='o', edgecolors='none', hatch='|')\nplt.show()\n```\n\n", "metadata": {"problem_id": 610, "library_problem_id": 99, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 611, "code": "```python\nplt.scatter(x, y, marker='*', hatch='*')\nplt.show()\n```\n\n", "metadata": {"problem_id": 611, "library_problem_id": 100, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 612, "code": "```python\nplt.scatter(x, y, s=100, marker=\"*|\")\nplt.show()\n```\n\n", "metadata": {"problem_id": 612, "library_problem_id": 101, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 613, "code": "```python\nplt.xlim(0, 10)\nplt.ylim(0, 10)\nplt.imshow(data, extent=[1, 5, 1, 4])\nplt.show()\n```\n\n", "metadata": {"problem_id": 613, "library_problem_id": 102, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 614, "code": "```python\nplt.stem(x, y, orientation=\"horizontal\")\nplt.show()\n```\n\n", "metadata": {"problem_id": 614, "library_problem_id": 103, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 615, "code": "```python\nplt.bar(d.keys(), d.values(), color=[c[k] for k in d.keys()])\nplt.show()\n```\n\n", "metadata": {"problem_id": 615, "library_problem_id": 104, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 616, "code": "```python\nplt.axvline(x=3, color='r', linestyle='-', label='cutoff')\nplt.legend()\n```\n\n", "metadata": {"problem_id": 616, "library_problem_id": 105, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 617, "code": "```python\nplt.figure(figsize=(6,6))\nax = plt.subplot(111, projection='polar')\nax.bar(labels, height)\nplt.show()\n```\n\n", "metadata": {"problem_id": 617, "library_problem_id": 106, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 106}}
{"id": 618, "code": "```python\nplt.pie(data, labels = l, wedgeprops = {\"width\":0.4})\nplt.show()\n```\n\n", "metadata": {"problem_id": 618, "library_problem_id": 107, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 619, "code": "```python\nplt.plot(x, y, '--')\nplt.grid(color='blue', linestyle='--')\nplt.show()\n```\n\n", "metadata": {"problem_id": 619, "library_problem_id": 108, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 108}}
{"id": 620, "code": "```python\nfig, ax = plt.subplots()\nax.plot(x, y)\nax.minorticks_on()\nax.minorticks_on()\nax.grid(which='minor', linestyle=':', linewidth='0.5', color='gray')\nplt.show()\n```\n\n", "metadata": {"problem_id": 620, "library_problem_id": 109, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 621, "code": "```python\nplt.pie(sizes, labels=labels, colors=colors, textprops={'weight': 'bold'})\nplt.show()\n```\n\n", "metadata": {"problem_id": 621, "library_problem_id": 110, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 110}}
{"id": 622, "code": "```python\nplt.pie(sizes, labels=labels, colors=colors, textprops={'weight': 'bold'})\nplt.show()\n```\n\n", "metadata": {"problem_id": 622, "library_problem_id": 111, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 623, "code": "```python\nplt.plot(x, y, marker='o', markerfacecolor='None', markeredgecolor='r')\nplt.show()\n```\n\n", "metadata": {"problem_id": 623, "library_problem_id": 112, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 112}}
{"id": 624, "code": "```python\nplt.axvline(55, color=\"green\")\n```\n\n", "metadata": {"problem_id": 624, "library_problem_id": 113, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 625, "code": "```python\nx = np.arange(len(blue_bar))  # the label locations\nwidth = 0.35  # the width of the bars\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width/2, blue_bar, width, label='Blue')\nrects2 = ax.bar(x + width/2, orange_bar, width, label='Orange')\n\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(x, ['Group A', 'Group B', 'Group C'])\nax.legend()\n\nfig.tight_layout()\n\nplt.show()\n```\n\n", "metadata": {"problem_id": 625, "library_problem_id": 114, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 626, "code": "```python\nfig, axes = plt.subplots(1, 2, figsize=(10, 5))\n\naxes[0].plot(x, y, label='y')\naxes[0].plot(x, z, label='z')\naxes[0].legend()\n\naxes[1].plot(a, z, label='z')\n\nplt.show()\n```\n\n", "metadata": {"problem_id": 626, "library_problem_id": 115, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 115}}
{"id": 627, "code": "```python\nplt.scatter(x, y, c=y, cmap=\"Spectral\")\nplt.show()\n```\n\n", "metadata": {"problem_id": 627, "library_problem_id": 116, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 116}}
{"id": 628, "code": "```python\nplt.plot(x, y)\nplt.xticks(np.arange(min(x), max(x)+1, 1.0))\nplt.show()\n```\n\n", "metadata": {"problem_id": 628, "library_problem_id": 117, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 117}}
{"id": 629, "code": "```python\nsns.catplot(data=df, x=\"sex\", y=\"bill_length_mm\", col=\"species\", kind=\"bar\", sharey=False)\n```\n\n", "metadata": {"problem_id": 629, "library_problem_id": 118, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 118}}
{"id": 630, "code": "```python\ncircle = plt.Circle((0.5, 0.5), 0.2, color='blue')\nfig, ax = plt.subplots()\nax.add_artist(circle)\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\nplt.show()\n```\n\n", "metadata": {"problem_id": 630, "library_problem_id": 119, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 119}}
{"id": 631, "code": "```python\nplt.plot(x, y)\nplt.title(r\"$\\bf{\\phi}$\", fontsize=20)\nplt.show()\n```\n\n", "metadata": {"problem_id": 631, "library_problem_id": 120, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"id": 632, "code": "```python\nplt.plot(x, y, label=\"Line\")\nplt.legend(handletextpad=0.1)\nplt.show()\n```\n\n", "metadata": {"problem_id": 632, "library_problem_id": 121, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 633, "code": "```python\nplt.plot(x, y, label=\"Line\")\nplt.legend(handlelength=0.3)\nplt.show()\n```\n\n", "metadata": {"problem_id": 633, "library_problem_id": 122, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 634, "code": "```python\nplt.legend(ncol=2)\nplt.show()\n```\n\n</code>", "metadata": {"problem_id": 634, "library_problem_id": 123, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 635, "code": "```python\nplt.legend(loc=\"upper left\")\nplt.plot(x[:2], y[:2], linestyle=\"None\", marker=\"o\", color=\"green\")\nplt.show()\n```\n\n", "metadata": {"problem_id": 635, "library_problem_id": 124, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 636, "code": "```python\nplt.imshow(data, cmap='viridis')\nplt.colorbar()\nplt.show()\n```\n\n", "metadata": {"problem_id": 636, "library_problem_id": 125, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 125}}
{"id": 637, "code": "```python\nplt.plot(x, y)\nplt.title(r\"$\\bf{Figure}$ 1\")\nplt.show()\n```\n\n", "metadata": {"problem_id": 637, "library_problem_id": 126, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 126}}
{"id": 638, "code": "```python\nsns.pairplot(df, x_vars=[\"x\"], y_vars=[\"y\"], hue=\"id\", legend=False)\nplt.show()\n```\n\n", "metadata": {"problem_id": 638, "library_problem_id": 127, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 127}}
{"id": 639, "code": "```python\nplt.plot(x, y)\nplt.gca().invert_xaxis()\nplt.show()\n```\n\n", "metadata": {"problem_id": 639, "library_problem_id": 128, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 128}}
{"id": 640, "code": "```python\nplt.scatter(x, y, clip_on=False)\n```\n\n", "metadata": {"problem_id": 640, "library_problem_id": 129, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"id": 641, "code": "```python\nplt.scatter(x, y, color='red', edgecolors='black')\nplt.show()\n```\n\n", "metadata": {"problem_id": 641, "library_problem_id": 130, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 130}}
{"id": 642, "code": "```python\nfig, ax = plt.subplots(2, 2, figsize=(15, 15))\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y)\nax[1, 0].plot(x, y)\nax[1, 1].plot(x, y)\nplt.show()\n```\n\n", "metadata": {"problem_id": 642, "library_problem_id": 131, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 131}}
{"id": 643, "code": "```python\nplt.hist(x, bins=5, range=(0, 10), rwidth=0.8)\nplt.show()\n```\n\n", "metadata": {"problem_id": 643, "library_problem_id": 132, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 132}}
{"id": 644, "code": "```python\nplt.plot(x, y)\nplt.fill_between(x, y - error, y + error, alpha=0.2)\nplt.show()\n```\n\n", "metadata": {"problem_id": 644, "library_problem_id": 133, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 133}}
{"id": 645, "code": "```python\nplt.axhline(0, color='white')\nplt.axvline(0, color='white')\n```", "metadata": {"problem_id": 645, "library_problem_id": 134, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 646, "code": "```python\nax.errorbar(box_position, box_height, yerr=box_errors, ecolor=c, fmt=\"none\")\n```\n\n", "metadata": {"problem_id": 646, "library_problem_id": 135, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 135}}
{"id": 647, "code": "```python\nfig, axes = plt.subplots(1, 2, figsize=(10, 5))\n\naxes[0].plot(x, y)\naxes[0].set_title(\"Y\")\n\naxes[1].plot(a, z)\naxes[1].set_title(\"Z\", y=1.1)\n\nplt.show()\n```\n\n", "metadata": {"problem_id": 647, "library_problem_id": 136, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 136}}
{"id": 648, "code": "```python\nfig, axes = plt.subplots(4, 4, figsize=(5, 5))\nplt.subplots_adjust(wspace=0.5, hspace=0.5)\nfor ax in axes.ravel():\n    ax.plot(x, y)\n    ax.tick_params(labelbottom=True, labelleft=True)\nplt.show()\n```\n\n", "metadata": {"problem_id": 648, "library_problem_id": 137, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 649, "code": "```python\nplt.figure(figsize=(8, 8))\nplt.matshow(d, fignum=1)\nplt.show()\n```\n\n", "metadata": {"problem_id": 649, "library_problem_id": 138, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 138}}
{"id": 650, "code": "```python\nfig, ax = plt.subplots(figsize=(12, 4))\nax.axis('off')\ntable = ax.table(cellText=df.values, colLabels=df.columns, loc='center')\ntable.scale(1.2, 1.2)\nplt.show()\n```\n\n", "metadata": {"problem_id": 650, "library_problem_id": 139, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 139}}
{"id": 651, "code": "```python\nfig, ax = plt.subplots()\nax.plot(x, y)\nax.tick_params(axis='x', top=True, labeltop=True, bottom=True, labelbottom=True)\nplt.show()\n```\n\n", "metadata": {"problem_id": 651, "library_problem_id": 140, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 140}}
{"id": 652, "code": "```python\nfig, ax = plt.subplots()\nax.plot(x, y)\nax.tick_params(axis='x', top=True, labeltop=True, bottom=True, labelbottom=True)\nplt.show()\n```\n\n", "metadata": {"problem_id": 652, "library_problem_id": 141, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 140}}
{"id": 653, "code": "```python\nplt.plot(x, y)\nplt.xticks(x)\nplt.tick_params(axis='x', which='both', bottom=False, top=False)\nplt.show()\n```\n\n", "metadata": {"problem_id": 653, "library_problem_id": 142, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 140}}
{"id": 654, "code": "```python\ng = sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\",\n                    col=\"diet\", data=df, kind=\"strip\")\ng.set_titles(\"Group: {col_name}\")\nplt.show()\n```\n\n", "metadata": {"problem_id": 654, "library_problem_id": 143, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 143}}
{"id": 655, "code": "```python\ng = sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\",\n                    col=\"diet\", data=df, kind=\"strip\")\ng.set_xlabels(\"Exercise Time\")\ng.set_ylabels(\"Pulse Rate\")\n```\n\n", "metadata": {"problem_id": 655, "library_problem_id": 144, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 656, "code": "```python\nsns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\",\n            col=\"diet\", data=df)\nplt.ylabel(None)\nplt.show()\n```\n\n", "metadata": {"problem_id": 656, "library_problem_id": 145, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 657, "code": "```python\nplt.plot(x, y, label=\"y\")\nplt.legend(fontsize=8)\nplt.show()\n```\n\n", "metadata": {"problem_id": 657, "library_problem_id": 146, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 146}}
{"id": 658, "code": "```python\nplt.figure(figsize=(5, 5), dpi=300)\nplt.plot(x, y)\nplt.show()\n```\n\n", "metadata": {"problem_id": 658, "library_problem_id": 147, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 147}}
{"id": 659, "code": "```python\nplt.plot(x, y, label=\"y\")\nplt.legend(frameon=False)\nplt.show()\n```\n\n", "metadata": {"problem_id": 659, "library_problem_id": 148, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 660, "code": "```python\nplt.plot(t, a, label='sin(t)')\nplt.plot(t, b, label='cos(t)')\nplt.plot(t, c, label='sin(t) + cos(t)')\nplt.xlabel('t')\nplt.ylabel('amplitude')\nplt.title('Sine and Cosine Waves')\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n\n</code>", "metadata": {"problem_id": 660, "library_problem_id": 149, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 149}}
{"id": 661, "code": "```python\nsns.stripplot(data=df, x=\"sex\", y=\"bill_length_mm\", hue=\"species\")\nplt.legend([],[], frameon=False)\nplt.show()\n```\n\n", "metadata": {"problem_id": 661, "library_problem_id": 150, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 150}}
{"id": 662, "code": "```python\ng = sns.FacetGrid(df, row=\"b\")\ng.map(sns.pointplot, \"a\", \"c\")\nfor ax in g.axes.flat:\n    ax.set_xticks(np.arange(0, 30, 1))\n    ax.set_xticklabels(np.arange(0, 30, 2))\nplt.show()\n```\n\n", "metadata": {"problem_id": 662, "library_problem_id": 151, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 663, "code": "```python\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x, y, z)\nax.view_init(elev=50, azim=100)\nplt.show()\n```\n\n", "metadata": {"problem_id": 663, "library_problem_id": 152, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 152}}
{"id": 664, "code": "```python\nplt.plot(x, y)\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.tick_params(axis='both', which='both', labelbottom=False, labelleft=False)\nplt.show()\n```\n\n", "metadata": {"problem_id": 664, "library_problem_id": 153, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 153}}
{"id": 665, "code": "```python\ngs = gridspec.GridSpec(nrow, ncol)\ngs.update(wspace=0.00, hspace=0.00)\nfor row in range(nrow):\n    for col in range(ncol):\n        ax = plt.subplot(gs[row, col])\n        ax.imshow(x)\n        ax.set_xticks([])\n        ax.set_yticks([])\n```\n\n", "metadata": {"problem_id": 665, "library_problem_id": 154, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"id": 666, "code": "```python\nx.assign(1)\nresult = x.numpy()\n```\n\n</code>", "metadata": {"problem_id": 666, "library_problem_id": 0, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 667, "code": "```python\nx.assign(114514)\nresult = x.numpy()\n```\n\n</code>", "metadata": {"problem_id": 667, "library_problem_id": 1, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 668, "code": "```python\nnum_classes = 10\nlabels_tensor = tf.constant(labels)\none_hot = tf.one_hot(labels_tensor, depth=num_classes)\nresult = tf.cast(one_hot, dtype=tf.int32)\n```\n\n</code>", "metadata": {"problem_id": 668, "library_problem_id": 2, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 2}}
{"id": 669, "code": "```python\nnum_classes = 10\nlabels_tensor = tf.constant(labels, dtype=tf.int32)\none_hot_tensor = tf.one_hot(labels_tensor, depth=num_classes, on_value=0, off_value=1, dtype=tf.int32)\nresult = tf.where(tf.equal(one_hot_tensor, 0), tf.zeros_like(one_hot_tensor, dtype=tf.int32) + 0, tf.zeros_like(one_hot_tensor, dtype=tf.int32) + 1)\n```\n\n</code>", "metadata": {"problem_id": 669, "library_problem_id": 3, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 670, "code": "```python\nnum_classes = 10\nnum_labels = len(labels)\nresult = tf.zeros((num_labels, num_classes), dtype=tf.int32)\nindices = tf.range(num_labels)\nupdates = tf.ones(num_labels, dtype=tf.int32)\nresult = tf.tensor_scatter_nd_update(result, tf.stack([indices, labels], axis=1), updates)\nresult = tf.reverse(result, axis=[1])\n```\n\n</code>", "metadata": {"problem_id": 670, "library_problem_id": 4, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 671, "code": "```python\n    num_classes = 10\n    result = tf.one_hot(labels, depth=num_classes, dtype=tf.int32)\n    return result\n```\n\n</code>", "metadata": {"problem_id": 671, "library_problem_id": 5, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 2}}
{"id": 672, "code": "```python\nnum_classes = 10\nresult = tf.constant([[1]*num_classes], dtype=tf.int32)\nfor label in labels:\n    temp = [1]*num_classes\n    temp[label] = 0\n    result = tf.concat([result, [temp]], axis=0)\nresult = result[1:,]\nresult = tf.cast(result, dtype=tf.int32)\n```\n\n</code>", "metadata": {"problem_id": 672, "library_problem_id": 6, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 673, "code": "```python\ndef my_map_func(i):\n  return [i, i+1, i+2]\nds = tf.data.Dataset.from_tensor_slices(input)\nds = ds.flat_map(lambda input: tf.data.Dataset.from_tensor_slices(tf.compat.v1.py_func(\n  func=my_map_func, inp=[input], Tout=[tf.int64, tf.int64, tf.int64]\n)))\nelement = tf.compat.v1.data.make_one_shot_iterator(ds).get_next()\nresult = []\nwith tf.compat.v1.Session() as sess:\n  for _ in range(9):\n    result.append(sess.run(element))\n```\n\n</code>", "metadata": {"problem_id": 673, "library_problem_id": 7, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 7}}
{"id": 674, "code": "```python\n    ds = tf.data.Dataset.from_tensor_slices(input)\n    ds = ds.flat_map(lambda x: tf.data.Dataset.from_tensor_slices(tf.range(x, x + 3)))\n    iterator = tf.compat.v1.data.make_one_shot_iterator(ds)\n    next_element = iterator.get_next()\n    result = []\n    with tf.compat.v1.Session() as sess:\n        try:\n            while True:\n                result.append(sess.run(next_element))\n        except tf.errors.OutOfRangeError:\n            pass\n    return result\n```\n\n</code>", "metadata": {"problem_id": 674, "library_problem_id": 8, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 7}}
{"id": 675, "code": "```python\nmax_len = 8\nrange_tensor = tf.range(max_len)\nlengths_tensor = tf.expand_dims(tf.convert_to_tensor(lengths), axis=1)\nmask = tf.cast(range_tensor < lengths_tensor, dtype=tf.int32)\nresult = mask\n```\n\n</code>", "metadata": {"problem_id": 675, "library_problem_id": 9, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 676, "code": "```python\nmask = tf.sequence_mask(lengths, maxlen=8)\nresult = tf.cast(tf.logical_not(mask), dtype=tf.int32)\n```\n\n</code>", "metadata": {"problem_id": 676, "library_problem_id": 10, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 677, "code": "```python\nmax_len = 8\nrange_tensor = tf.range(max_len)\nlengths_tensor = tf.constant(lengths)\nmask = range_tensor >= (max_len - lengths_tensor[:, tf.newaxis])\nresult = tf.cast(mask, tf.float32)\n```\n\n</code>", "metadata": {"problem_id": 677, "library_problem_id": 11, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 678, "code": "```python\n    max_len = 8\n    mask = tf.sequence_mask(lengths, maxlen=max_len)\n    mask = tf.cast(mask, dtype=tf.int32)\n    return mask\n```\n\n</code>", "metadata": {"problem_id": 678, "library_problem_id": 12, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 679, "code": "```python\nmax_len = 8\nlengths_tensor = tf.constant(lengths)\nrange_tensor = tf.range(max_len)\nmask = tf.cast(tf.greater(lengths_tensor[:, tf.newaxis], range_tensor), dtype=tf.float32)\nresult = mask\n```\n\n</code>", "metadata": {"problem_id": 679, "library_problem_id": 13, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 680, "code": "```python\na_reshaped = tf.reshape(a, [-1, 1])\nb_reshaped = tf.reshape(b, [1, -1])\na_tiled = tf.tile(a_reshaped, [1, tf.shape(b)[0]])\nb_tiled = tf.tile(b_reshaped, [tf.shape(a)[0], 1])\nresult = tf.stack([a_tiled, b_tiled], axis=-1)\nresult = tf.reshape(result, [-1, 2])\n```\n\n</code>", "metadata": {"problem_id": 680, "library_problem_id": 14, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 681, "code": "```python\n    a_reshaped = tf.reshape(a, [-1, 1])\n    b_reshaped = tf.reshape(b, [1, -1])\n    \n    a_tiled = tf.tile(a_reshaped, [1, tf.shape(b)[0]])\n    b_tiled = tf.tile(b_reshaped, [tf.shape(a)[0], 1])\n    \n    result = tf.stack([tf.reshape(a_tiled, [-1]), tf.reshape(b_tiled, [-1])], axis=1)\n    return result\n```\n\n</code>", "metadata": {"problem_id": 681, "library_problem_id": 15, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 14}}
{"id": 682, "code": "```python\nresult = tf.reshape(a, (50, 100, 512))\n```\n\n</code>", "metadata": {"problem_id": 682, "library_problem_id": 16, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 683, "code": "```python\nresult = tf.reshape(a, (50, 100, 1, 512))\n```\n\n</code>", "metadata": {"problem_id": 683, "library_problem_id": 17, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 16}}
{"id": 684, "code": "```python\nresult = tf.reshape(a, (1, 50, 100, 1, 512))\n```\n\n</code>", "metadata": {"problem_id": 684, "library_problem_id": 18, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 685, "code": "```python\nresult = tf.reduce_sum(A, axis=1)\n```\n\n</code>", "metadata": {"problem_id": 685, "library_problem_id": 19, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 19}}
{"id": 686, "code": "```python\nresult = tf.math.reduce_prod(A, axis=1)\n```\n\n</code>", "metadata": {"problem_id": 686, "library_problem_id": 20, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 19}}
{"id": 687, "code": "```python\nresult = tf.math.reciprocal(A)\n```\n\n</code>", "metadata": {"problem_id": 687, "library_problem_id": 21, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 19}}
{"id": 688, "code": "```python\nresult = tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=1)\n```\n\n</code>", "metadata": {"problem_id": 688, "library_problem_id": 22, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 22}}
{"id": 689, "code": "```python\nresult = tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=0)\n```\n\n</code>", "metadata": {"problem_id": 689, "library_problem_id": 23, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 22}}
{"id": 690, "code": "```python\n    squared_difference = tf.square(tf.subtract(A, B))\n    result = tf.reduce_sum(squared_difference, axis=1)\n    return result\n```\n\n</code>", "metadata": {"problem_id": 690, "library_problem_id": 24, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 22}}
{"id": 691, "code": "```python\nindices = tf.stack([y, z], axis=1)\nm = tf.gather_nd(x, indices)\n```\n\n</code>", "metadata": {"problem_id": 691, "library_problem_id": 25, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 692, "code": "```python\nindices = tf.stack([row, col], axis=1)\nresult = tf.gather_nd(x, indices)\n```\n\n</code>", "metadata": {"problem_id": 692, "library_problem_id": 26, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 693, "code": "```python\n    indices = tf.stack([y, z], axis=1)\n    result = tf.gather_nd(x, indices)\n    return result\n```\n\n</code>", "metadata": {"problem_id": 693, "library_problem_id": 27, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 694, "code": "```python\nresult = tf.einsum('ink,jnk->ijn', A, B)\n```\n\n</code>", "metadata": {"problem_id": 694, "library_problem_id": 28, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 695, "code": "```python\nresult = tf.einsum('bij,bik->bjk', A, B)\n```\n\n</code>", "metadata": {"problem_id": 695, "library_problem_id": 29, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 696, "code": "```python\nresult = tf.constant([s.decode('utf-8') for s in x])\n```\n\n</code>", "metadata": {"problem_id": 696, "library_problem_id": 30, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 697, "code": "```python\n    result = tf.strings.unicode_decode(x, 'UTF-8').to_list()\n    return result\n```\n\n</code>", "metadata": {"problem_id": 697, "library_problem_id": 31, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 30}}
{"id": 698, "code": "```python\nmask = tf.cast(x != 0, dtype=tf.float32)\nsum_x = tf.reduce_sum(x, axis=-2)\ncount_x = tf.reduce_sum(mask, axis=-2)\nresult = sum_x / count_x\n```\n\n</code>", "metadata": {"problem_id": 698, "library_problem_id": 32, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 699, "code": "```python\nmask = tf.cast(x != 0, dtype=tf.float32)\ncounts = tf.reduce_sum(mask, axis=-2, keepdims=True)\nmean = tf.reduce_sum(x, axis=-2, keepdims=True) / counts\nvariance = tf.reduce_sum(tf.square(x - mean) * mask, axis=-2) / counts\nresult = tf.where(counts > 0, variance, tf.zeros_like(variance))\n```\n\n</code>", "metadata": {"problem_id": 699, "library_problem_id": 33, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 700, "code": "```python\n    mask = tf.cast(tf.reduce_sum(tf.abs(x), axis=-1) > 0, tf.float32)\n    masked_sum = tf.reduce_sum(x, axis=-2)\n    number_of_valid_entries = tf.reduce_sum(mask, axis=-1, keepdims=True)\n    result = masked_sum / number_of_valid_entries\n    return result\n```\n\n</code>", "metadata": {"problem_id": 700, "library_problem_id": 34, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 701, "code": "<code>\ntf.random.set_seed(10)\nA = tf.random.normal([100,100])\nB = tf.random.normal([100,100])\nresult = tf.reduce_sum(tf.matmul(A,B))\n</code></code>", "metadata": {"problem_id": 701, "library_problem_id": 35, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 702, "code": "```python\nresult = tf.argmax(a, axis=1)\n```\n\n</code>", "metadata": {"problem_id": 702, "library_problem_id": 36, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 703, "code": "```python\nresult = tf.argmax(a, axis=1)\n```\n\n</code>", "metadata": {"problem_id": 703, "library_problem_id": 37, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 704, "code": "```python\n    result = tf.argmax(a, axis=1)\n    return result\n```\n\n</code>", "metadata": {"problem_id": 704, "library_problem_id": 38, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 36}}
{"id": 705, "code": "```python\nresult = tf.argmin(a, axis=0)\n```\n\n</code>", "metadata": {"problem_id": 705, "library_problem_id": 39, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 706, "code": "```python\nimport numpy as np\nXtrain = np.random.rand(100, inputdim)\nytrain = np.random.rand(100, outputdim)\nXtest = np.random.rand(50, inputdim)\nytest = np.random.rand(50, outputdim)\nhistory = model.fit(x=Xtrain,y=ytrain,validation_data=(Xtest,ytest),batch_size=32,epochs=epochs, verbose=0)\nmodel.save(\"my_model\")\n```\n\n</code>", "metadata": {"problem_id": 706, "library_problem_id": 40, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 707, "code": "```python\ntf.random.set_seed(seed_x)\nresult = tf.random.uniform(shape=[10], minval=1, maxval=5, dtype=tf.int32)\n```\n\n</code>", "metadata": {"problem_id": 707, "library_problem_id": 41, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 708, "code": "```python\ntf.random.set_seed(seed_x)\nresult = tf.random.uniform(shape=[114], minval=2, maxval=6, dtype=tf.int32)\n```\n\n</code>", "metadata": {"problem_id": 708, "library_problem_id": 42, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 41}}
{"id": 709, "code": "```python\n    tf.random.set_seed(seed_x)\n    result = tf.random.uniform(shape=[10], minval=1, maxval=5, dtype=tf.int32)\n    return result\n```\n\n</code>", "metadata": {"problem_id": 709, "library_problem_id": 43, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 710, "code": "```python\nresult = tf.version.VERSION\n```\n\n</code>", "metadata": {"problem_id": 710, "library_problem_id": 44, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 711, "code": "```python\nz = np.log(x)\ncoeffs = np.polyfit(z, y, 1)\nresult = coeffs\n```\n\n</code>", "metadata": {"problem_id": 711, "library_problem_id": 0, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 712, "code": "```python\nz = np.log(x)\ncoeffs = np.polyfit(z, y, 1)\nresult = np.array([coeffs[1], coeffs[0]])\n```\n\n</code>", "metadata": {"problem_id": 712, "library_problem_id": 1, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 0}}
{"id": 713, "code": "```python\ndef func(x, A, B, C):\n    return A*np.exp(B*x) + C\npopt, pcov = scipy.optimize.curve_fit(func, x, y, p0=p0)\nresult = popt\n```\n\n</code>", "metadata": {"problem_id": 713, "library_problem_id": 2, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 714, "code": "```python\nstatistic, p_value = stats.ks_2samp(x, y)\n```\n\n</code>", "metadata": {"problem_id": 714, "library_problem_id": 3, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 3}}
{"id": 715, "code": "```python\ntest_statistic, p_value = stats.ks_2samp(x, y)\nresult = p_value < alpha\n```\n\n</code>", "metadata": {"problem_id": 715, "library_problem_id": 4, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 3}}
{"id": 716, "code": "```python\ndef f(x):\n    a, b, c = x\n    return ((a+b-c)-2)**2 + ((3*a-b-c))**2 + sin(b) + cos(b) + 4\nresult = optimize.minimize(f, initial_guess).x.tolist()\n```\n\n</code>", "metadata": {"problem_id": 716, "library_problem_id": 5, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 5}}
{"id": 717, "code": "```python\np_values = scipy.stats.norm.cdf(z_scores)\n```\n\n</code>", "metadata": {"problem_id": 717, "library_problem_id": 6, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 718, "code": "```python\np_values = scipy.stats.norm.cdf(z_scores)\n```\n\n</code>", "metadata": {"problem_id": 718, "library_problem_id": 7, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 6}}
{"id": 719, "code": "```python\nz_scores = scipy.stats.norm.ppf(p_values)\n```\n\n</code>", "metadata": {"problem_id": 719, "library_problem_id": 8, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 6}}
{"id": 720, "code": "```python\nsigma = stddev\nmu = np.log(mu)\nresult = stats.lognorm.cdf(x, s=sigma, loc=0, scale=np.exp(mu))\n```\n\n</code>", "metadata": {"problem_id": 720, "library_problem_id": 9, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 721, "code": "```python\nexpected_value = np.exp(mu + (stddev**2)/2)\nmedian = np.exp(mu)\n```\n\n</code>", "metadata": {"problem_id": 721, "library_problem_id": 10, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 722, "code": "```python\nresult = sa.multiply(sb)\n```\n\n</code>", "metadata": {"problem_id": 722, "library_problem_id": 11, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 723, "code": "```python\n    sB = sparse.diags(sB.toarray().flatten())\n    return sA.multiply(sB)\n```\n\n</code>", "metadata": {"problem_id": 723, "library_problem_id": 12, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 724, "code": "```python\ninterpolator = scipy.interpolate.LinearNDInterpolator(points, V)\nresult = interpolator(request)[0]\n```\n\n</code>", "metadata": {"problem_id": 724, "library_problem_id": 13, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 13}}
{"id": 725, "code": "```python\ninterpolator = scipy.interpolate.LinearNDInterpolator(points, V)\nresult = interpolator(request).tolist()\n```\n\n</code>", "metadata": {"problem_id": 725, "library_problem_id": 14, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 13}}
{"id": 726, "code": "```python\ndata_rot = rotate(data_orig,angle)\nx_center, y_center = np.array(data_orig.shape[:2])/2.\nx0_centered, y0_centered = x0 - x_center, y0 - y_center\ntheta = np.radians(angle)\nxrot_centered = np.cos(theta) * x0_centered - np.sin(theta) * y0_centered\nyrot_centered = np.sin(theta) * x0_centered + np.cos(theta) * y0_centered\nxrot, yrot = xrot_centered + np.array(data_rot.shape[:2])/2.\n```\n\n</code>", "metadata": {"problem_id": 726, "library_problem_id": 15, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 727, "code": "```python\nresult = M.diagonal()\n```\n\n</code>", "metadata": {"problem_id": 727, "library_problem_id": 16, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 728, "code": "```python\ntimes_scaled = np.array(times) / T\nresult = stats.kstest(times_scaled, 'uniform')\n```\n\n</code>", "metadata": {"problem_id": 728, "library_problem_id": 17, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 729, "code": "```python\n    times_scaled = np.array(times) / T\n    result = stats.kstest(times_scaled, 'uniform')\n    return result\n```\n\n</code>", "metadata": {"problem_id": 729, "library_problem_id": 18, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 17}}
{"id": 730, "code": "```python\ntimes_scaled = np.array(times) / T\nks_statistic, p_value = stats.kstest(times_scaled, 'uniform')\nalpha = 0.05\nresult = p_value > alpha\n```\n\n</code>", "metadata": {"problem_id": 730, "library_problem_id": 19, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 17}}
{"id": 731, "code": "```python\nFeature = sparse.hstack((c1, c2))\n```\n\n</code>", "metadata": {"problem_id": 731, "library_problem_id": 20, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 732, "code": "```python\nFeature = sparse.hstack((c1, c2))\n```\n\n</code>", "metadata": {"problem_id": 732, "library_problem_id": 21, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 20}}
{"id": 733, "code": "```python\nFeature = sparse.vstack([c1, c2])\n```\n\n</code>", "metadata": {"problem_id": 733, "library_problem_id": 22, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 20}}
{"id": 734, "code": "```python\ncost_matrix = scipy.spatial.distance_matrix(points1, points2)\nrow_ind, col_ind = scipy.optimize.linear_sum_assignment(cost_matrix)\nresult = col_ind\n```\n\n</code>", "metadata": {"problem_id": 734, "library_problem_id": 23, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 735, "code": "```python\ncost_matrix = scipy.spatial.distance.cdist(points1, points2, metric='cityblock')\nrow_ind, col_ind = scipy.optimize.linear_sum_assignment(cost_matrix)\nresult = col_ind\n```\n\n</code>", "metadata": {"problem_id": 735, "library_problem_id": 24, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 23}}
{"id": 736, "code": "```python\nb.setdiag(0)\nb.eliminate_zeros()\n```\n\n</code>", "metadata": {"problem_id": 736, "library_problem_id": 25, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 737, "code": "```python\nlabeled_img, num_labels = ndimage.label(img > threshold)\nresult = num_labels\n```\n\n</code>", "metadata": {"problem_id": 737, "library_problem_id": 26, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 738, "code": "```python\nlabeled_img, num_labels = ndimage.label(img < threshold)\nresult = num_labels\n```\n\n</code>", "metadata": {"problem_id": 738, "library_problem_id": 27, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 26}}
{"id": 739, "code": "```python\n    labeled_img, num_labels = ndimage.label(img > threshold)\n    return num_labels\n```\n\n</code>", "metadata": {"problem_id": 739, "library_problem_id": 28, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 740, "code": "```python\nlabeled_img, num_labels = ndimage.label(img > threshold)\ncenters_of_mass = ndimage.center_of_mass(img, labeled_img, range(1, num_labels + 1))\ndistances = [np.sqrt(center[0]**2 + center[1]**2) for center in centers_of_mass]\nresult = distances\n```\n\n</code>", "metadata": {"problem_id": 740, "library_problem_id": 29, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 26}}
{"id": 741, "code": "```python\nM_transpose = M.transpose()\nM = (M + M_transpose)/2\n```\n\n</code>", "metadata": {"problem_id": 741, "library_problem_id": 30, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 742, "code": "```python\n    sA = sA.maximum(sA.T)\n    return sA\n```\n\n</code>", "metadata": {"problem_id": 742, "library_problem_id": 31, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 30}}
{"id": 743, "code": "```python\nkernel = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])\nisolated = scipy.ndimage.convolve(square, kernel) == 0\nsquare[isolated & (square == 1)] = 0\n```\n\n</code>", "metadata": {"problem_id": 743, "library_problem_id": 32, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 744, "code": "```python\nkernel = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])\nisolated = scipy.ndimage.convolve(square > 0, kernel) == 0\nsquare[isolated & (square > 0)] = 0\n```\n\n</code>", "metadata": {"problem_id": 744, "library_problem_id": 33, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 745, "code": "```python\nnon_zeros = col.data\nmean = np.mean(non_zeros)\nstandard_deviation = np.std(non_zeros)\n```\n\n</code>", "metadata": {"problem_id": 745, "library_problem_id": 34, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 34}}
{"id": 746, "code": "```python\nMax = col.max()\nMin = col.min()\n```\n\n</code>", "metadata": {"problem_id": 746, "library_problem_id": 35, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 34}}
{"id": 747, "code": "```python\ndata = col.data\nif len(data) == 0:\n    Median = 0\n    Mode = 0\nelse:\n    Median = np.median(data)\n    vals, counts = np.unique(data, return_counts=True)\n    Mode = vals[np.argmax(counts)]\n```\n\n</code>", "metadata": {"problem_id": 747, "library_problem_id": 36, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 34}}
{"id": 748, "code": "```python\ndef fourier(x, *a):\n    ret = 0\n    for i in range(degree):\n        ret += a[i] * np.cos((i+1) * np.pi / tau * x)\n    return ret\npopt, pcov = curve_fit(fourier, z, Ua, p0=[1.0]*degree)\n```\n\n</code>", "metadata": {"problem_id": 748, "library_problem_id": 37, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 749, "code": "```python\nunique_ids = np.unique(example_array[example_array > 0])\ncoords = {}\nfor unique_id in unique_ids:\n    coords[unique_id] = np.argwhere(example_array == unique_id)\ndistances = []\nfor id1 in unique_ids:\n    for id2 in unique_ids:\n        if id1 != id2:\n            min_dist = np.inf\n            for coord1 in coords[id1]:\n                for coord2 in coords[id2]:\n                    dist = scipy.spatial.distance.euclidean(coord1, coord2)\n                    min_dist = min(min_dist, dist)\n            distances.append([id1, id2, min_dist - 1])\nresult = np.array(distances)\n```\n\n</code>", "metadata": {"problem_id": 749, "library_problem_id": 38, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 750, "code": "```python\nids = np.unique(example_array)\nids = ids[ids != 0]\ncoords = {}\nfor i in ids:\n    coords[i] = np.argwhere(example_array == i)\nmin_distances = []\nfor id1 in ids:\n    for id2 in ids:\n        if id1 != id2:\n            min_dist = np.inf\n            for coord1 in coords[id1]:\n                for coord2 in coords[id2]:\n                    dist = np.sum(np.abs(coord1 - coord2)) - 1\n                    if dist < min_dist:\n                        min_dist = dist\n            min_distances.append([id1, id2, min_dist])\nresult = np.array(min_distances)\n```\n\n</code>", "metadata": {"problem_id": 750, "library_problem_id": 39, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 38}}
{"id": 751, "code": "```python\n    unique_ids = np.unique(example_array)\n    unique_ids = unique_ids[unique_ids != 0]\n    coords = {}\n    for unique_id in unique_ids:\n        coords[unique_id] = np.argwhere(example_array == unique_id)\n    pairwise_distances = []\n    for id1 in unique_ids:\n        for id2 in unique_ids:\n            if id1 != id2:\n                min_dist = np.inf\n                for coord1 in coords[id1]:\n                    for coord2 in coords[id2]:\n                        dist = scipy.spatial.distance.euclidean(coord1, coord2)\n                        min_dist = min(min_dist, dist)\n                pairwise_distances.append([id1, id2, min_dist])\n    return np.array(pairwise_distances)\n```\n\n</code>", "metadata": {"problem_id": 751, "library_problem_id": 40, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"id": 752, "code": "```python\nresult = np.zeros((5, 100))\nfor i in range(5):\n    tck = interpolate.splrep(x[:, i], y[:, i], k = 2, s = 4)\n    result[i, :] = interpolate.splev(x_val, tck, der = 0)\n```\n\n</code>", "metadata": {"problem_id": 752, "library_problem_id": 41, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 753, "code": "```python\ndata = [x1, x2, x3, x4]\nresult = ss.anderson_ksamp(data)\nstatistic = result.statistic\ncritical_values = result.critical_values\nsignificance_level = result.significance_level\n```\n\n</code>", "metadata": {"problem_id": 753, "library_problem_id": 42, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 754, "code": "```python\nresult = ss.anderson_ksamp([x1,x2])\nif result.significance_level > 0.05:\n    result = True\nelse:\n    result = False\n```\n\n</code>", "metadata": {"problem_id": 754, "library_problem_id": 43, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 42}}
{"id": 755, "code": "```python\ndef tau_corr(df, window):\n    cols = df.columns\n    new_cols = []\n    for i in range(len(cols)):\n        for j in range(i+1, len(cols)):\n            new_col_name = cols[i] + cols[j]\n            new_cols.append(new_col_name)\n            df[new_col_name] = np.nan\n            for k in range(window-1, len(df)):\n                x = df[cols[i]][k-window+1:k+1]\n                y = df[cols[j]][k-window+1:k+1]\n                tau, p_value = stats.kendalltau(x, y)\n                df[new_col_name][k] = tau\n    return df\ndf = tau_corr(df.copy(), 3)\n```\n\n</code>", "metadata": {"problem_id": 755, "library_problem_id": 44, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 44}}
{"id": 756, "code": "```python\nresult = sa.nnz == 0\n```\n\n</code>", "metadata": {"problem_id": 756, "library_problem_id": 45, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 757, "code": "```python\nresult = sa.nnz == 0\n```\n\n</code>", "metadata": {"problem_id": 757, "library_problem_id": 46, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"id": 758, "code": "```python\nresult = block_diag(*a)\n```\n\n</code>", "metadata": {"problem_id": 758, "library_problem_id": 47, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 759, "code": "```python\nranksum_result = stats.ranksums(pre_course_scores, during_course_scores)\np_value = ranksum_result.pvalue\n```\n\n</code>", "metadata": {"problem_id": 759, "library_problem_id": 48, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 760, "code": "```python\n    return stats.ranksums(pre_course_scores, during_course_scores).pvalue\n```\n\n</code>", "metadata": {"problem_id": 760, "library_problem_id": 49, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 761, "code": "```python\nm4 = np.mean((a - np.mean(a))**4)\nm2 = np.mean((a - np.mean(a))**2)\nkurtosis_result = m4 / m2**2 - 3\n```\n\n</code>", "metadata": {"problem_id": 761, "library_problem_id": 50, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 762, "code": "```python\nkurtosis_result = scipy.stats.kurtosis(a, fisher=True, bias=False)\n```\n\n</code>", "metadata": {"problem_id": 762, "library_problem_id": 51, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 50}}
{"id": 763, "code": "```python\ninterpolated = scipy.interpolate.interp2d(t, s, z, kind='cubic')\nresult = [interpolated(ti, si)[0] for si, ti in zip(s, t)]\n```\n\n</code>", "metadata": {"problem_id": 763, "library_problem_id": 52, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 52}}
{"id": 764, "code": "```python\n    interpolated = scipy.interpolate.interp2d(x.ravel(), y.ravel(), z, kind='cubic')\n    result = [interpolated(s[i], t[i])[0] for i in range(len(s))]\n    return result\n```\n\n</code>", "metadata": {"problem_id": 764, "library_problem_id": 53, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 52}}
{"id": 765, "code": "```python\nresult = []\nfor point in extraPoints:\n    region = vor.point_region[vor.find_simplex(point)]\n    point_index = vor.regions.index(vor.regions[region])\n    result.append(point_index)\nimport numpy as np\nresult = np.array(result)\n```\n\n</code>", "metadata": {"problem_id": 765, "library_problem_id": 54, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 766, "code": "```python\nresult = []\nfor point in extraPoints:\n    region_index = vor.point_region[vor.find_simplex(point)]\n    result.append(region_index)\nimport numpy as np\nresult = np.array(result)\n```\n\n</code>", "metadata": {"problem_id": 766, "library_problem_id": 55, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 767, "code": "```python\nrow_ind = []\ncol_ind = []\ndata = []\nfor i, vector in enumerate(vectors):\n    for j, value in enumerate(vector):\n        row_ind.append(i)\n        col_ind.append(j)\n        data.append(value)\nresult = sparse.coo_matrix((data, (row_ind, col_ind)), shape=(len(vectors), max_vector_size))\n```\n\n</code>", "metadata": {"problem_id": 767, "library_problem_id": 56, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 768, "code": "```python\nb = scipy.ndimage.median_filter(a, size=3, origin=(0, -1))\n```\n\n</code>", "metadata": {"problem_id": 768, "library_problem_id": 57, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 769, "code": "```python\nresult = M[row, column]\n```\n\n</code>", "metadata": {"problem_id": 769, "library_problem_id": 58, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 770, "code": "```python\nresult = [M[r, c] for r, c in zip(row, column)]\n```\n\n</code>", "metadata": {"problem_id": 770, "library_problem_id": 59, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 771, "code": "```python\nnew_array = scipy.interpolate.interp1d(x, array, axis=0)(x_new)\n```\n\n</code>", "metadata": {"problem_id": 771, "library_problem_id": 60, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 60}}
{"id": 772, "code": "```python\ndev = abs((x-u)/o2)\nP_inner = scipy.integrate.quad(NDfx,-dev,dev)[0]\nP_outer = 1 - P_inner\nP = P_inner + P_outer/2\nprob = P\n```\n\n</code>", "metadata": {"problem_id": 772, "library_problem_id": 61, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 773, "code": "```python\n    dev = abs((x-u)/np.sqrt(o2))\n    P_inner = scipy.integrate.quad(NDfx,-dev,dev)[0]\n    P_outer = 1 - P_inner\n    P = (P_inner + P_outer)/2\n    return(P)\n```\n\n</code>", "metadata": {"problem_id": 773, "library_problem_id": 62, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 774, "code": "```python\nresult = sf.dct(np.eye(N), norm='ortho')\n```\n\n</code>", "metadata": {"problem_id": 774, "library_problem_id": 63, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 775, "code": "```python\nv1 = matrix[0,1:]\nv2 = matrix[1,:]\nv3 = matrix[2,:-1]\noffsets = [1,0,-1]\nresult = sparse.diags([v1, v2, v3], offsets, shape=(5, 5)).toarray()\n```\n\n</code>", "metadata": {"problem_id": 775, "library_problem_id": 64, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 776, "code": "```python\nresult = np.zeros((N+1, N+1))\nfor i in range(N+1):\n    result[i, :(i+1)] = scipy.stats.binom.pmf(range(i+1), i, p)\n```\n\n</code>", "metadata": {"problem_id": 776, "library_problem_id": 65, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 777, "code": "```python\nresult = df.apply(stats.zscore, axis=1)\n```\n\n</code>", "metadata": {"problem_id": 777, "library_problem_id": 66, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 778, "code": "```python\nresult = pd.DataFrame(stats.zscore(df, axis=0), index=df.index, columns=df.columns)\n```\n\n</code>", "metadata": {"problem_id": 778, "library_problem_id": 67, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 66}}
{"id": 779, "code": "```python\nzscore = df.apply(stats.zscore, axis=1)\ndf_final = pd.DataFrame()\nfor index in df.index:\n    df_final = pd.concat([df_final, pd.DataFrame({'sample1': ['data', 'zscore'], 'sample2': ['data', 'zscore'], 'sample3': ['data', 'zscore']}, index=[index+'   ',index+'\\t'])])\n    df_final.loc[index+'   '] = df.loc[index].values\n    df_final.loc[index+'\\t'] = zscore.loc[index].values\nresult = df_final\n```\n\n</code>", "metadata": {"problem_id": 779, "library_problem_id": 68, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 66}}
{"id": 780, "code": "```python\nzscore = df.apply(stats.zscore, axis=0)\ndf_styled = df.copy()\nfor col in df_styled.columns:\n    df_styled[col] = df_styled[col].apply(lambda x: f\"{x:.3f}\")\nzscore_styled = zscore.copy()\nfor col in zscore_styled.columns:\n    zscore_styled[col] = zscore_styled[col].apply(lambda x: f\"{x:.3f}\")\ndf_result = pd.DataFrame()\nfor index in df.index:\n    df_result = pd.concat([df_result, pd.DataFrame({col: [\"data\", \"zscore\"] + [df_styled.loc[index, col],zscore_styled.loc[index, col]] for col in df.columns}).set_index(0)], axis=0)\nresult = df_result\n```\n\n</code>", "metadata": {"problem_id": 780, "library_problem_id": 69, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 66}}
{"id": 781, "code": "```python\nresult = scipy.optimize.line_search(test_func,test_grad,starting_point,direction)\n```\n\n</code>", "metadata": {"problem_id": 781, "library_problem_id": 70, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 70}}
{"id": 782, "code": "```python\ny, x = np.indices(shape)\ncenter = np.array([(shape[0] - 1) / 2.0, (shape[1] - 1) / 2.0])\nresult = distance.cdist(np.dstack((y, x)).reshape(-1, 2), center.reshape(1, -1)).reshape(shape)\n```\n\n</code>", "metadata": {"problem_id": 782, "library_problem_id": 71, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 783, "code": "```python\nrows, cols = shape\ny, x = np.indices(shape)\ncenter_y, center_x = np.array(shape) / 2.0\nresult = np.abs(x - center_x) + np.abs(y - center_y)\n```\n\n</code>", "metadata": {"problem_id": 783, "library_problem_id": 72, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 71}}
{"id": 784, "code": "```python\n    rows, cols = shape\n    y, x = np.indices((rows, cols))\n    center_y, center_x = rows / 2, cols / 2\n    mid = np.array([center_y, center_x]).reshape(1, -1)\n    coords = np.stack((y, x), axis=-1).reshape(-1, 2)\n    distances = distance.cdist(coords, mid).reshape(rows, cols)\n    return distances\n```\n\n</code>", "metadata": {"problem_id": 784, "library_problem_id": 73, "library": "Scipy", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 71}}
{"id": 785, "code": "```python\nzoom_factors = (shape[0] / x.shape[0], shape[1] / x.shape[1])\nresult = scipy.ndimage.zoom(x, zoom_factors, order=1)\nresult = result[:shape[0], :shape[1]]\n```\n\n</code>", "metadata": {"problem_id": 785, "library_problem_id": 74, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 74}}
{"id": 786, "code": "```python\ndef objective(x, a, y):\n    y_predicted = np.sum(a * x**2, axis=1)\n    return np.sum((y - y_predicted)**2)\nresult = scipy.optimize.minimize(objective, x0, args=(a, y), method='L-BFGS-B')\nout = result.x\n```\n\n</code>", "metadata": {"problem_id": 786, "library_problem_id": 75, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 787, "code": "```python\ndef objective_function(x, a, y):\n    y_predicted = a.dot(x**2)\n    return np.sum((y - y_predicted)**2)\nbounds = [(x_lower_bounds[i], None) for i in range(len(x_lower_bounds))]\nout = scipy.optimize.minimize(objective_function, x0, args=(a, y), method='L-BFGS-B', bounds=bounds)\n```\n\n</code>", "metadata": {"problem_id": 787, "library_problem_id": 76, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 75}}
{"id": 788, "code": "```python\ndef dN1_dt_time_varying(t, N1):\n    return -100 * N1 + np.sin(t)\nsol = scipy.integrate.solve_ivp(fun=dN1_dt_time_varying, t_span=time_span, y0=[N0,], dense_output=True)\nresult = sol.y\n```\n\n</code>", "metadata": {"problem_id": 788, "library_problem_id": 77, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 789, "code": "```python\ndef dN1_dt_time_varying(t, N1):\n    input_val = t - np.sin(t) if 0 < t < 2 * np.pi else 2 * np.pi\n    return -100 * (N1 - input_val)\nsol = scipy.integrate.solve_ivp(fun=dN1_dt_time_varying, t_span=time_span, y0=[N0,], dense_output=True)\nresult = sol.y\n```\n\n</code>", "metadata": {"problem_id": 789, "library_problem_id": 78, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 77}}
{"id": 790, "code": "```python\ndef dN1_dt_varying(t, N1):\n    return -100 * N1 - np.cos(t)\nsol = scipy.integrate.solve_ivp(fun=dN1_dt_varying, t_span=time_span, y0=[N0,], dense_output=True)\nresult = sol.y\n```\n\n</code>", "metadata": {"problem_id": 790, "library_problem_id": 79, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 77}}
{"id": 791, "code": "```python\nfor t in range (4):\n    def const(x, t=t):    \n        y=x[t]\n        return y\n    cons.append({'type':'ineq', 'fun': const})\nout=minimize(function, x0, method=\"SLSQP\", constraints=cons)\nx=out[\"x\"]\n```\n\n</code>", "metadata": {"problem_id": 791, "library_problem_id": 80, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 792, "code": "```python\nresult = sparse.vstack((sa, sb))\n```\n\n</code>", "metadata": {"problem_id": 792, "library_problem_id": 81, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 81}}
{"id": 793, "code": "```python\nresult = sparse.hstack((sa, sb))\n```\n\n</code>", "metadata": {"problem_id": 793, "library_problem_id": 82, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 81}}
{"id": 794, "code": "```python\ndef integrand(x, c):\n    return 2 * c * x\nI = []\nfor c in range(1,6):\n    result, error = scipy.integrate.quad(integrand, low, high, args=(c,))\n    I.append(result)\n```\n\n</code>", "metadata": {"problem_id": 794, "library_problem_id": 83, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 83}}
{"id": 795, "code": "```python\n    I=[]\n    for n in c:\n        result,error = scipy.integrate.quad(lambda x: 2*n*x,low,high)\n        I.append(result)\n    return I\n```\n\n</code>", "metadata": {"problem_id": 795, "library_problem_id": 84, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 83}}
{"id": 796, "code": "```python\nfor key in V.keys():\n    V[key] += x\n```\n\n</code>", "metadata": {"problem_id": 796, "library_problem_id": 85, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 797, "code": "```python\nV.data[:] += x\n```\n\n</code>", "metadata": {"problem_id": 797, "library_problem_id": 86, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 798, "code": "```python\nV.data[:] += x\nV.data[:] += y\n```\n\n</code>", "metadata": {"problem_id": 798, "library_problem_id": 87, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 799, "code": "```python\nfor Col in range(sa.shape[1]):\n    Column = sa[:,Col].tocsc()\n    Column_data = Column.data\n    List = [x**2 for x in Column_data]\n    Len = math.sqrt(sum(List))\n    Column.data = Column.data / Len\n    sa[:,Col] = Column\n```\n\n</code>", "metadata": {"problem_id": 799, "library_problem_id": 88, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 800, "code": "```python\nfor col in range(sa.shape[1]):\n    col_data = sa[:, col].data\n    norm = np.linalg.norm(col_data)\n    if norm > 0:\n        col_data /= norm\n```\n\n</code>", "metadata": {"problem_id": 800, "library_problem_id": 89, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 88}}
{"id": 801, "code": "```python\na = (a > 0).astype(int)\n```\n\n</code>", "metadata": {"problem_id": 801, "library_problem_id": 90, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 802, "code": "```python\na = np.where(a > 0, 0, 1)\na = np.triu(a, 1)\n```\n\n</code>", "metadata": {"problem_id": 802, "library_problem_id": 91, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"id": 803, "code": "```python\nclosest_indices = []\nfor centroid in centroids:\n    distances = scipy.spatial.distance.cdist(np.expand_dims(centroid, axis=0), data)\n    closest_index = np.argmin(distances)\n    closest_indices.append(closest_index)\nresult = np.array(closest_indices)\n```\n\n</code>", "metadata": {"problem_id": 803, "library_problem_id": 92, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 92}}
{"id": 804, "code": "```python\nclosest_indices = []\nfor centroid in centroids:\n    distances = scipy.spatial.distance.cdist(data, [centroid])\n    closest_index = np.argmin(distances)\n    closest_indices.append(closest_index)\nresult = data[closest_indices]\n```\n\n</code>", "metadata": {"problem_id": 804, "library_problem_id": 93, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 92}}
{"id": 805, "code": "```python\nresult = []\nfor centroid in centroids:\n    distances = scipy.spatial.distance.cdist(centroid.reshape(1, -1), data)\n    closest_indices = np.argsort(distances)[0]\n    k_closest_index = closest_indices[k-1]\n    result.append(k_closest_index)\nresult = np.array(result)\n```\n\n</code>", "metadata": {"problem_id": 805, "library_problem_id": 94, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 92}}
{"id": 806, "code": "```python\ndef solve_for_a(x, b):\n    func = lambda a: eqn(x, a, b)\n    return fsolve(func, x0=0.5)[0]\nresult = np.array([solve_for_a(x, b) for x, b in zip(xdata, bdata)])\n```\n\n</code>", "metadata": {"problem_id": 806, "library_problem_id": 95, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 807, "code": "```python\ndef solve_for_b(x, a):\n    def func(b):\n        return eqn(x, a, b)\n    roots = fsolve(func, x0=[-10, 10])\n    roots = sorted(roots)\n    return roots[0], roots[1]\n\nresult = [solve_for_b(x, a) for x, a in zip(xdata, adata)]\n```\n\n</code>", "metadata": {"problem_id": 807, "library_problem_id": 96, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 95}}
{"id": 808, "code": "```python\ndef cdf(x):\n    return integrate.quad(bekkers, range_start, x, args=(estimated_a, estimated_m, estimated_d))[0]\nkstest_result = stats.kstest(sample_data, cdf, alternative='two-sided')\nresult = kstest_result\n```\n\n</code>", "metadata": {"problem_id": 808, "library_problem_id": 97, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 809, "code": "```python\nbekkers_cdf = lambda x: integrate.quad(bekkers, range_start, x, args=(estimated_a, estimated_m, estimated_d))[0]\nkstest_result = stats.kstest(sample_data, bekkers_cdf)\nalpha = 0.05\nreject = kstest_result.pvalue < alpha\nresult = reject\n```\n\n</code>", "metadata": {"problem_id": 809, "library_problem_id": 98, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 97}}
{"id": 810, "code": "```python\ndf['Time'] = pd.to_datetime(df['Time'])\ndf = df.set_index('Time')\nwindow_size = 5\nintegral_df = df['A'].rolling(window_size).apply(lambda x: integrate.trapz(x, dx=5), raw=False)\n```\n\n</code>", "metadata": {"problem_id": 810, "library_problem_id": 99, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 99}}
{"id": 811, "code": "```python\nresult = scipy.interpolate.griddata(x, y, eval, method='linear')\n```\n\n</code>", "metadata": {"problem_id": 811, "library_problem_id": 100, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 812, "code": "```python\ndef mle(x):\n    def loglike(theta):\n        theta = np.exp(theta)\n        theta = theta/theta.sum()\n        ll = np.sum(x*np.log(theta))\n        return -ll\n    \n    # Initialize thetas randomly\n    init_theta = np.random.randn(len(x))\n    \n    # Find MLE estimates using BFGS\n    results = sciopt.minimize(loglike, init_theta, method='BFGS')\n    theta = np.exp(results.x)\n    theta = theta/theta.sum()\n    return theta\ncounts = a['A1'].value_counts().sort_index()\ncounts = counts.reindex(np.arange(min(counts.index), max(counts.index)+1)).fillna(0)\nweights = mle(counts)\n```\n\n</code>", "metadata": {"problem_id": 812, "library_problem_id": 101, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 101}}
{"id": 813, "code": "```python\nbnds = ((pmin[0],pmax[0]),(pmin[1],pmax[1]))\npopt = sciopt.minimize(lambda p, x, y: e(p, x, y), x0 = [1.0,1.0], bounds=bnds, args=(x,y))\nresult = popt.x\n```\n\n</code>", "metadata": {"problem_id": 813, "library_problem_id": 102, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 814, "code": "```python\nextrema_indices = signal.argrelextrema(arr, np.less_equal, order=n)[0]\nresult = extrema_indices.tolist()\n```\n\n</code>", "metadata": {"problem_id": 814, "library_problem_id": 103, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 815, "code": "```python\nextrema_indices = []\nfor i in range(arr.shape[0]):\n    for j in range(arr.shape[1]):\n        is_extrema = True\n        for k in range(max(0, j - n), min(arr.shape[1], j + n + 1)):\n            if arr[i, j] > arr[i, k]:\n                is_extrema = False\n                break\n        if is_extrema:\n            extrema_indices.append([i, j])\nresult = extrema_indices\n```\n\n</code>", "metadata": {"problem_id": 815, "library_problem_id": 104, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 103}}
{"id": 816, "code": "```python\nnumerical_columns = df.select_dtypes(include=np.number).columns\ndf = df[(np.abs(stats.zscore(df[numerical_columns])) < 3).all(axis=1)]\n```\n\n</code>", "metadata": {"problem_id": 816, "library_problem_id": 105, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 817, "code": "```python\ndata1 = pd.DataFrame(data['data'], columns=data['feature_names'])\ndata1['target'] = data['target']\n```\n\n</code>", "metadata": {"problem_id": 817, "library_problem_id": 0, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 818, "code": "```python\ndata1 = pd.DataFrame(data['data'], columns=data['feature_names'])\ndata1['target'] = data['target']\n```\n\n</code>", "metadata": {"problem_id": 818, "library_problem_id": 1, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 819, "code": "```python\ndata = fetch_california_housing()\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\ndata1['target'] = data.target\n```\n\n</code>", "metadata": {"problem_id": 819, "library_problem_id": 2, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 0}}
{"id": 820, "code": "```python\n    df = pd.DataFrame(data.data, columns=data.feature_names)\n    df['target'] = data.target\n    return df\n```\n\n</code>", "metadata": {"problem_id": 820, "library_problem_id": 3, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 821, "code": "```python\nmlb = sklearn.preprocessing.MultiLabelBinarizer()\ndf_out = df.join(pd.DataFrame(mlb.fit_transform(df.pop('Col3')),\n                          columns=mlb.classes_,\n                          index=df.index))\n```\n\n</code>", "metadata": {"problem_id": 821, "library_problem_id": 4, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 822, "code": "```python\nmlb = sklearn.preprocessing.MultiLabelBinarizer()\ndf_out = pd.DataFrame(mlb.fit_transform(df['Col3']), columns=mlb.classes_, index=df.index)\ndf_out = pd.concat([df[['Col1', 'Col2']], df_out], axis=1)\n```\n\n</code>", "metadata": {"problem_id": 822, "library_problem_id": 5, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 823, "code": "```python\nmlb = sklearn.preprocessing.MultiLabelBinarizer()\ndf_out = pd.DataFrame.from_records(mlb.fit_transform(df.iloc[:,-1]), columns=mlb.classes_)\ndf_out = pd.concat([df.iloc[:,:-1], df_out], axis=1)\n```\n\n</code>", "metadata": {"problem_id": 823, "library_problem_id": 6, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 824, "code": "```python\nlast_col = df.columns[-1]\nunique_elements = []\nfor index in df.index:\n    for element in df[last_col][index]:\n        if element not in unique_elements:\n            unique_elements.append(element)\nfor element in unique_elements:\n    df[element] = 0\nfor index in df.index:\n    for element in df[last_col][index]:\n        df[element][index] = 1\ndf_out = df.drop(columns=[last_col])\n```\n\n</code>", "metadata": {"problem_id": 824, "library_problem_id": 7, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 825, "code": "```python\nlast_col = df.columns[-1]\nunique_elements = []\nfor lst in df[last_col]:\n    unique_elements.extend(lst)\nunique_elements = list(set(unique_elements))\nfor element in unique_elements:\n    df[element] = df[last_col].apply(lambda x: 1 if element not in x else 0)\ndf_out = df.drop(columns=[last_col])\n```\n\n</code>", "metadata": {"problem_id": 825, "library_problem_id": 8, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 826, "code": "```python\nfrom sklearn.calibration import CalibratedClassifierCV\ncalibrated_svc = CalibratedClassifierCV(svmmodel, method='isotonic', cv=5)\ncalibrated_svc.fit(X, y)\nproba = calibrated_svc.predict_proba(x_test)\n```\n\n</code>", "metadata": {"problem_id": 826, "library_problem_id": 9, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 827, "code": "```python\nfrom sklearn.calibration import CalibratedClassifierCV\ncalibrated_clf = CalibratedClassifierCV(model, cv=5)\ncalibrated_clf.fit(X, y)\nproba = calibrated_clf.predict_proba(x_predict)\n```\n\n</code>", "metadata": {"problem_id": 827, "library_problem_id": 10, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 828, "code": "```python\ntransform_output_df = pd.DataFrame.sparse.from_spmatrix(transform_output)\ndf = pd.concat([df_origin, transform_output_df], axis=1)\n```\n\n</code>", "metadata": {"problem_id": 828, "library_problem_id": 11, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 829, "code": "```python\ntransform_df = pd.DataFrame.sparse.from_spmatrix(transform_output)\ndf = pd.concat([df_origin, transform_df], axis=1)\n```\n\n</code>", "metadata": {"problem_id": 829, "library_problem_id": 12, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 830, "code": "```python\n    transform_df = pd.DataFrame.sparse.from_spmatrix(transform_output)\n    df = pd.concat([df.reset_index(drop=True), transform_df.reset_index(drop=True)], axis=1)\n    return df\n```\n\n</code>", "metadata": {"problem_id": 830, "library_problem_id": 13, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 831, "code": "```python\nclf.steps.pop(1)\n```\n\n</code>", "metadata": {"problem_id": 831, "library_problem_id": 14, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 832, "code": "```python\ndel clf.steps[0]\n```\n\n</code>", "metadata": {"problem_id": 832, "library_problem_id": 15, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 14}}
{"id": 833, "code": "```python\nclf.steps.pop(1)\nclf.steps\n```\n\n</code>", "metadata": {"problem_id": 833, "library_problem_id": 16, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"id": 834, "code": "```python\nclf.steps.insert(1, ('add_poly', PolynomialFeatures(degree=3)))\n```\n\n</code>", "metadata": {"problem_id": 834, "library_problem_id": 17, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 835, "code": "```python\nclf.steps.insert(1, ('poly', PolynomialFeatures()))\n```\n\n</code>", "metadata": {"problem_id": 835, "library_problem_id": 18, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 17}}
{"id": 836, "code": "```python\nnew_steps = list(clf.steps)\nnew_steps.insert(2, ('t1919810', PCA()))\nclf.steps = new_steps\n```\n\n</code>", "metadata": {"problem_id": 836, "library_problem_id": 19, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 17}}
{"id": 837, "code": "```python\ndef load_data():\n    trainX = np.random.rand(100, 5)\n    trainY = np.random.rand(100)\n    testX = np.random.rand(50, 5)\n    testY = np.random.rand(50)\n    model = xgb.XGBRegressor()\n    paramGrid = {\"n_estimators\": [100]}\n    fit_params={\"early_stopping_rounds\":42,\n                \"eval_metric\" : \"mae\",\n                \"eval_set\" : [(testX, testY)]}\n    gridsearch = GridSearchCV(model, paramGrid, cv=TimeSeriesSplit(n_splits=3).split(trainX, trainY))\n    gridsearch.fit(trainX, trainY, **fit_params)\n    return gridsearch, testX, testY, trainX, trainY\ngridsearch, testX, testY, trainX, trainY = load_data()\nb = gridsearch.best_score_\nc = gridsearch.predict(testX)\n```\n\n</code>", "metadata": {"problem_id": 837, "library_problem_id": 20, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 20}}
{"id": 838, "code": "```python\nmodel = xgb.XGBRegressor()\nparamGrid = {\n    'n_estimators': [100, 200],\n    'max_depth': [3, 4],\n}\nfit_params={\"early_stopping_rounds\":42,\n            \"eval_metric\" : \"mae\",\n            \"eval_set\" : [(np.array(testX), np.array(testY))]}\ngridsearch = GridSearchCV(model, paramGrid, verbose=1, cv=TimeSeriesSplit(n_splits=3).split(np.array(trainX)), n_jobs=1)\ngridsearch.fit(np.array(trainX), np.array(trainY), **fit_params)\nb = gridsearch.best_score_\nc = gridsearch.predict(np.array(testX))\n```\n\n</code>", "metadata": {"problem_id": 838, "library_problem_id": 21, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 20}}
{"id": 839, "code": "```python\nproba = []\nfor train_idx, test_idx in cv:\n    logreg.fit(X[train_idx], y[train_idx])\n    proba.append(logreg.predict_proba(X[test_idx]))\n```\n\n</code>", "metadata": {"problem_id": 839, "library_problem_id": 22, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 22}}
{"id": 840, "code": "```python\nproba = []\nfor train, test in cv:\n    logreg.fit(X[train], y[train])\n    proba.append(logreg.predict_proba(X[test]))\n```\n\n</code>", "metadata": {"problem_id": 840, "library_problem_id": 23, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 22}}
{"id": 841, "code": "```python\ninversed = scaler.inverse_transform(scaled)\n```\n\n</code>", "metadata": {"problem_id": 841, "library_problem_id": 24, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 842, "code": "```python\n    inversed = scaler.inverse_transform(scaled)\n    return inversed\n```\n\n</code>", "metadata": {"problem_id": 842, "library_problem_id": 25, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 24}}
{"id": 843, "code": "```python\nmodel_name = model.__class__.__name__\n```\n\n</code>", "metadata": {"problem_id": 843, "library_problem_id": 26, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 844, "code": "```python\nmodel_name = model.__class__.__name__\n```\n\n</code>", "metadata": {"problem_id": 844, "library_problem_id": 27, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 845, "code": "```python\nmodel_name = model.__class__.__name__\n```\n\n</code>", "metadata": {"problem_id": 845, "library_problem_id": 28, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 846, "code": "```python\ntf_idf_out = pipe.named_steps[\"tf_idf\"].fit_transform(data.test)\n```\n\n</code>", "metadata": {"problem_id": 846, "library_problem_id": 29, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 847, "code": "```python\ntf_idf = TfidfVectorizer()\ntf_idf_out = tf_idf.fit_transform(data.test)\n```\n\n</code>", "metadata": {"problem_id": 847, "library_problem_id": 30, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 29}}
{"id": 848, "code": "```python\npipe.fit(data, target)\nselect_out = pipe.transform(data)\n```\n\n</code>", "metadata": {"problem_id": 848, "library_problem_id": 31, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 29}}
{"id": 849, "code": "```python\ngrid_search = GridSearchCV(bc, param_grid, cv=2)\ngrid_search.fit(X_train, y_train)\nclf = grid_search.best_estimator_\nproba = clf.predict_proba(X_test)\n```\n\n</code>", "metadata": {"problem_id": 849, "library_problem_id": 32, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 850, "code": "```python\nX = X.reshape(-1, 1)\nX_test = X_test.reshape(-1, 1)\nregressor = RandomForestRegressor(n_estimators=150, random_state=42)\nregressor.fit(X, y)\npredict = regressor.predict(X_test)\n```\n\n</code>", "metadata": {"problem_id": 850, "library_problem_id": 33, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 851, "code": "```python\nX = np.array([\n    [233.176, 234.270, 235.270, 523.176],\n    [237.176, 238.270, 239.270, 524.176],\n    [241.176, 242.270, 243.270, 524.176],\n    [245.176, 246.270, 247.270, 524.176]\n])\ny = np.array([0.00, 1.36, 4.46, 8.72, 1.31, 1.73, 2.29, 3.12, 4.11, 5.07, 6.14, 7.34,\n              7.87, 8.46, 9.71, 1.07, 1.17, 1.26, 1.37, 1.47, 1.53, 1.78, 1.92, 2.08,\n              2.22, 2.34, 2.41, 2.48, 2.62, 2.79, 2.95, 3.13, 3.23, 3.24, 3.24, 3.24])\n\nX = X.flatten().reshape(-1, 1)\ny = y.flatten()\n\nregressor = RandomForestRegressor(n_estimators=150, random_state=42)\nregressor.fit(X, y)\n\nX_test = np.array([[234.176]])\npredict = regressor.predict(X_test)\n```\n\n</code>", "metadata": {"problem_id": 851, "library_problem_id": 34, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 33}}
{"id": 852, "code": "```python\ndef preprocess(s):\n    return s.upper()\ntfidf = TfidfVectorizer(preprocessor=preprocess, lowercase=False)\n```\n\n</code>", "metadata": {"problem_id": 852, "library_problem_id": 35, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 853, "code": "```python\ndef prePro(text):\n    return text.lower()\n\ntfidf = TfidfVectorizer(preprocessor=prePro)\n```\n\n</code>", "metadata": {"problem_id": 853, "library_problem_id": 36, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Semantic", "perturbation_origin_id": 35}}
{"id": 854, "code": "```python\nscaled_data = preprocessing.scale(data)\ndf_out = pd.DataFrame(scaled_data, index=data.index, columns=data.columns)\n```\n\n</code>", "metadata": {"problem_id": 854, "library_problem_id": 37, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 37}}
{"id": 855, "code": "```python\nscaler = preprocessing.StandardScaler()\ndf_out = pd.DataFrame(scaler.fit_transform(data), index=data.index, columns=data.columns)\n```\n\n</code>", "metadata": {"problem_id": 855, "library_problem_id": 38, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 37}}
{"id": 856, "code": "```python\ngrid.fit(X, y)\ncoef = grid.best_estimator_.named_steps[\"model\"].coef_\n```\n\n</code>", "metadata": {"problem_id": 856, "library_problem_id": 39, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 857, "code": "```python\ngrid.fit(X, y)\ncoef = grid.best_estimator_.named_steps[\"model\"].coef_\n```\n\n</code>", "metadata": {"problem_id": 857, "library_problem_id": 40, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 39}}
{"id": 858, "code": "```python\nmodel = SelectFromModel(clf, prefit=True)\nselected_features = X.columns[model.get_support()]\ncolumn_names = selected_features\n```\n\n</code>", "metadata": {"problem_id": 858, "library_problem_id": 41, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 859, "code": "```python\nmodel = SelectFromModel(clf, prefit=True)\nX_new = model.transform(X)\nselected_features_indices = model.get_support()\nselected_column_names = X.columns[selected_features_indices]\ncolumn_names = selected_column_names\n```\n\n</code>", "metadata": {"problem_id": 859, "library_problem_id": 42, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 860, "code": "```python\nmodel = SelectFromModel(clf, prefit=True)\nselected_features = model.get_support()\ncolumn_names = X.columns[selected_features]\n```\n\n</code>", "metadata": {"problem_id": 860, "library_problem_id": 43, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 861, "code": "```python\nmodel = SelectFromModel(clf, prefit=True)\nselected_indices = model.get_support()\ncolumn_names = X.columns[selected_indices].tolist()\n```\n\n</code>", "metadata": {"problem_id": 861, "library_problem_id": 44, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 41}}
{"id": 862, "code": "```python\nkm.fit(X)\ndistances = np.linalg.norm(X - km.cluster_centers_[p], axis=1)\nclosest_indices = np.argsort(distances)[:50]\nclosest_50_samples = X[closest_indices]\n```\n\n</code>", "metadata": {"problem_id": 862, "library_problem_id": 45, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 863, "code": "```python\nkm.fit(X)\ndistances = np.linalg.norm(X - km.cluster_centers_[p], axis=1)\nclosest_indices = np.argsort(distances)[:50]\nclosest_50_samples = X[closest_indices]\n```\n\n</code>", "metadata": {"problem_id": 863, "library_problem_id": 46, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 864, "code": "```python\nkm.fit(X)\ndistances = np.linalg.norm(X - km.cluster_centers_[p], axis=1)\nclosest_indices = np.argsort(distances)[:100]\nclosest_100_samples = X[closest_indices]\n```\n\n</code>", "metadata": {"problem_id": 864, "library_problem_id": 47, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 865, "code": "```python\n    km.fit(X)\n    distances = np.linalg.norm(X - km.cluster_centers_[p], axis=1)\n    closest_indices = np.argsort(distances)[:50]\n    closest_samples = X[closest_indices]\n    return closest_samples\n```\n\n</code>", "metadata": {"problem_id": 865, "library_problem_id": 48, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 866, "code": "```python\nX_train = pd.get_dummies(X_train, columns=[0])\n```\n\n</code>", "metadata": {"problem_id": 866, "library_problem_id": 49, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 867, "code": "```python\nX_train = pandas.get_dummies(X_train, columns=[0], drop_first=True)\n```\n\n</code>", "metadata": {"problem_id": 867, "library_problem_id": 50, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 868, "code": "```python\nfrom sklearn.svm import SVR\nfrom sklearn.datasets import make_regression\n\ndef load_data():\n    X, y = make_regression(n_samples=100, n_features=2, random_state=42)\n    return X, y\n\nX, y = load_data()\nsvr = SVR(kernel='rbf')\nsvr.fit(X, y)\npredict = svr.predict(X)\n```\n\n</code>", "metadata": {"problem_id": 868, "library_problem_id": 51, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 51}}
{"id": 869, "code": "```python\nfrom sklearn.svm import SVR\nfrom sklearn.datasets import make_regression\ndef load_data():\n    X, y = make_regression(n_samples=100, n_features=2, random_state=0)\n    return X, y\nX, y = load_data()\nsvr = SVR()\nsvr.fit(X, y)\npredict = svr.predict(X)\n```\n\n</code>", "metadata": {"problem_id": 869, "library_problem_id": 52, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 51}}
{"id": 870, "code": "```python\nfrom sklearn.svm import SVR\nfrom sklearn.datasets import make_regression\nX, y = make_regression(n_features=4, random_state=0)\nsvr = SVR(kernel='poly', degree=2)\nsvr.fit(X, y)\npredict = svr.predict(X)\n```\n\n</code>", "metadata": {"problem_id": 870, "library_problem_id": 53, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 51}}
{"id": 871, "code": "```python\nfrom sklearn.svm import SVR\nfrom sklearn.datasets import make_regression\ndef load_data():\n    X, y = make_regression(n_samples=100, n_features=2, random_state=42)\n    return X, y\nX, y = load_data()\nsvr = SVR(kernel='poly', degree=2)\nsvr.fit(X, y)\npredict = svr.predict(X)\n```\n\n</code>", "metadata": {"problem_id": 871, "library_problem_id": 54, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 53}}
{"id": 872, "code": "```python\ndocument_vectors = tfidf.transform(documents)\nquery_vectors = tfidf.transform(queries)\ncosine_similarities = []\nfor query_vector in query_vectors:\n    similarity_scores = []\n    for document_vector in document_vectors:\n        similarity = np.dot(query_vector.toarray(), document_vector.toarray().T)[0][0]\n        similarity_scores.append(similarity)\n    cosine_similarities.append(similarity_scores)\ncosine_similarities_of_queries = np.array(cosine_similarities)\n```\n\n</code>", "metadata": {"problem_id": 872, "library_problem_id": 55, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 55}}
{"id": 873, "code": "```python\ndocument_vectors = tfidf.transform(documents)\nquery_vectors = tfidf.transform(queries)\ncosine_similarities = np.zeros((len(queries), len(documents)))\nfor i, query_vector in enumerate(query_vectors):\n    for j, document_vector in enumerate(document_vectors):\n        similarity = np.dot(query_vector.toarray(), document_vector.toarray().T)[0][0]\n        cosine_similarities[i, j] = similarity\ncosine_similarities_of_queries = cosine_similarities\n```\n\n</code>", "metadata": {"problem_id": 873, "library_problem_id": 56, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 55}}
{"id": 874, "code": "```python\n    document_vectors = tfidf.transform(documents)\n    query_vectors = tfidf.transform(queries)\n    cosine_similarities = np.zeros((len(queries), len(documents)))\n    for i, query_vector in enumerate(query_vectors):\n        for j, document_vector in enumerate(document_vectors):\n            similarity = np.dot(query_vector.toarray(), document_vector.toarray().T)[0][0]\n            cosine_similarities[i, j] = similarity\n    return cosine_similarities\ndef load_data():\n    documents = [\n        \"This is the first document.\",\n        \"This document is the second document.\",\n        \"And this is the third one.\",\n        \"Is this the first document?\",\n        \"dog cat fish\",\n    ]\n    queries = [\n        \"This is the first document.\",\n        \"cat\",\n        \"And this is the third one.\",\n    ]\n    return queries, documents\n```\n\n</code>", "metadata": {"problem_id": 874, "library_problem_id": 57, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 55}}
{"id": 875, "code": "```python\nmlb = sklearn.preprocessing.MultiLabelBinarizer()\nnew_features = mlb.fit_transform(features)\nnew_features = pd.DataFrame(new_features, columns=mlb.classes_)\n```\n\n</code>", "metadata": {"problem_id": 875, "library_problem_id": 58, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 876, "code": "```python\nmlb = sklearn.preprocessing.MultiLabelBinarizer()\nnew_f = mlb.fit_transform(f)\n```\n\n</code>", "metadata": {"problem_id": 876, "library_problem_id": 59, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 877, "code": "```python\nmlb = sklearn.preprocessing.MultiLabelBinarizer()\nnew_features = mlb.fit_transform(features)\nnew_features = pd.DataFrame(new_features, columns=mlb.classes_)\n```\n\n</code>", "metadata": {"problem_id": 877, "library_problem_id": 60, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 878, "code": "```python\n    unique_features = []\n    for feature_list in features:\n        for feature in feature_list:\n            if feature not in unique_features:\n                unique_features.append(feature)\n    \n    new_features = np.zeros((len(features), len(unique_features)), dtype=int)\n    \n    for i, feature_list in enumerate(features):\n        for feature in feature_list:\n            j = unique_features.index(feature)\n            new_features[i, j] = 1\n    \n    return new_features\ndef load_data():\n    features = [\n        ['f1', 'f2', 'f3'],\n        ['f2', 'f4', 'f5', 'f6'],\n        ['f1', 'f2']\n    ]\n    return features\n```\n\n</code>", "metadata": {"problem_id": 878, "library_problem_id": 61, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 879, "code": "```python\nmlb = sklearn.preprocessing.MultiLabelBinarizer()\nnew_features = mlb.fit_transform(features)\nnew_features = pd.DataFrame(new_features, columns=mlb.classes_)\n```\n\n</code>", "metadata": {"problem_id": 879, "library_problem_id": 62, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 58}}
{"id": 880, "code": "```python\nclustering = sklearn.cluster.AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='complete')\nclustering.fit(data_matrix)\ncluster_labels = clustering.labels_.tolist()\n```\n\n</code>", "metadata": {"problem_id": 880, "library_problem_id": 63, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 881, "code": "```python\nclustering = sklearn.cluster.AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='complete')\nclustering.fit(data_matrix)\ncluster_labels = clustering.labels_.tolist()\n```\n\n</code>", "metadata": {"problem_id": 881, "library_problem_id": 64, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 63}}
{"id": 882, "code": "```python\nagg_clustering = sklearn.cluster.AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='complete')\ncluster_labels = agg_clustering.fit_predict(simM)\n```\n\n</code>", "metadata": {"problem_id": 882, "library_problem_id": 65, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 63}}
{"id": 883, "code": "```python\nfrom scipy.cluster.hierarchy import linkage, fcluster\ndistance_matrix = np.array(data_matrix)\ncondensed_distance_matrix = distance_matrix[np.triu_indices_from(distance_matrix, k=1)]\nlinkage_matrix = linkage(condensed_distance_matrix, method='ward')\ncluster_labels = fcluster(linkage_matrix, t=2, criterion='maxclust')\ncluster_labels = list(cluster_labels)\n```\n\n</code>", "metadata": {"problem_id": 883, "library_problem_id": 66, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 884, "code": "```python\ndistance_matrix = np.array(data_matrix)\nlinkage_matrix = scipy.cluster.hierarchy.linkage(distance_matrix, method='complete')\ncluster_labels = scipy.cluster.hierarchy.fcluster(linkage_matrix, t=2, criterion='maxclust')\ncluster_labels = list(cluster_labels)\n```\n\n</code>", "metadata": {"problem_id": 884, "library_problem_id": 67, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 66}}
{"id": 885, "code": "```python\ndef load_data():\n    simM=[[0,0.6,0.8],[0.6,0,0.111],[0.8,0.111,0]]\n    return simM\nsimM = np.array(simM)\nlinkage = scipy.cluster.hierarchy.linkage(simM, method='ward')\ncluster_labels = scipy.cluster.hierarchy.fcluster(linkage, t=2, criterion='maxclust')\ncluster_labels = list(cluster_labels)\n```\n\n</code>", "metadata": {"problem_id": 885, "library_problem_id": 68, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 66}}
{"id": 886, "code": "```python\nfrom sklearn.preprocessing import PowerTransformer, StandardScaler\nbox_cox = PowerTransformer(method='box-cox', standardize=False)\nstandard_scaler = StandardScaler()\ndata_transformed = box_cox.fit_transform(data)\ncentered_scaled_data = standard_scaler.fit_transform(data_transformed)\n```\n\n</code>", "metadata": {"problem_id": 886, "library_problem_id": 69, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 69}}
{"id": 887, "code": "```python\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ncentered_scaled_data = scaler.fit_transform(data)\n```\n\n</code>", "metadata": {"problem_id": 887, "library_problem_id": 70, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 69}}
{"id": 888, "code": "```python\nfrom scipy import stats\npredictors = pd.DataFrame({'x1': np.random.normal(5, 2, 1000),\n                           'x2': np.random.exponential(10, 1000)})\nbox_cox_data = predictors.copy()\nfor column in predictors.columns:\n    box_cox_data[column], _ = stats.boxcox(predictors[column]+1e-6)\n```\n\n</code>", "metadata": {"problem_id": 888, "library_problem_id": 71, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 889, "code": "```python\nfrom scipy import stats\nbox_cox_data, lambda_value = stats.boxcox(data.flatten() + 1)\nbox_cox_data = box_cox_data.reshape(data.shape)\n```\n\n</code>", "metadata": {"problem_id": 889, "library_problem_id": 72, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 71}}
{"id": 890, "code": "```python\nfrom sklearn.preprocessing import PowerTransformer\npt = PowerTransformer(method='yeo-johnson', standardize=False)\nyeo_johnson_data = pt.fit_transform(data)\n```\n\n</code>", "metadata": {"problem_id": 890, "library_problem_id": 73, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 73}}
{"id": 891, "code": "```python\nfrom sklearn.preprocessing import PowerTransformer\npt = PowerTransformer(method='yeo-johnson')\nyeo_johnson_data = pt.fit_transform(data)\n```\n\n</code>", "metadata": {"problem_id": 891, "library_problem_id": 74, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 73}}
{"id": 892, "code": "```python\ndef load_data():\n    return \"This is a test! \\\"Hello, world?\\\" I can't believe it.\"\nvectorizer = CountVectorizer(token_pattern=r\"(?u)\\b\\w\\w+\\b|[!\\\"'?]\")\nvectorizer.fit([text])\ntransformed_text = vectorizer.transform([text])\n```\n\n</code>", "metadata": {"problem_id": 892, "library_problem_id": 75, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 893, "code": "```python\nfrom sklearn.model_selection import train_test_split\n\ntrain, test = train_test_split(dataset, test_size=0.2, random_state=42)\n\nx_train = train.iloc[:, :-1]\ny_train = train.iloc[:, -1]\nx_test = test.iloc[:, :-1]\ny_test = test.iloc[:, -1]\n```\n\n</code>", "metadata": {"problem_id": 893, "library_problem_id": 76, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 894, "code": "```python\nfrom sklearn.model_selection import train_test_split\ndef load_data():\n    df = pd.DataFrame(np.random.rand(100, 5))\n    df['target'] = np.random.randint(0, 2, 100)\n    return df\ndata = load_data()\ntrain_data, test_data = train_test_split(data, test_size=0.2, random_state=42)\nx_train = train_data.iloc[:, :-1]\ny_train = train_data.iloc[:, -1]\nx_test = test_data.iloc[:, :-1]\ny_test = test_data.iloc[:, -1]\n```\n\n</code>", "metadata": {"problem_id": 894, "library_problem_id": 77, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 895, "code": "```python\nfrom sklearn.model_selection import train_test_split\n\ntrain, test = train_test_split(dataset, test_size=0.4, random_state=42)\n\nx_train = train.iloc[:, :-1]\ny_train = train.iloc[:, -1]\nx_test = test.iloc[:, :-1]\ny_test = test.iloc[:, -1]\n```\n\n</code>", "metadata": {"problem_id": 895, "library_problem_id": 78, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 896, "code": "```python\n    from sklearn.model_selection import train_test_split\n    train, test = train_test_split(data, test_size=0.2, random_state=42)\n    x_train = train.iloc[:, :-1]\n    y_train = train.iloc[:, -1]\n    x_test = test.iloc[:, :-1]\n    y_test = test.iloc[:, -1]\n    return x_train, y_train, x_test, y_test\ndef load_data():\n    data = pd.read_csv('example.csv', header=None, sep=',')\n    return data\n```\n\n</code>", "metadata": {"problem_id": 896, "library_problem_id": 79, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 897, "code": "```python\nimport pandas as pd\nimport numpy as np\ndef load_data():\n    data = {'date': ['2018-02-11', '2018-02-12', '2018-02-13', '2018-02-14', '2018-02-16', '2018-02-21', '2018-02-22', '2018-02-24', '2018-02-26', '2018-02-27', '2018-02-28', '2018-03-01', '2018-03-05', '2018-03-06'],\n            'mse': [14.34, 7.24, 4.5, 3.5, 12.67, 45.66, 15.33, 98.44, 23.55, 45.12, 78.44, 34.11, 23.33, 7.45]}\n    df = pd.DataFrame(data)\n    df['date'] = pd.to_datetime(df['date'])\n    return df\ndf['mse'] = df['mse'].astype(float)\nkmeans = KMeans(n_clusters=2, n_init=10)\nkmeans = kmeans.fit(df[['mse']])\nlabels = kmeans.predict(df[['mse']])\n```\n\n</code>", "metadata": {"problem_id": 897, "library_problem_id": 80, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 898, "code": "```python\nkmeans = KMeans(n_clusters=2, n_init=10, random_state=0)\nX = df['mse'].values.reshape(-1, 1)\nkmeans.fit(X)\nlabels = kmeans.labels_\n```\n\n</code>", "metadata": {"problem_id": 898, "library_problem_id": 81, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 80}}
{"id": 899, "code": "```python\nlsvc = LinearSVC(C=0.01, penalty=\"l1\", dual=False).fit(X, y)\nmodel = SelectFromModel(lsvc, prefit=True)\nX_new = model.transform(X)\nselected_feature_names = np.asarray(vectorizer.get_feature_names_out())[model.get_support()]\n```\n\n</code>", "metadata": {"problem_id": 899, "library_problem_id": 82, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 900, "code": "```python\nfeatureSelector = LinearSVC(penalty=\"l1\", dual=False)\nfeatureSelector.fit(X, y)\nselected_feature_names = np.asarray(vectorizer.get_feature_names_out())[featureSelector.coef_[0] != 0]\n```\n\n</code>", "metadata": {"problem_id": 900, "library_problem_id": 83, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 82}}
{"id": 901, "code": "```python\n    lsvc = LinearSVC(C=0.01, penalty=\"l1\", dual=False).fit(X, y)\n    model = sklearn.feature_selection.SelectFromModel(lsvc, prefit=True)\n    X_new = model.transform(X)\n    selected_feature_names = np.asarray(vectorizer.get_feature_names_out())[model.get_support()]\n    return selected_feature_names\n```\n\n</code>", "metadata": {"problem_id": 901, "library_problem_id": 84, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 82}}
{"id": 902, "code": "```python\nvectorizer = CountVectorizer(stop_words=\"english\",binary=True,lowercase=False)\nvectorizer.fit(corpus)\nvocabulary={'Jscript','.Net','TypeScript','SQL', 'NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX'}\nfeature_names = [feature for feature in vocabulary if feature in vectorizer.vocabulary_]\nX = vectorizer.transform(corpus).toarray()\nX = X[:, [vectorizer.vocabulary_[feature] for feature in feature_names]]\n```\n\n</code>", "metadata": {"problem_id": 902, "library_problem_id": 85, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 903, "code": "```python\nvectorizer = CountVectorizer(stop_words=\"english\",binary=True,lowercase=False)\nvectorizer.fit(corpus)\nvocabulary={'Jscript','.Net','TypeScript','NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX'}\nfeature_names = [feature for feature in vocabulary if feature in vectorizer.vocabulary_.keys()]\nvectorizer = CountVectorizer(stop_words=\"english\",binary=True,lowercase=False,vocabulary=feature_names)\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n```\n\n</code>", "metadata": {"problem_id": 903, "library_problem_id": 86, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 85}}
{"id": 904, "code": "```python\nvocabulary={'Jscript','.Net','TypeScript','SQL', 'NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX'}\nvectorizer = CountVectorizer(stop_words=\"english\",binary=True,lowercase=False,vocabulary=vocabulary)\nX = vectorizer.fit_transform(corpus)\nfeature_names = list(vocabulary)\ndf = pd.DataFrame(X.toarray(), columns = vectorizer.get_feature_names())\nX = df[feature_names].to_numpy()\n```\n\n</code>", "metadata": {"problem_id": 904, "library_problem_id": 87, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 905, "code": "```python\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False)\nvectorizer.fit(corpus)\noriginal_vocabulary = ['.Net', 'Angular', 'Backend', 'C++', 'CSS', 'Database design', 'Frontend', 'Full stack', 'Integration', 'Java', 'Jscript', 'Linux', 'Mongo', 'NodeJS', 'Oracle', 'PHP', 'Photoshop', 'Python', 'TeamCity', 'TypeScript', 'UI Design', 'UX', 'Web']\nvocabulary = {key: idx for idx, key in enumerate(original_vocabulary)}\nvectorizer.vocabulary_ = vocabulary\nfeature_names = vectorizer.get_feature_names_out().tolist()\nX = vectorizer.transform(corpus)\nX = np.where(X.toarray() > 0, 1, 1)\n```\n\n</code>", "metadata": {"problem_id": 905, "library_problem_id": 88, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 906, "code": "```python\nslopes = []\nfor col in df1.columns:\n    if col == 'Time':\n        continue\n    df2 = df1[~np.isnan(df1[col])]\n    df3 = df2[['Time', col]]\n    if len(df3) < 2:\n        slopes.append(np.nan)\n        continue\n    npMatrix = np.matrix(df3)\n    X, Y = npMatrix[:,0], npMatrix[:,1]\n    try:\n        slope = LinearRegression().fit(X,Y)\n        m = slope.coef_[0]\n        slopes.append(m)\n    except:\n        slopes.append(np.nan)\n```\n\n</code>", "metadata": {"problem_id": 906, "library_problem_id": 89, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 89}}
{"id": 907, "code": "```python\nslopes = []\nfor col in df1.columns:\n    if col == 'Time':\n        continue\n    df2 = df1[~np.isnan(df1[col])]\n    if df2.empty:\n        slopes.append(np.nan)\n        continue\n    df3 = df2[['Time',col]]\n    npMatrix = np.matrix(df3)\n    X, Y = npMatrix[:,0], npMatrix[:,1]\n    try:\n        slope = LinearRegression().fit(X,Y)\n        m = slope.coef_[0]\n        slopes.append(m)\n    except:\n        slopes.append(np.nan)\n```\n\n</code>", "metadata": {"problem_id": 907, "library_problem_id": 90, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 89}}
{"id": 908, "code": "```python\ndef load_data():\n    df = pd.read_csv('titanic.csv')\n    df = df.fillna(method='ffill')\n    return df\ndf['Sex'] = df['Sex'].astype(str)\nle = LabelEncoder()\ndf['Sex'] = le.fit_transform(df['Sex'])\ntransformed_df = df\n```\n\n</code>", "metadata": {"problem_id": 908, "library_problem_id": 91, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 909, "code": "```python\nle = LabelEncoder()\ndf['Sex'] = le.fit_transform(df['Sex'])\ntransformed_df = df\n```\n\n</code>", "metadata": {"problem_id": 909, "library_problem_id": 92, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 910, "code": "```python\n    le = LabelEncoder()\n    df['Sex'] = le.fit_transform(df['Sex'])\n    return df\n```\n\n</code>", "metadata": {"problem_id": 910, "library_problem_id": 93, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 911, "code": "```python\nElasticNet = linear_model.ElasticNet() # create a lasso instance\nElasticNet.fit(X_train, y_train) # fit data\ntraining_set_score = ElasticNet.score(X_train, y_train)\ntest_set_score = ElasticNet.score(X_test, y_test)\n```\n\n</code>", "metadata": {"problem_id": 911, "library_problem_id": 94, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 912, "code": "```python\nscaler = MinMaxScaler()\ntransformed = scaler.fit_transform(np_array.reshape(-1, 1)).reshape(np_array.shape)\n```\n\n</code>", "metadata": {"problem_id": 912, "library_problem_id": 95, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 913, "code": "```python\nscaler = MinMaxScaler()\nreshaped_array = np_array.reshape(-1, 1)\nscaled_values = scaler.fit_transform(reshaped_array)\ntransformed = scaled_values.reshape(np_array.shape)\n```\n\n</code>", "metadata": {"problem_id": 913, "library_problem_id": 96, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 95}}
{"id": 914, "code": "```python\n    scaler = MinMaxScaler()\n    a_flat = a.flatten().reshape(-1, 1)\n    a_scaled_flat = scaler.fit_transform(a_flat)\n    a_scaled = a_scaled_flat.reshape(a.shape)\n    return a_scaled\ndef load_data():\n    a = np.array([[1, 2], [3, 4]])\n    return a\n```\n\n</code>", "metadata": {"problem_id": 914, "library_problem_id": 97, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 95}}
{"id": 915, "code": "```python\nclose_buy1 = close[:-1]\nm5 = ma_50[:-1]\nm10 = ma_100[:-1]\nma20 = ma_200[:-1]\nb = np.concatenate([close_buy1, m5, m10, ma20], axis=1)\n\npredict = clf.predict(b)\n```\n\n</code>", "metadata": {"problem_id": 915, "library_problem_id": 98, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 98}}
{"id": 916, "code": "```python\ndf = pd.DataFrame(X)\nfor col in df.columns:\n    df[col] = df[col].astype('category')\n    df[col] = df[col].cat.codes\nnew_X = df.values\nclf.fit(new_X, ['2', '3'])\n```\n\n</code>", "metadata": {"problem_id": 916, "library_problem_id": 99, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Origin", "perturbation_origin_id": 99}}
{"id": 917, "code": "```python\nnew_X = pd.DataFrame(X)\nnew_X = pd.get_dummies(new_X)\nclf.fit(new_X, ['2', '3'])\n```\n\n</code>", "metadata": {"problem_id": 917, "library_problem_id": 100, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Surface", "perturbation_origin_id": 99}}
{"id": 918, "code": "```python\ndf = pd.DataFrame(X)\nfor col in df.columns:\n    df[col] = df[col].astype('category')\n    df[col] = df[col].cat.codes\nnew_X = df.values\nclf.fit(new_X, ['4', '5'])\n```\n\n</code>", "metadata": {"problem_id": 918, "library_problem_id": 101, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Surface", "perturbation_origin_id": 99}}
{"id": 919, "code": "```python\nX = dataframe.iloc[:, :-1].astype(float)\ny = dataframe.iloc[:, -1].astype(float)\nlogReg = LogisticRegression()\nlogReg.fit(X, y)\npredict = logReg.predict(X)\n```\n\n</code>", "metadata": {"problem_id": 919, "library_problem_id": 102, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 920, "code": "```python\nX = dataframe.iloc[:, :-1].astype(float)\ny = dataframe.iloc[:, -1]\nlogReg = LogisticRegression()\nlogReg.fit(X, y)\npredict = logReg.predict(X)\n```\n\n</code>", "metadata": {"problem_id": 920, "library_problem_id": 103, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 102}}
{"id": 921, "code": "```python\ndef split_data(df, train_size=0.2):\n    dates = df[\"date\"].unique()\n    train_dates = dates[:int(len(dates)*train_size)]\n    train_df = df[df[\"date\"].isin(train_dates)]\n    test_dates = dates[int(len(dates)*train_size):]\n    test_df = df[df[\"date\"].isin(test_dates)]\n    return train_df, test_df\ntrain_dataframe, test_dataframe = split_data(features_dataframe)\n```\n\n</code>", "metadata": {"problem_id": 921, "library_problem_id": 104, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 922, "code": "```python\ndates = features_dataframe['date'].unique()\ntrain_size = int(len(dates) * 0.8)\ntrain_dates = dates[train_size:]\ntest_dates = dates[:train_size]\ntrain_dataframe = features_dataframe[features_dataframe['date'].isin(train_dates)]\ntest_dataframe = features_dataframe[features_dataframe['date'].isin(test_dates)]\n```\n\n</code>", "metadata": {"problem_id": 922, "library_problem_id": 105, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 923, "code": "```python\n    train_size = 0.2\n    dates = features_dataframe[\"date\"].unique()\n    train_dates = dates[:int(len(dates)*train_size)]\n    train_dataframe = features_dataframe[features_dataframe[\"date\"].isin(train_dates)]\n    test_dates = dates[int(len(dates)*train_size):]\n    test_dataframe = features_dataframe[features_dataframe[\"date\"].isin(test_dates)]\n    return train_dataframe, test_dataframe\n```\n\n</code>", "metadata": {"problem_id": 923, "library_problem_id": 106, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 924, "code": "```python\ndef scale_month(df_month):\n    cols = ['X2', 'X3']\n    df_month[[col + '_scale' for col in cols]] = scaler.fit_transform(df_month[cols])\n    return df_month\ndf = df.groupby('Month').apply(scale_month)\n```\n\n</code>", "metadata": {"problem_id": 924, "library_problem_id": 107, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 925, "code": "```python\ndef scale_columns(group):\n    cols = ['A2', 'A3']\n    group[['new_A2', 'new_A3']] = scaler.fit_transform(group[cols])\n    return group\nmyData = myData.groupby('Month').apply(scale_columns)\n```\n\n</code>", "metadata": {"problem_id": 925, "library_problem_id": 108, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 107}}
{"id": 926, "code": "```python\ncount = CountVectorizer(token_pattern=r\"(?u)\\b\\w+\\b|@\\w+|#\\w+\")\nvocabulary = count.fit_transform([words])\nfeature_names = count.get_feature_names_out().tolist()\n```\n\n</code>", "metadata": {"problem_id": 926, "library_problem_id": 109, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 927, "code": "```python\ncount = CountVectorizer(lowercase = False, token_pattern=r\"(?u)\\b\\w+\\b|@\\w+|#\\w+\")\nvocabulary = count.fit_transform([words])\nfeature_names = count.get_feature_names_out()\n```\n\n</code>", "metadata": {"problem_id": 927, "library_problem_id": 110, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 109}}
{"id": 928, "code": "```python\nfull_results = pd.DataFrame(GridSearch_fitted.cv_results_)\n```\n\n</code>", "metadata": {"problem_id": 928, "library_problem_id": 111, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 929, "code": "```python\nfull_results = pd.DataFrame(GridSearch_fitted.cv_results_).sort_values('mean_fit_time')\n```\n\n</code>", "metadata": {"problem_id": 929, "library_problem_id": 112, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"id": 930, "code": "```python\nimport joblib\nfrom sklearn.ensemble import IsolationForest\n\ndef train_model(data):\n    model = IsolationForest(random_state=42)\n    model.fit(data)\n    return model\n\ndef save_model(model, filename):\n    joblib.dump(model, filename)\n\ndef load_model(filename):\n    return joblib.load(filename)\n\ndef load_data():\n    # Generate some sample data for demonstration\n    rng = np.random.RandomState(42)\n    data = pd.DataFrame({'feature_1': rng.normal(0, 1, 1000),\n                       'feature_2': rng.normal(0, 1, 1000)})\n\n    # Train and save the model (only done once)\n    model = train_model(data)\n    save_model(model, \"isolation_forest.joblib\")\n\n    # Load the model for later use\n    loaded_model = load_model(\"isolation_forest.joblib\")\n    return loaded_model\n```\n\n</code>", "metadata": {"problem_id": 930, "library_problem_id": 113, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 931, "code": "```python\ntfidf_matrix = tfidf.fit_transform(df['description'])\ncosine_similarity_matrix = sklearn.metrics.pairwise.cosine_similarity(tfidf_matrix)\ncosine_similarity_matrix = pd.DataFrame(cosine_similarity_matrix, index=df['items'], columns=df['items'])\n```\n\n</code>", "metadata": {"problem_id": 931, "library_problem_id": 114, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 932, "code": "```python\ndef load_data():\n    model = torch.nn.Linear(10, 1)\n    optim = torch.optim.SGD(model.parameters(), lr=0.01)\n    return optim\noptim = load_data()\nfor param_group in optim.param_groups:\n    param_group['lr'] = 0.001\n```\n\n</code>", "metadata": {"problem_id": 932, "library_problem_id": 0, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 933, "code": "```python\ndef load_data():\n    class CustomModel(torch.nn.Module):\n        def __init__(self):\n            super().__init__()\n            self.linear = torch.nn.Linear(10, 1)\n\n        def forward(self, x):\n            return self.linear(x)\n\n    model = CustomModel()\n    optim = torch.optim.SGD(model.parameters(), lr=0.01)\n\n    # Example of how to change the learning rate\n    for param_group in optim.param_groups:\n        param_group['lr'] = 0.001\n\n    return optim\n```\n\n</code>", "metadata": {"problem_id": 933, "library_problem_id": 1, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 934, "code": "```python\ndef load_data():\n    model = torch.nn.Linear(10, 1)\n    optim = torch.optim.SGD(model.parameters(), lr=0.005)\n    new_lr = 0.0005\n    for param_group in optim.param_groups:\n        param_group['lr'] = new_lr\n    return optim\n```\n\n</code>", "metadata": {"problem_id": 934, "library_problem_id": 2, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 935, "code": "```python\ndef load_data():\n    class CustomModel(torch.nn.Module):\n        def __init__(self):\n            super().__init__()\n            self.linear = torch.nn.Linear(10, 1)\n\n        def forward(self, x):\n            return self.linear(x)\n\n    model = CustomModel()\n    optim = torch.optim.SGD(model.parameters(), lr=0.005)\n\n    # To change the learning rate after an epoch (or during training):\n    for param_group in optim.param_groups:\n        param_group['lr'] = 0.0001  # Example: Reduce learning rate\n\n    # Or, to access the current learning rate:\n    current_lr = optim.param_groups[0]['lr']\n    print(f\"Current learning rate: {current_lr}\")\n\n    # About choosing between 0.05 and 0.0005:\n    # If the loss is increasing, it suggests the learning rate is too high,\n    # causing the optimizer to overshoot the minimum.  Therefore, *decreasing*\n    # the learning rate is the correct approach.  0.0005 is a better choice\n    # than 0.05 in this scenario.  It's generally better to start with a\n    # smaller learning rate and increase it if needed, rather than the other\n    # way around.  However, the optimal learning rate depends on the specific\n    # problem and model.  Experimentation is often necessary.\n\n    return optim\n```\n\n</code>", "metadata": {"problem_id": 935, "library_problem_id": 3, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 936, "code": "```python\nweights = torch.FloatTensor(word2vec.wv.vectors)\nembedding = torch.nn.Embedding.from_pretrained(weights)\nembedded_input = embedding(input_Tensor)\n```\n\n</code>", "metadata": {"problem_id": 936, "library_problem_id": 4, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 937, "code": "```python\n    weights = torch.FloatTensor(word2vec.wv.vectors)\n    embedding = torch.nn.Embedding.from_pretrained(weights)\n    embedded_input = embedding(input_Tensor)\n    return embedded_input\ndef load_data():\n    # Generate some dummy data for demonstration\n    input_data = torch.randint(0, len(word2vec.wv.key_to_index), (5, 10))\n    return input_data\n```\n\n</code>", "metadata": {"problem_id": 937, "library_problem_id": 5, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 938, "code": "```python\npx = pd.DataFrame(x.numpy())\n```\n\n</code>", "metadata": {"problem_id": 938, "library_problem_id": 6, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 939, "code": "```python\npx = pd.DataFrame(x.numpy())\n```\n\n</code>", "metadata": {"problem_id": 939, "library_problem_id": 7, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 940, "code": "```python\npx = pd.DataFrame(x.numpy())\n```\n\n</code>", "metadata": {"problem_id": 940, "library_problem_id": 8, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 941, "code": "```python\nC = B[:, A_log.bool()]\n```\n\n</code>", "metadata": {"problem_id": 941, "library_problem_id": 9, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 942, "code": "```python\nA_idx = torch.nonzero(A_logical).squeeze()\nC = B[:, A_idx]\n```\n\n</code>", "metadata": {"problem_id": 942, "library_problem_id": 10, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 943, "code": "```python\nC = B[:, A_log.bool()]\n```\n\n</code>", "metadata": {"problem_id": 943, "library_problem_id": 11, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 944, "code": "```python\nA_log = torch.ByteTensor([0, 1, 0])\nB = torch.LongTensor([[1, 2, 3], [4, 5, 6]])\nidx = (A_log == 0).nonzero()[:,0]\nC = B[:, idx]\n```\n\n</code>", "metadata": {"problem_id": 944, "library_problem_id": 12, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 945, "code": "```python\n    idx = torch.nonzero(A_log).squeeze()\n    C = B[:, idx]\n    return C\n\ndef load_data():\n    A_log = torch.ByteTensor([1, 0, 1]) # the logical index\n    B = torch.LongTensor([[1, 2, 3], [4, 5, 6]])\n    return A_log, B\n```\n\n</code>", "metadata": {"problem_id": 945, "library_problem_id": 13, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 946, "code": "```python\nC = B[:, ~A_log.bool()]\n```\n\n</code>", "metadata": {"problem_id": 946, "library_problem_id": 14, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 947, "code": "```python\nC = torch.index_select(B, dim=1, index=idx)\n```\n\n</code>", "metadata": {"problem_id": 947, "library_problem_id": 15, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 948, "code": "```python\nx_tensor = torch.Tensor(np.stack(x_array))\n```\n\n</code>", "metadata": {"problem_id": 948, "library_problem_id": 16, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 949, "code": "```python\nx_tensor = torch.Tensor(np.stack(x_array))\n```\n\n</code>", "metadata": {"problem_id": 949, "library_problem_id": 17, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 16}}
{"id": 950, "code": "```python\n    l = []\n    for i in a:\n        l.append(torch.tensor(i))\n    return torch.stack(l)\n```\n\n</code>", "metadata": {"problem_id": 950, "library_problem_id": 18, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 16}}
{"id": 951, "code": "```python\ndef lens_to_mask(lens, max_len):\n    mask = torch.zeros(len(lens), max_len, dtype=torch.long)\n    for i, l in enumerate(lens):\n        mask[i, :l] = 1\n    return mask\n\nmax_len = max(lens)\nmask = lens_to_mask(torch.tensor(lens), max_len)\n```\n\n</code>", "metadata": {"problem_id": 951, "library_problem_id": 19, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 19}}
{"id": 952, "code": "```python\ndef lens_to_mask(lens, max_len):\n    mask = torch.zeros(len(lens), max_len, dtype=torch.long)\n    for i, l in enumerate(lens):\n        mask[i, :l] = 1\n    return mask\n\nmax_len = max(lens)\nmask = lens_to_mask(torch.LongTensor(lens), max_len)\n```\n\n</code>", "metadata": {"problem_id": 952, "library_problem_id": 20, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 19}}
{"id": 953, "code": "```python\ndef lens_to_mask(lens, max_len):\n    mask = torch.zeros(len(lens), max_len, dtype=torch.long)\n    for i, l in enumerate(lens):\n        mask[i, -l:] = 1\n    return mask\n\nmax_len = max(lens)\nmask = lens_to_mask(torch.LongTensor(lens), max_len)\n```\n\n</code>", "metadata": {"problem_id": 953, "library_problem_id": 21, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 19}}
{"id": 954, "code": "```python\n    max_len = max(lens)\n    mask = torch.zeros(len(lens), max_len).long()\n    for i, l in enumerate(lens):\n        mask[i, :l] = 1\n    return mask\ndef load_data():\n    lens = [3, 5, 4]\n    lens = torch.LongTensor(lens)\n    return lens\n```\n\n</code>", "metadata": {"problem_id": 954, "library_problem_id": 22, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 19}}
{"id": 955, "code": "```python\ndef diag_2D_to_3D(Tensor_2D):\n    num_batches = Tensor_2D.shape[0]\n    diag_len = Tensor_2D.shape[1]\n    Tensor_3D = torch.zeros(num_batches, diag_len, diag_len)\n    for i in range(num_batches):\n        Tensor_3D[i] = torch.diag(Tensor_2D[i])\n    return Tensor_3D\nTensor_3D = diag_2D_to_3D(Tensor_2D)\n```\n\n</code>", "metadata": {"problem_id": 955, "library_problem_id": 23, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 956, "code": "```python\n    num_batches = t.shape[0]\n    diag_len = t.shape[1]\n    result = torch.zeros(num_batches, diag_len, diag_len)\n    for i in range(num_batches):\n        result[i] = torch.diag(t[i])\n    return result\ndef load_data():\n    df = pd.read_csv('diag_elements.csv')\n    tensor = torch.tensor(df.values, dtype=torch.float32)\n    return tensor\n```\n\n</code>", "metadata": {"problem_id": 956, "library_problem_id": 24, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 23}}
{"id": 957, "code": "```python\nif a.shape[0] == 2 and b.shape[0] == 1:\n    ab = torch.cat((a, b), dim=0)\nelse:\n    ab = torch.stack((a, b), dim=0)\n```\n\n</code>", "metadata": {"problem_id": 957, "library_problem_id": 25, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 958, "code": "```python\na = torch.tensor(a)\nb = torch.tensor(b)\nab = torch.cat((a,b),0)\n```\n\n</code>", "metadata": {"problem_id": 958, "library_problem_id": 26, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 959, "code": "```python\n    if a.shape[0] == 1:\n        ab = torch.stack((a,b),0)\n    else:\n        ab = torch.cat((a,b),0)\n    return ab\ndef load_data():\n    a = torch.randn(2,11, requires_grad=True)\n    b = torch.randn(1,11, requires_grad=True)\n    return a, b\n```\n\n</code>", "metadata": {"problem_id": 959, "library_problem_id": 27, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 960, "code": "```python\nfor i in range(a.shape[0]):\n    length = lengths[i]\n    a[i, length:, :] = 0\n```\n\n</code>", "metadata": {"problem_id": 960, "library_problem_id": 28, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 961, "code": "```python\nfor i in range(a.shape[0]):\n    length = lengths[i]\n    a[i, length:, :] = 2333\n```\n\n</code>", "metadata": {"problem_id": 961, "library_problem_id": 29, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 28}}
{"id": 962, "code": "```python\nfor i in range(a.shape[0]):\n    length = lengths[i]\n    a[i, length:, :] = 0\n```\n\n</code>", "metadata": {"problem_id": 962, "library_problem_id": 30, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 963, "code": "```python\nfor i in range(a.shape[0]):\n    a[i, :lengths[i], :] = 2333\n```\n\n</code>", "metadata": {"problem_id": 963, "library_problem_id": 31, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 28}}
{"id": 964, "code": "```python\ntensor_of_tensors = torch.stack(list_of_tensors)\n```\n\n</code>", "metadata": {"problem_id": 964, "library_problem_id": 32, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 965, "code": "```python\nnew_tensors = torch.stack(list)\n```\n\n</code>", "metadata": {"problem_id": 965, "library_problem_id": 33, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 966, "code": "```python\n    tt = torch.stack(lt)\n    return tt\ndef load_data():\n    list_of_tensors = [ torch.randn(3), torch.randn(3), torch.randn(3)]\n    return list_of_tensors\n```\n\n</code>", "metadata": {"problem_id": 966, "library_problem_id": 34, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 967, "code": "```python\ntensor_of_tensors = torch.stack(list_of_tensors)\n```\n\n</code>", "metadata": {"problem_id": 967, "library_problem_id": 35, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 968, "code": "```python\nresult = t[torch.arange(t.shape[0]), torch.tensor(idx)]\n```\n\n</code>", "metadata": {"problem_id": 968, "library_problem_id": 36, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 969, "code": "```python\nresult = t[torch.arange(len(idx)), torch.tensor(idx)]\n```\n\n</code>", "metadata": {"problem_id": 969, "library_problem_id": 37, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 36}}
{"id": 970, "code": "```python\nidx = torch.tensor(idx, dtype=torch.int64)\nidx = 1 - idx\nresult = t[torch.arange(t.shape[0]), idx]\n```\n\n</code>", "metadata": {"problem_id": 970, "library_problem_id": 38, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 971, "code": "```python\nresult = torch.gather(x, 1, ids.unsqueeze(2).repeat(1, 1, x.shape[2])).squeeze(1)\n```\n\n</code>", "metadata": {"problem_id": 971, "library_problem_id": 39, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 972, "code": "```python\nresult = torch.gather(x, 1, ids.unsqueeze(2).repeat(1, 1, x.shape[2])).squeeze(1)\n```\n\n</code>", "metadata": {"problem_id": 972, "library_problem_id": 40, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 39}}
{"id": 973, "code": "```python\nresult = torch.gather(x, 1, ids.unsqueeze(2).repeat(1, 1, 2))\nresult = result.sum(dim=1)\n```\n\n</code>", "metadata": {"problem_id": 973, "library_problem_id": 41, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 39}}
{"id": 974, "code": "```python\ny = torch.argmax(softmax_output, dim=1).reshape(-1, 1)\n```\n\n</code>", "metadata": {"problem_id": 974, "library_problem_id": 42, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 975, "code": "```python\ny = torch.argmax(softmax_output, dim=1).reshape(-1, 1)\n```\n\n</code>", "metadata": {"problem_id": 975, "library_problem_id": 43, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 42}}
{"id": 976, "code": "```python\ny = torch.argmin(softmax_output, dim=1).reshape(-1, 1)\n```\n\n</code>", "metadata": {"problem_id": 976, "library_problem_id": 44, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 977, "code": "```python\n    y = torch.argmax(softmax_output, dim=1).reshape(-1, 1)\n    return y\ndef load_data():\n    softmax_output = torch.tensor([[0.2, 0.1, 0.7],\n                                 [0.6, 0.2, 0.2],\n                                 [0.1, 0.8, 0.1]])\n    return softmax_output\n```\n\n</code>", "metadata": {"problem_id": 977, "library_problem_id": 45, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 42}}
{"id": 978, "code": "```python\n    y = torch.argmin(softmax_output, dim=1)\n```\n\n</code>", "metadata": {"problem_id": 978, "library_problem_id": 46, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 42}}
{"id": 979, "code": "```python\ndef cross_entropy2d(input, target, weight=None, size_average=True):\n    n, c, h, w = input.size()\n    log_p = F.log_softmax(input, dim=1)\n    log_p = log_p.transpose(1, 2).transpose(2, 3).contiguous().view(-1, c)\n    target = target.view(-1).long()\n    loss = F.nll_loss(log_p, target, weight=weight, size_average=False)\n    if size_average:\n        loss /= (h * w * n)\n    return loss\nloss = cross_entropy2d(images, labels)\n```\n\n</code>", "metadata": {"problem_id": 979, "library_problem_id": 47, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 980, "code": "```python\ncnt_equal = torch.sum(A == B).item()\n```\n\n</code>", "metadata": {"problem_id": 980, "library_problem_id": 48, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 981, "code": "```python\ncnt_equal = torch.sum(A == B).item()\n```\n\n</code>", "metadata": {"problem_id": 981, "library_problem_id": 49, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 982, "code": "```python\ncnt_not_equal = torch.sum(A != B)\n```\n\n</code>", "metadata": {"problem_id": 982, "library_problem_id": 50, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 48}}
{"id": 983, "code": "```python\n    cnt_equal = torch.sum(A == B).item()\n    return cnt_equal\ndef load_data():\n    A = torch.randint(0, 10, (1000, 1))\n    B = torch.randint(0, 10, (1000, 1))\n    return A, B\n```\n\n</code>", "metadata": {"problem_id": 983, "library_problem_id": 51, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 984, "code": "```python\ncnt_equal = (A[A.shape[0]//2:] == B[B.shape[0]//2:]).sum()\n```\n\n</code>", "metadata": {"problem_id": 984, "library_problem_id": 52, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 48}}
{"id": 985, "code": "```python\nA = A[-A.shape[0]//2:]\nB = B[-B.shape[0]//2:]\ncnt_not_equal = torch.sum(A != B)\n```\n\n</code>", "metadata": {"problem_id": 985, "library_problem_id": 53, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 48}}
{"id": 986, "code": "```python\ntensors_31 = []\nfor i in range(40 - chunk_dim + 1):\n    tensors_31.append(a[:, :, :, i:i+chunk_dim, :])\n```\n\n</code>", "metadata": {"problem_id": 986, "library_problem_id": 54, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 987, "code": "```python\ntensors_31 = []\nfor i in range(31):\n    tensors_31.append(a[:, :, i:i+chunk_dim, :, :])\n```\n\n</code>", "metadata": {"problem_id": 987, "library_problem_id": 55, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 988, "code": "```python\nmask = mask.bool()\noutput[mask] = clean_input_spectrogram[mask]\n```\n\n</code>", "metadata": {"problem_id": 988, "library_problem_id": 56, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 989, "code": "```python\nmask = mask.bool()\noutput = torch.where(mask, output, clean_input_spectrogram)\n```\n\n</code>", "metadata": {"problem_id": 989, "library_problem_id": 57, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 56}}
{"id": 990, "code": "```python\nabs_x = torch.abs(x)\nabs_y = torch.abs(y)\nminimums = torch.minimum(abs_x, abs_y)\nx_mask = (abs_x <= abs_y)\ny_mask = (abs_y <= abs_x)\nsigned_min = x_mask * torch.sign(x) * minimums + y_mask * torch.sign(y) * minimums\n```\n\n</code>", "metadata": {"problem_id": 990, "library_problem_id": 58, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 991, "code": "```python\nabs_x = torch.abs(x)\nabs_y = torch.abs(y)\nmax_abs = torch.maximum(abs_x, abs_y)\nsign_x = torch.sign(x)\nsign_y = torch.sign(y)\nsigned_max_x = sign_x * max_abs\nsigned_max_y = sign_y * max_abs\nsigned_max = torch.where(max_abs == abs_x, signed_max_x, signed_max_y)\n```\n\n</code>", "metadata": {"problem_id": 991, "library_problem_id": 59, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 992, "code": "```python\n    abs_x = torch.abs(x)\n    abs_y = torch.abs(y)\n    minimum = torch.minimum(abs_x, abs_y)\n    mask_x = (abs_x == minimum)\n    mask_y = (abs_y == minimum)\n    signed_min = torch.where(mask_x, torch.sign(x) * minimum, torch.sign(y) * minimum)\n    return signed_min\ndef load_data():\n    x = torch.tensor([-1.0, -2.0, 3.0])\n    y = torch.tensor([1.0, 2.0, -2.0])\n    return x, y\n```\n\n</code>", "metadata": {"problem_id": 992, "library_problem_id": 60, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 993, "code": "```python\noutput = MyNet(input)\noutput = torch.nn.functional.softmax(output, dim=1)\nconf, classes = torch.max(output.reshape(1, 3), 1)\nconfidence_score = conf.item()\n```\n\n</code>", "metadata": {"problem_id": 993, "library_problem_id": 61, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 994, "code": "```python\na_cols = a.shape[1]\nb_cols = b.shape[1]\noverlap = torch.mean(torch.stack((a[:, a_cols - 1], b[:, 0])), dim=0)\nresult = torch.cat((a[:, :a_cols - 1], overlap.reshape(-1, 1), b[:, 1:]), dim=1)\n```\n\n</code>", "metadata": {"problem_id": 994, "library_problem_id": 62, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 995, "code": "```python\n    a_cols = a.shape[1]\n    b_cols = b.shape[1]\n    overlap = (a[:, a_cols - 1] + b[:, 0]) / 2\n    result = torch.cat((a[:, :a_cols - 1], overlap.reshape(-1, 1), b[:, 1:]), dim=1)\n    return result\ndef load_data():\n    a = torch.Tensor([[1, 2, 3], [1, 2, 3]])\n    b = torch.Tensor([[5, 6, 7], [5, 6, 7]])\n    return a, b\n```\n\n</code>", "metadata": {"problem_id": 995, "library_problem_id": 63, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 62}}
{"id": 996, "code": "```python\ndef load_data():\n    t = torch.arange(8).reshape(4,2).float()\n    return t\nt = load_data()\nnew_row = torch.zeros(t.shape[1])\nnew_col = torch.zeros(t.shape[0]+2)\nt = torch.cat([new_row.unsqueeze(0), t, new_row.unsqueeze(0)], dim=0)\nt = torch.cat([new_col.unsqueeze(1), t, new_col.unsqueeze(1)], dim=1)\nresult = t\n```\n\n</code>", "metadata": {"problem_id": 996, "library_problem_id": 64, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 997, "code": "```python\nt = torch.arange(4).reshape(1,2,2).float()\npad = (1, 1, 1, 1)\nresult = torch.nn.functional.pad(t, pad, mode='constant', value=0)\n```\n\n</code>", "metadata": {"problem_id": 997, "library_problem_id": 65, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"id": 998, "code": "```python\nt = torch.arange(1,9).reshape(4,2).float()\nnew = torch.full((t.shape[0]+2, t.shape[1]+2), -1.0)\nnew[1:-1, 1:-1] = t\nresult = new\n```\n\n</code>", "metadata": {"problem_id": 998, "library_problem_id": 66, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
{"id": 999, "code": "```python\nW = W.unsqueeze(0).repeat(data.shape[0], 1, 1)\nW = W.transpose(1, 2)\nresult = torch.bmm(data, W).squeeze()\n```\n\n</code>", "metadata": {"problem_id": 999, "library_problem_id": 67, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 67}}
