{"completion_id": 6, "fail_reason": ""}
{"completion_id": 5, "fail_reason": ""}
{"completion_id": 9, "fail_reason": ""}
{"completion_id": 18, "fail_reason": ""}
{"completion_id": 15, "fail_reason": ""}
{"completion_id": 32, "fail_reason": ""}
{"completion_id": 43, "fail_reason": ""}
{"completion_id": 42, "fail_reason": ""}
{"completion_id": 44, "fail_reason": "'numpy.ndarray' object has no attribute 'dropna'"}
{"completion_id": 41, "fail_reason": ""}
{"completion_id": 39, "fail_reason": ""}
{"completion_id": 40, "fail_reason": ""}
{"completion_id": 46, "fail_reason": ""}
{"completion_id": 45, "fail_reason": ""}
{"completion_id": 47, "fail_reason": ""}
{"completion_id": 48, "fail_reason": ""}
{"completion_id": 51, "fail_reason": ""}
{"completion_id": 49, "fail_reason": ""}
{"completion_id": 50, "fail_reason": ""}
{"completion_id": 53, "fail_reason": ""}
{"completion_id": 52, "fail_reason": ""}
{"completion_id": 60, "fail_reason": ""}
{"completion_id": 56, "fail_reason": ""}
{"completion_id": 59, "fail_reason": ""}
{"completion_id": 58, "fail_reason": ""}
{"completion_id": 64, "fail_reason": ""}
{"completion_id": 69, "fail_reason": ""}
{"completion_id": 66, "fail_reason": ""}
{"completion_id": 68, "fail_reason": ""}
{"completion_id": 65, "fail_reason": ""}
{"completion_id": 67, "fail_reason": ""}
{"completion_id": 74, "fail_reason": "Result is too large for pandas.Timedelta. Convert inputs to datetime.datetime with 'Timestamp.to_pydatetime()' before subtracting."}
{"completion_id": 73, "fail_reason": "Result is too large for pandas.Timedelta. Convert inputs to datetime.datetime with 'Timestamp.to_pydatetime()' before subtracting."}
{"completion_id": 75, "fail_reason": "time data '1/14/9' does not match format '%m/%d/%y' (match)"}
{"completion_id": 77, "fail_reason": ""}
{"completion_id": 79, "fail_reason": ""}
{"completion_id": 84, "fail_reason": "'list' object has no attribute 'shift'"}
{"completion_id": 81, "fail_reason": ""}
{"completion_id": 90, "fail_reason": ""}
{"completion_id": 88, "fail_reason": ""}
{"completion_id": 86, "fail_reason": ""}
{"completion_id": 101, "fail_reason": ""}
{"completion_id": 96, "fail_reason": ""}
{"completion_id": 103, "fail_reason": ""}
{"completion_id": 100, "fail_reason": ""}
{"completion_id": 102, "fail_reason": ""}
{"completion_id": 104, "fail_reason": ""}
{"completion_id": 109, "fail_reason": ""}
{"completion_id": 108, "fail_reason": ""}
{"completion_id": 107, "fail_reason": ""}
{"completion_id": 129, "fail_reason": "'list' object has no attribute 'apply'"}
{"completion_id": 128, "fail_reason": ""}
{"completion_id": 122, "fail_reason": ""}
{"completion_id": 127, "fail_reason": ""}
{"completion_id": 131, "fail_reason": "Cannot set a DataFrame with multiple columns to the single column index_original"}
{"completion_id": 130, "fail_reason": "Columns must be same length as key"}
{"completion_id": 132, "fail_reason": ""}
{"completion_id": 135, "fail_reason": ""}
{"completion_id": 136, "fail_reason": ""}
{"completion_id": 137, "fail_reason": ""}
{"completion_id": 138, "fail_reason": ""}
{"completion_id": 141, "fail_reason": ""}
{"completion_id": 148, "fail_reason": "GroupBy.sum() got an unexpected keyword argument 'skipna'"}
{"completion_id": 142, "fail_reason": ""}
{"completion_id": 150, "fail_reason": "GroupBy.sum() got an unexpected keyword argument 'skipna'"}
{"completion_id": 149, "fail_reason": "GroupBy.sum() got an unexpected keyword argument 'skipna'"}
{"completion_id": 157, "fail_reason": ""}
{"completion_id": 155, "fail_reason": ""}
{"completion_id": 158, "fail_reason": ""}
{"completion_id": 160, "fail_reason": ""}
{"completion_id": 159, "fail_reason": ""}
{"completion_id": 121, "fail_reason": ""}
{"completion_id": 163, "fail_reason": ""}
{"completion_id": 162, "fail_reason": ""}
{"completion_id": 164, "fail_reason": ""}
{"completion_id": 170, "fail_reason": ""}
{"completion_id": 165, "fail_reason": ""}
{"completion_id": 171, "fail_reason": ""}
{"completion_id": 173, "fail_reason": ""}
{"completion_id": 151, "fail_reason": ""}
{"completion_id": 152, "fail_reason": ""}
{"completion_id": 178, "fail_reason": ""}
{"completion_id": 179, "fail_reason": ""}
{"completion_id": 177, "fail_reason": ""}
{"completion_id": 184, "fail_reason": ""}
{"completion_id": 187, "fail_reason": ""}
{"completion_id": 29, "fail_reason": ""}
{"completion_id": 191, "fail_reason": "pivot_table() got an unexpected keyword argument 'rows'"}
{"completion_id": 190, "fail_reason": "pivot_table() got an unexpected keyword argument 'rows'"}
{"completion_id": 189, "fail_reason": ""}
{"completion_id": 185, "fail_reason": ""}
{"completion_id": 188, "fail_reason": ""}
{"completion_id": 193, "fail_reason": "pivot_table() got an unexpected keyword argument 'rows'"}
{"completion_id": 192, "fail_reason": "pivot_table() got an unexpected keyword argument 'rows'"}
{"completion_id": 197, "fail_reason": ""}
{"completion_id": 194, "fail_reason": ""}
{"completion_id": 200, "fail_reason": ""}
{"completion_id": 201, "fail_reason": ""}
{"completion_id": 199, "fail_reason": ""}
{"completion_id": 204, "fail_reason": ""}
{"completion_id": 205, "fail_reason": ""}
{"completion_id": 208, "fail_reason": ""}
{"completion_id": 209, "fail_reason": ""}
{"completion_id": 215, "fail_reason": ""}
{"completion_id": 211, "fail_reason": ""}
{"completion_id": 203, "fail_reason": "maximum recursion depth exceeded while calling a Python object"}
{"completion_id": 216, "fail_reason": "'Index' object has no attribute 'mode'"}
{"completion_id": 202, "fail_reason": "maximum recursion depth exceeded while calling a Python object"}
{"completion_id": 219, "fail_reason": ""}
{"completion_id": 225, "fail_reason": ""}
{"completion_id": 222, "fail_reason": ""}
{"completion_id": 224, "fail_reason": ""}
{"completion_id": 223, "fail_reason": ""}
{"completion_id": 227, "fail_reason": ""}
{"completion_id": 226, "fail_reason": ""}
{"completion_id": 228, "fail_reason": ""}
{"completion_id": 230, "fail_reason": ""}
{"completion_id": 237, "fail_reason": ""}
{"completion_id": 240, "fail_reason": ""}
{"completion_id": 242, "fail_reason": ""}
{"completion_id": 238, "fail_reason": ""}
{"completion_id": 244, "fail_reason": ""}
{"completion_id": 241, "fail_reason": ""}
{"completion_id": 245, "fail_reason": ""}
{"completion_id": 249, "fail_reason": ""}
{"completion_id": 263, "fail_reason": ""}
{"completion_id": 264, "fail_reason": ""}
{"completion_id": 257, "fail_reason": ""}
{"completion_id": 265, "fail_reason": ""}
{"completion_id": 268, "fail_reason": ""}
{"completion_id": 272, "fail_reason": "float() argument must be a string or a real number, not 'NAType'"}
{"completion_id": 271, "fail_reason": "float() argument must be a string or a real number, not 'NAType'"}
{"completion_id": 270, "fail_reason": ""}
{"completion_id": 269, "fail_reason": ""}
{"completion_id": 279, "fail_reason": "'numpy.ndarray' object has no attribute 'isin'"}
{"completion_id": 278, "fail_reason": "'numpy.ndarray' object has no attribute 'isin'"}
{"completion_id": 280, "fail_reason": ""}
{"completion_id": 281, "fail_reason": ""}
{"completion_id": 285, "fail_reason": ""}
{"completion_id": 284, "fail_reason": ""}
{"completion_id": 286, "fail_reason": ""}
{"completion_id": 298, "fail_reason": "\nArrays are not equal\n\n(shapes (5, 5), (5, 3) mismatch)\n x: array([[0., 0., 0., 1., 0.],\n       [1., 0., 0., 0., 0.],\n       [0., 1., 0., 0., 0.],...\n y: array([[0., 0., 1.],\n       [1., 0., 0.],\n       [0., 1., 0.],..."}
{"completion_id": 307, "fail_reason": "setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part."}
{"completion_id": 304, "fail_reason": "\nArrays are not equal\n\nMismatched elements: 6 / 6 (100%)\nMax absolute difference: 1\nMax relative difference: 0.5\n x: array([[6, 7],\n       [4, 5],\n       [2, 3]])\n y: array([[7, 6],\n       [5, 4],\n       [3, 2]])"}
{"completion_id": 318, "fail_reason": "\nArrays are not equal\n\nMismatched elements: 6 / 10 (60%)\nMax absolute difference: 30\nMax relative difference: 0.66666667\n x: array([[10, 50, 20, 40, 30],\n       [ 6, 10,  7,  9,  8]])\n y: array([[10, 30, 50, 40, 20],\n       [ 6,  8, 10,  9,  7]])"}
{"completion_id": 314, "fail_reason": "\nArrays are not equal\n\n(shapes (1,), (2,) mismatch)\n x: array([1])\n y: array([0, 1])"}
{"completion_id": 319, "fail_reason": "\nArrays are not equal\n\nMismatched elements: 288 / 384 (75%)\nMax absolute difference: 0.96506596\nMax relative difference: 52.21996306\n x: array([[[0.914864, 0.370159, 0.015457, 0.928319, 0.428184, 0.966655,\n         0.96362 , 0.853009],\n        [0.294449, 0.385098, 0.851137, 0.316922, 0.169493, 0.556801,...\n y: array([[[0.474174, 0.097834, 0.491616, 0.473472, 0.173202, 0.433852,\n         0.398505, 0.61585 ],\n        [0.635094, 0.045304, 0.374613, 0.62586 , 0.503136, 0.85649 ,..."}
{"completion_id": 308, "fail_reason": ""}
{"completion_id": 328, "fail_reason": "\nArrays are not equal\n\nMismatched elements: 2 / 5 (40%)\nMax absolute difference: 5\nMax relative difference: 0.\n x: array([1, 2, 3, 4, 5])\n y: array([1, 2, 3, 0, 0])"}
{"completion_id": 339, "fail_reason": "\nArrays are not equal\n\nMismatched elements: 9 / 10 (90%)\nMax absolute difference: 4\nMax relative difference: 0.33333333\n x: array([[ 4,  8, 12, 16, 20],\n       [ 5,  9, 13, 17, 21]])\n y: array([[ 0,  6, 12, 18, 24],\n       [ 4,  8, 12, 16, 20]])"}
{"completion_id": 338, "fail_reason": "\nArrays are not equal\n\n(shapes (5, 5), (2, 5) mismatch)\n x: array([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14],...\n y: array([[ 0,  6, 12, 18, 24],\n       [ 4,  8, 12, 16, 20]])"}
{"completion_id": 345, "fail_reason": "\nNot equal to tolerance rtol=1e-07, atol=0\n\nMismatched elements: 8 / 8 (100%)\nMax absolute difference: 5.92607907\nMax relative difference: 0.58423214\n x: array([ 3.806368,  8.310484, 12.639186, 15.36792 , 16.887072, 19.561091,\n       19.899359, 20.407254])\n y: array([ 4.943714,  5.245749, 10.28928 , 11.87134 , 12.596708, 13.635012,\n       14.521737, 16.105729])"}
{"completion_id": 346, "fail_reason": "\nNot equal to tolerance rtol=1e-07, atol=0\n\nMismatched elements: 5 / 5 (100%)\nMax absolute difference: 4.03736431\nMax relative difference: 3.62678899\n x: array([ 0.107039,  5.150571,  9.479272, 10.583436, 11.528926])\n y: array([ 0.811172,  1.113206,  5.617322,  8.74312 , 12.425098])"}
{"completion_id": 347, "fail_reason": "\nNot equal to tolerance rtol=1e-07, atol=0\n\nMismatched elements: 1 / 1 (100%)\nMax absolute difference: 7.09824141e-07\nMax relative difference: 0.80790995\n x: array(1.68769e-07)\n y: array(8.785931e-07)"}
{"completion_id": 359, "fail_reason": "name 'arr' is not defined"}
{"completion_id": 353, "fail_reason": "'list' object has no attribute 'reshape'"}
{"completion_id": 361, "fail_reason": "name 'arr' is not defined"}
{"completion_id": 354, "fail_reason": "\nArrays are not equal\n\n(shapes (1, 3), (3, 3) mismatch)\n x: array([[1, 1, 0]])\n y: array([[1, 1, 0],\n       [1, 1, 0],\n       [1, 1, 0]])"}
{"completion_id": 362, "fail_reason": "\nArrays are not equal\n\n(shapes (3, 2), (3, 1) mismatch)\n x: array([[ 0,  3],\n       [ 4,  7],\n       [ 8, 11]])\n y: array([[ 2],\n       [ 6],\n       [10]])"}
{"completion_id": 366, "fail_reason": "\nArrays are not equal\n\nMismatched elements: 4 / 8 (50%)\nMax absolute difference: 3\nMax relative difference: 1.\n x: array([[1, 2],\n       [3, 5],\n       [3, 4],\n       [6, 6]])\n y: array([[1, 2],\n       [3, 5],\n       [6, 6],\n       [3, 4]])"}
{"completion_id": 385, "fail_reason": "\nArrays are not equal\n\nMismatched elements: 8 / 16 (50%)\nMax absolute difference: 6\nMax relative difference: 2.\n x: array([[[ 1,  5],\n        [ 2,  6]],\n...\n y: array([[[ 1,  5],\n        [ 2,  6]],\n..."}
{"completion_id": 372, "fail_reason": "\nNot equal to tolerance rtol=1e-07, atol=0\n\nMismatched elements: 1 / 1 (100%)\nMax absolute difference: 0.02097349\nMax relative difference: 0.02463559\n x: array(0.830376)\n y: array(0.851349)"}
{"completion_id": 388, "fail_reason": ""}
{"completion_id": 387, "fail_reason": ""}
{"completion_id": 386, "fail_reason": ""}
{"completion_id": 389, "fail_reason": "\nArrays are not equal\n\nMismatched elements: 12 / 24 (50%)\nMax absolute difference: 3\nMax relative difference: 1.\n x: array([[ 0,  1,  2,  6,  7,  8],\n       [ 3,  4,  5,  9, 10, 11],\n       [12, 13, 14, 18, 19, 20],\n       [15, 16, 17, 21, 22, 23]])\n y: array([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23]])"}
{"completion_id": 390, "fail_reason": "\nArrays are not equal\n\nMismatched elements: 8 / 16 (50%)\nMax absolute difference: 6\nMax relative difference: 2.\n x: array([[[ 1,  5],\n        [ 2,  6]],\n...\n y: array([[[ 1,  5],\n        [ 2,  6]],\n..."}
{"completion_id": 391, "fail_reason": "\nArrays are not equal\n\n(shapes (3, 5), (3, 4) mismatch)\n x: array([[ 1,  2,  3,  5,  6],\n       [ 5,  6,  7,  5,  3],\n       [ 9, 10, 11,  4,  5]])\n y: array([[ 1,  2,  3,  5],\n       [ 5,  6,  7,  5],\n       [ 9, 10, 11,  4]])"}
{"completion_id": 394, "fail_reason": "invalid syntax. Perhaps you forgot a comma? (<string>, line 1)"}
{"completion_id": 350, "fail_reason": ""}
{"completion_id": 352, "fail_reason": ""}
{"completion_id": 373, "fail_reason": ""}
{"completion_id": 409, "fail_reason": "name 'elementwise_function' is not defined"}
{"completion_id": 410, "fail_reason": "'list' object has no attribute 'shape'"}
{"completion_id": 408, "fail_reason": "\nArrays are not equal\n\n(shapes (4,), (3,) mismatch)\n x: array([6., 1., 2., 8.])\n y: array([1., 2., 6.])"}
{"completion_id": 407, "fail_reason": "\nArrays are not equal\n\nMismatched elements: 2 / 3 (66.7%)\nMax absolute difference: 13.\nMax relative difference: 1.\n x: array([26., 12., 17.])\n y: array([13., 12., 30.])"}
{"completion_id": 420, "fail_reason": "smoothclamp() missing 2 required positional arguments: 'x_min' and 'x_max'"}
{"completion_id": 418, "fail_reason": "\nNot equal to tolerance rtol=1e-07, atol=0.01\n\nMismatched elements: 16 / 24 (66.7%)\nMax absolute difference: 0.59198803\nMax relative difference: 31.95825335\n x: array([[0.481563, 0.521341, 0.279612],\n       [0.238288, 0.35365 , 0.830276],\n       [0.496495, 0.614567, 0.015064],...\n y: array([[0.279612, 0.521341, 0.481563],\n       [0.830276, 0.35365 , 0.238288],\n       [0.015064, 0.614567, 0.496495],..."}
{"completion_id": 424, "fail_reason": "\nArrays are not equal\n\nMismatched elements: 262 / 300 (87.3%)\nMax absolute difference: 8.99991\nMax relative difference: 0.99999\n x: array([[[6.e-05, 6.e-05, 7.e-05, 7.e-05, 1.e-05],\n        [3.e-05, 9.e-05, 4.e-05, 2.e-05, 7.e-05],\n        [7.e-05, 2.e-05, 3.e-05, 5.e-05, 5.e-05],...\n y: array([[[6, 6, 7, 7, 1],\n        [3, 9, 4, 2, 7],\n        [7, 2, 3, 5, 5],..."}
{"completion_id": 427, "fail_reason": "\nArrays are not equal\n\n(shapes (6,), (1, 6) mismatch)\n x: array([0, 0, 0, 0, 0, 1])\n y: array([[0, 0, 0, 0, 0, 1]])"}
{"completion_id": 421, "fail_reason": "smoothclamp() missing 2 required positional arguments: 'x_min' and 'x_max'"}
{"completion_id": 440, "fail_reason": "\nNot equal to tolerance rtol=1e-07, atol=0\n\n(shapes (4, 3), (3, 4) mismatch)\n x: array([[9.      , 7.937254, 7.937254],\n       [2.      , 3.464102, 2.828427],\n       [5.      , 5.91608 , 5.      ],\n       [5.      , 5.477226, 3.162278]])\n y: array([[9., 2., 5., 5.],\n       [7., 6., 7., 6.],\n       [7., 4., 5., 2.]])"}
{"completion_id": 439, "fail_reason": ""}
{"completion_id": 458, "fail_reason": ""}
{"completion_id": 457, "fail_reason": ""}
{"completion_id": 456, "fail_reason": ""}
{"completion_id": 460, "fail_reason": ""}
{"completion_id": 461, "fail_reason": "\nNot equal to tolerance rtol=1e-07, atol=0\n\nx and y +inf location mismatch:\n x: array(0.562385)\n y: array(inf)"}
{"completion_id": 462, "fail_reason": "\nArrays are not equal\n\n(shapes (4,), (8,) mismatch)\n x: array([2, 1, 2, 1])\n y: array([2, 2, 2, 1, 2, 2, 1, 1])"}
{"completion_id": 463, "fail_reason": "all the input arrays must have same number of dimensions, but the array at index 0 has 2 dimension(s) and the array at index 1 has 1 dimension(s)"}
{"completion_id": 468, "fail_reason": "\nNot equal to tolerance rtol=1e-07, atol=0\n\n(shapes (3, 2), (2, 3) mismatch)\n x: array([[1, 2],\n       [2, 3],\n       [3, 4]])\n y: array([[1, 2, 3],\n       [2, 3, 4]])"}
{"completion_id": 469, "fail_reason": "\nArrays are not equal\n\nx and y +inf location mismatch:\n x: array(5.99231e+307+0.j)\n y: array(inf+0.j)"}
{"completion_id": 470, "fail_reason": "\nArrays are not equal\n\nx and y +inf location mismatch:\n x: array(1.5+0.j)\n y: array(inf+0.j)"}
{"completion_id": 375, "fail_reason": "\nNot equal to tolerance rtol=1e-07, atol=0\n\nMismatched elements: 1 / 2 (50%)\nMax absolute difference: 0.46884105\nMax relative difference: 0.18938151\n x: array([-47.941551,   2.006802])\n y: array([-47.941551,   2.475643])"}
{"completion_id": 472, "fail_reason": "\nNot equal to tolerance rtol=1e-07, atol=0\n\n(shapes (5, 6, 8), (1, 5, 6, 8) mismatch)\n x: array([[[0.640972, 0.822481, 0.132525, 0.862014, 0.922757, 0.487062,\n         0.606253, 0.76481 ],\n        [0.174839, 0.502566, 0.398663, 0.146374, 0.367534, 0.068172,...\n y: array([[[[0.640972, 0.822481, 0.132525, 0.862014, 0.922757, 0.487062,\n          0.606253, 0.76481 ],\n         [0.174839, 0.502566, 0.398663, 0.146374, 0.367534, 0.068172,..."}
{"completion_id": 475, "fail_reason": "Invalid length for input z for non rectangular grid"}
{"completion_id": 494, "fail_reason": "\nArrays are not equal\n\nMismatched elements: 1 / 1 (100%)\n x: array(False)\n y: array(True)"}
{"completion_id": 447, "fail_reason": "\nArrays are not equal\n\nMismatched elements: 8 / 8 (100%)\nMax absolute difference: 1\nMax relative difference: 1.\n x: array([8, 7, 4, 2, 4, 7, 4, 2])\n y: array([7, 6, 3, 1, 3, 6, 3, 1])"}
{"completion_id": 445, "fail_reason": "\nArrays are not equal\n\nMismatched elements: 8 / 8 (100%)\nMax absolute difference: 1\nMax relative difference: 1.\n x: array([8, 7, 4, 2, 4, 7, 4, 2])\n y: array([7, 6, 3, 1, 3, 6, 3, 1])"}
{"completion_id": 501, "fail_reason": ""}
{"completion_id": 488, "fail_reason": "\nNot equal to tolerance rtol=1e-07, atol=0\n\nMismatched elements: 15 / 18 (83.3%)\nMax absolute difference: 1.\nMax relative difference: 2.25\n x: array([[[1., 1., 0.],\n        [0., 0., 0.],\n        [0., 0., 0.]],...\n y: array([[[0.375   , 0.3125  , 0.      ],\n        [0.1875  , 0.375   , 1.      ],\n        [0.375   , 0.375   , 0.375   ]],..."}
{"completion_id": 516, "fail_reason": ""}
{"completion_id": 515, "fail_reason": ""}
{"completion_id": 521, "fail_reason": ""}
{"completion_id": 514, "fail_reason": "y tick1line should not be visible"}
{"completion_id": 512, "fail_reason": ""}
{"completion_id": 524, "fail_reason": "\nArrays are not almost equal to 6 decimals\n\n(shapes (100,), (10,) mismatch)\n x: array([0.      , 0.090909, 0.181818, 0.272727, 0.363636, 0.454545,\n       0.545455, 0.636364, 0.727273, 0.818182, 0.909091, 1.      ,\n       1.090909, 1.181818, 1.272727, 1.363636, 1.454545, 1.545455,...\n y: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"}
{"completion_id": 523, "fail_reason": ""}
{"completion_id": 526, "fail_reason": ""}
{"completion_id": 529, "fail_reason": ""}
{"completion_id": 530, "fail_reason": ""}
{"completion_id": 533, "fail_reason": ""}
{"completion_id": 540, "fail_reason": ""}
{"completion_id": 550, "fail_reason": ""}
{"completion_id": 571, "fail_reason": ""}
{"completion_id": 574, "fail_reason": ""}
{"completion_id": 575, "fail_reason": ""}
{"completion_id": 580, "fail_reason": ""}
{"completion_id": 585, "fail_reason": ""}
{"completion_id": 582, "fail_reason": "'Figure' object has no attribute '_gridspecs'"}
{"completion_id": 565, "fail_reason": ""}
{"completion_id": 567, "fail_reason": ""}
{"completion_id": 591, "fail_reason": "operands could not be broadcast together with shapes (7,) (10,) "}
{"completion_id": 593, "fail_reason": "LogScale.__init__() got an unexpected keyword argument 'basex'"}
{"completion_id": 596, "fail_reason": ""}
{"completion_id": 603, "fail_reason": ""}
{"completion_id": 604, "fail_reason": ""}
{"completion_id": 606, "fail_reason": ""}
{"completion_id": 612, "fail_reason": "Unrecognized marker style '*|'"}
{"completion_id": 626, "fail_reason": ""}
{"completion_id": 635, "fail_reason": ""}
{"completion_id": 638, "fail_reason": "pairplot() got an unexpected keyword argument 'legend'"}
{"completion_id": 643, "fail_reason": ""}
{"completion_id": 650, "fail_reason": "'NoneType' object is not iterable"}
{"completion_id": 661, "fail_reason": ""}
{"completion_id": 656, "fail_reason": ""}
{"completion_id": 654, "fail_reason": ""}
{"completion_id": 662, "fail_reason": "The number of FixedLocator locations (30), usually from a call to set_ticks, does not match the number of labels (15)."}
{"completion_id": 672, "fail_reason": ""}
{"completion_id": 673, "fail_reason": "Graph execution error:\n\n0-th value returned by pyfunc_0 is int32, but expects int64\n\t [[{{node PyFunc}}]]\n\t [[IteratorGetNext_1]]"}
{"completion_id": 679, "fail_reason": ""}
{"completion_id": 682, "fail_reason": "{{function_node __wrapped__Reshape_device_/job:localhost/replica:0/task:0/device:CPU:0}} Input to reshape is a tensor with 2550 values, but the requested shape has 2560000 [Op:Reshape]"}
{"completion_id": 684, "fail_reason": "{{function_node __wrapped__Reshape_device_/job:localhost/replica:0/task:0/device:CPU:0}} Input to reshape is a tensor with 2600 values, but the requested shape has 2560000 [Op:Reshape]"}
{"completion_id": 683, "fail_reason": "{{function_node __wrapped__Reshape_device_/job:localhost/replica:0/task:0/device:CPU:0}} Input to reshape is a tensor with 2600 values, but the requested shape has 2560000 [Op:Reshape]"}
{"completion_id": 691, "fail_reason": "'result'"}
{"completion_id": 695, "fail_reason": ""}
{"completion_id": 696, "fail_reason": ""}
{"completion_id": 697, "fail_reason": ""}
{"completion_id": 699, "fail_reason": "{{function_node __wrapped__RealDiv_device_/job:localhost/replica:0/task:0/device:CPU:0}} Incompatible shapes: [2,4,3] vs. [2,4,1,3] [Op:RealDiv] name: "}
{"completion_id": 700, "fail_reason": ""}
{"completion_id": 723, "fail_reason": ""}
{"completion_id": 720, "fail_reason": ""}
{"completion_id": 701, "fail_reason": "invalid syntax (<string>, line 9)"}
{"completion_id": 703, "fail_reason": ""}
{"completion_id": 741, "fail_reason": ""}
{"completion_id": 743, "fail_reason": "\nArrays are not equal\n\nMismatched elements: 14 / 1024 (1.37%)\nMax absolute difference: 1.\nMax relative difference: 0.\n x: array([[0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],...\n y: array([[0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],..."}
{"completion_id": 744, "fail_reason": "\nArrays are not equal\n\nMismatched elements: 14 / 1024 (1.37%)\nMax absolute difference: 238.\nMax relative difference: 0.\n x: array([[0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],...\n y: array([[0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],..."}
{"completion_id": 745, "fail_reason": ""}
{"completion_id": 747, "fail_reason": ""}
{"completion_id": 749, "fail_reason": "operands could not be broadcast together with shapes (30,3) (6,6) "}
{"completion_id": 750, "fail_reason": "operands could not be broadcast together with shapes (30,3) (6,6) "}
{"completion_id": 751, "fail_reason": "operands could not be broadcast together with shapes (30,3) (6,6) "}
{"completion_id": 761, "fail_reason": ""}
{"completion_id": 765, "fail_reason": "'Voronoi' object has no attribute 'find_simplex'"}
{"completion_id": 766, "fail_reason": "'Voronoi' object has no attribute 'find_simplex'"}
{"completion_id": 763, "fail_reason": "Invalid length for input z for non rectangular grid"}
{"completion_id": 768, "fail_reason": "\nArrays are not equal\n\nMismatched elements: 9 / 25 (36%)\nMax absolute difference: 4.\nMax relative difference: 1.\n x: array([[0., 0., 0., 0., 0.],\n       [0., 1., 0., 0., 0.],\n       [1., 4., 2., 0., 0.],...\n y: array([[0., 0., 0., 0., 0.],\n       [0., 0., 0., 1., 0.],\n       [0., 0., 1., 4., 2.],..."}
{"completion_id": 755, "fail_reason": "DataFrame.iloc[:, 3] (column name=\"AB\") are different\n\nDataFrame.iloc[:, 3] (column name=\"AB\") values are different (40.0 %)\n[index]: [1, 2, 3, 4, 5]\n[left]:  [nan, -1.0, -1.0, -1.0, nan]\n[right]: [nan, nan, -1.0, -1.0, -1.0]"}
{"completion_id": 774, "fail_reason": ""}
{"completion_id": 772, "fail_reason": ""}
{"completion_id": 762, "fail_reason": ""}
{"completion_id": 773, "fail_reason": ""}
{"completion_id": 775, "fail_reason": "\nArrays are not equal\n\nMismatched elements: 8 / 25 (32%)\nMax absolute difference: 31.5\nMax relative difference: 4.2\n x: array([[  -5. ,   13. ,    0. ,    0. ,    0. ],\n       [   2.5,  -23. ,   28.5,    0. ,    0. ],\n       [   0. ,   11. ,  -53. ,   50. ,    0. ],...\n y: array([[  -5. ,    2.5,    0. ,    0. ,    0. ],\n       [  13. ,  -23. ,   11. ,    0. ,    0. ],\n       [   0. ,   28.5,  -53. ,   25.5,    0. ],..."}
{"completion_id": 726, "fail_reason": ""}
{"completion_id": 781, "fail_reason": "can't multiply sequence by non-int of type 'float'"}
{"completion_id": 783, "fail_reason": "\nArrays are not equal\n\nMismatched elements: 18 / 36 (50%)\nMax absolute difference: 1.\nMax relative difference: 1.\n x: array([[6., 5., 4., 3., 4., 5.],\n       [5., 4., 3., 2., 3., 4.],\n       [4., 3., 2., 1., 2., 3.],...\n y: array([[5., 4., 3., 3., 4., 5.],\n       [4., 3., 2., 2., 3., 4.],\n       [3., 2., 1., 1., 2., 3.],..."}
{"completion_id": 784, "fail_reason": ""}
{"completion_id": 787, "fail_reason": "ufunc 'isfinite' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''"}
{"completion_id": 790, "fail_reason": "\nNot equal to tolerance rtol=1e-07, atol=0\n\n(shapes (1, 18), (1, 19) mismatch)\n x: array([[ 1.000000e+01,  4.180017e+00,  1.743881e+00,  7.186063e-01,\n         2.929888e-01,  1.161540e-01,  4.268766e-02,  1.217034e-02,\n        -4.921387e-04, -5.698364e-03, -8.112491e-03, -9.321801e-03,...\n y: array([[1.000000e+01, 4.184837e+00, 1.751016e+00, 7.266780e-01,\n        3.015056e-01, 1.249062e-01, 5.158629e-02, 2.117409e-02,\n        8.588160e-03, 3.408544e-03, 1.306821e-03, 4.861835e-04,..."}
{"completion_id": 776, "fail_reason": ""}
{"completion_id": 795, "fail_reason": "'int' object is not iterable"}
{"completion_id": 780, "fail_reason": "'None of [0] are in the columns'"}
{"completion_id": 779, "fail_reason": "DataFrame.index are different\n\nDataFrame.index classes are different\n[left]:  Index(['    1415777_at Pnliprp1   ', '    1415777_at Pnliprp1\\t',\n       '    1415805_at Clps   ', '    1415805_at Clps\\t',\n       '    1415884_at Cela3b   ', '    1415884_at Cela3b\\t'],\n      dtype='object')\n[right]: MultiIndex([('1415777_at Pnliprp1',   'data'),\n            ('1415777_at Pnliprp1', 'zscore'),\n            (    '1415805_at Clps',   'data'),\n            (    '1415805_at Clps', 'zscore'),\n            (  '1415884_at Cela3b',   'data'),\n            (  '1415884_at Cela3b', 'zscore')],\n           )"}
{"completion_id": 802, "fail_reason": "\nArrays are not equal\n\nMismatched elements: 1 / 9 (11.1%)\nMax absolute difference: 1\nMax relative difference: 1.\n x: array([[0, 0, 1],\n       [0, 0, 0],\n       [0, 0, 0]])\n y: array([[0, 0, 1],\n       [0, 0, 0],\n       [1, 0, 0]])"}
{"completion_id": 798, "fail_reason": ""}
{"completion_id": 789, "fail_reason": "\nNot equal to tolerance rtol=1e-07, atol=0\n\n(shapes (1, 324), (1, 318) mismatch)\n x: array([[1.000000e+00, 9.172088e-01, 7.459769e-01, 2.962804e-01,\n        1.234058e-01, 5.123296e-02, 2.126037e-02, 8.812291e-03,\n        3.647366e-03, 1.511392e-03, 6.383719e-04, 2.968855e-04,...\n y: array([[1.000000e+00, 4.184681e-01, 1.751161e-01, 7.269096e-02,\n        3.017410e-02, 1.251137e-02, 5.175919e-03, 2.131846e-03,\n        8.720775e-04, 3.559379e-04, 1.519004e-04, 8.047085e-05,..."}
{"completion_id": 799, "fail_reason": ""}
{"completion_id": 800, "fail_reason": ""}
{"completion_id": 810, "fail_reason": "DataFrame Expected type <class 'pandas.core.frame.DataFrame'>, found <class 'pandas.core.series.Series'> instead"}
{"completion_id": 812, "fail_reason": "operands could not be broadcast together with shapes (11,) (12,) "}
{"completion_id": 808, "fail_reason": "The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()"}
{"completion_id": 809, "fail_reason": "The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()"}
{"completion_id": 848, "fail_reason": "This 'Pipeline' has no attribute 'transform'"}
{"completion_id": 847, "fail_reason": ""}
{"completion_id": 850, "fail_reason": ""}
{"completion_id": 851, "fail_reason": "Found input variables with inconsistent numbers of samples: [16, 36]"}
{"completion_id": 866, "fail_reason": "Feature names are only supported if all input features have string names, but your input has ['int', 'str'] as feature name / column name types. If you want feature names to be stored and validated, you must convert them all to strings, by using X.columns = X.columns.astype(str) for example. Otherwise you can remove feature / column names from your input data, or convert them all to a non-string data type."}
{"completion_id": 867, "fail_reason": "name 'pandas' is not defined"}
{"completion_id": 869, "fail_reason": ""}
{"completion_id": 871, "fail_reason": ""}
{"completion_id": 870, "fail_reason": ""}
{"completion_id": 868, "fail_reason": ""}
{"completion_id": 884, "fail_reason": ""}
{"completion_id": 883, "fail_reason": ""}
{"completion_id": 885, "fail_reason": ""}
{"completion_id": 877, "fail_reason": ""}
{"completion_id": 879, "fail_reason": ""}
{"completion_id": 881, "fail_reason": "AgglomerativeClustering.__init__() got an unexpected keyword argument 'affinity'"}
{"completion_id": 880, "fail_reason": "AgglomerativeClustering.__init__() got an unexpected keyword argument 'affinity'"}
{"completion_id": 887, "fail_reason": "Expected 2D array, got 1D array instead:\narray=[1. 2. 3. 2. 4. 5.].\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}
{"completion_id": 886, "fail_reason": ""}
{"completion_id": 894, "fail_reason": ""}
{"completion_id": 882, "fail_reason": "AgglomerativeClustering.__init__() got an unexpected keyword argument 'affinity'"}
{"completion_id": 888, "fail_reason": "Data must be positive."}
{"completion_id": 889, "fail_reason": ""}
{"completion_id": 904, "fail_reason": "'CountVectorizer' object has no attribute 'get_feature_names'"}
{"completion_id": 899, "fail_reason": "name 'SelectFromModel' is not defined"}
{"completion_id": 902, "fail_reason": ""}
{"completion_id": 903, "fail_reason": "'CountVectorizer' object has no attribute 'get_feature_names'"}
{"completion_id": 906, "fail_reason": ""}
{"completion_id": 905, "fail_reason": ""}
{"completion_id": 907, "fail_reason": ""}
{"completion_id": 901, "fail_reason": "module 'sklearn' has no attribute 'feature_selection'"}
{"completion_id": 917, "fail_reason": ""}
{"completion_id": 926, "fail_reason": ""}
{"completion_id": 922, "fail_reason": ""}
{"completion_id": 930, "fail_reason": ""}
{"completion_id": 837, "fail_reason": ""}
{"completion_id": 706, "fail_reason": "Invalid filepath extension for saving. Please add either a `.keras` extension for the native Keras format (recommended) or a `.h5` extension. Use `model.export(filepath)` if you want to export a SavedModel for use with TFLite/TFServing/etc. Received: filepath=my_model."}
{"completion_id": 935, "fail_reason": ""}
{"completion_id": 933, "fail_reason": ""}
{"completion_id": 944, "fail_reason": ""}
{"completion_id": 942, "fail_reason": ""}
{"completion_id": 934, "fail_reason": ""}
{"completion_id": 838, "fail_reason": ""}
{"completion_id": 945, "fail_reason": ""}
{"completion_id": 948, "fail_reason": "can't convert np.ndarray of type numpy.object_. The only supported types are: float64, float32, float16, complex64, complex128, int64, int32, int16, int8, uint8, and bool."}
{"completion_id": 950, "fail_reason": "can't convert np.ndarray of type numpy.object_. The only supported types are: float64, float32, float16, complex64, complex128, int64, int32, int16, int8, uint8, and bool."}
{"completion_id": 949, "fail_reason": "can't convert np.ndarray of type numpy.object_. The only supported types are: float64, float32, float16, complex64, complex128, int64, int32, int16, int8, uint8, and bool."}
{"completion_id": 849, "fail_reason": ""}
{"completion_id": 962, "fail_reason": ""}
{"completion_id": 973, "fail_reason": "gather(): Expected dtype int64 for index"}
{"completion_id": 987, "fail_reason": ""}
{"completion_id": 989, "fail_reason": "The size of tensor a (3) must match the size of tensor b (2) at non-singleton dimension 2"}
{"completion_id": 996, "fail_reason": ""}
{"completion_id": 997, "fail_reason": ""}
{"completion_id": 998, "fail_reason": ""}
{"completion_id": 999, "fail_reason": ""}
{"completion_id": 993, "fail_reason": "Dimension out of range (expected to be in range of [-1, 0], but got 1)"}
